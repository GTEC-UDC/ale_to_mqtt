// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_application;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_building;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_bytes_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_campus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_data_prio_stats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_data_rate_stats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_data_traffic_type_stats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_floor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_iap_message_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ip_address;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_key_value_type;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_location_rtls_tag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_mac_address;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_util_stats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_webcc_category;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_webcc_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ap_location;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ap_neighbor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ap_neighbor_list;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ap_rssi;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_destination;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_geofence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_geofence_notify_Access_point_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_iap_bytes_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_location_record;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_presence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_proximity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Access_point_location_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Access_point_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Application_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Building_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Campus_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Cluster_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Controller_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Destination_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Floor_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Geofence_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Info_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Location_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Presence_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Proximity_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Radio_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Rssi_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Station_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Topology_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Virtual_access_point_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Visibility_rec_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_query_response_WebCCCategory_result;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_rogue_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_rssi;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_spectrum_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_sta_rssi;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_state_station;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_stats_modem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_stats_uplink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_tag_rssi;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_virtual_access_point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_wan_comp_uplink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_wpa_key_handshake;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_air_monitor_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_air_monitor_rogue_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_auth_srvr_timeout;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_captive_portal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_cluster_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_controller_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_dot1x;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_geofence_notify;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_macauth;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_radio;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_state_access_point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_station;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_stats_ip_probe_uplink;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_stats_role_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_stats_ssid_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_stats_vlan_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_summary_appid_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_summary_webcat_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_summary_webrep_iap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_topology;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_uplink_bandwidth;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_uplink_info;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_url_detail_record;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_utilization_stats_radio;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_visibility_rec;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_iap_client_url;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_location;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_stats_station;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_access_point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_stats_radio;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_stats_vap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_security_message;
}  // namespace protobuf_schema_2eproto
namespace ce {
namespace nbapi {
class ip_addressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ip_address>
      _instance;
} _ip_address_default_instance_;
class mac_addressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mac_address>
      _instance;
} _mac_address_default_instance_;
class data_rate_statsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<data_rate_stats>
      _instance;
} _data_rate_stats_default_instance_;
class data_prio_statsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<data_prio_stats>
      _instance;
} _data_prio_stats_default_instance_;
class data_traffic_type_statsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<data_traffic_type_stats>
      _instance;
} _data_traffic_type_stats_default_instance_;
class ap_neighborDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ap_neighbor>
      _instance;
} _ap_neighbor_default_instance_;
class util_statsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<util_stats>
      _instance;
} _util_stats_default_instance_;
class location_recordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location_record>
      _instance;
} _location_record_default_instance_;
class location_rtls_tagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location_rtls_tag>
      _instance;
} _location_rtls_tag_default_instance_;
class locationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<location>
      _instance;
} _location_default_instance_;
class presenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<presence>
      _instance;
} _presence_default_instance_;
class rssiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rssi>
      _instance;
} _rssi_default_instance_;
class sta_rssiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<sta_rssi>
      _instance;
} _sta_rssi_default_instance_;
class tag_rssiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<tag_rssi>
      _instance;
} _tag_rssi_default_instance_;
class ap_rssiDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ap_rssi>
      _instance;
} _ap_rssi_default_instance_;
class stationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<station>
      _instance;
} _station_default_instance_;
class access_pointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<access_point>
      _instance;
} _access_point_default_instance_;
class state_access_pointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<state_access_point>
      _instance;
} _state_access_point_default_instance_;
class stats_modemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_modem>
      _instance;
} _stats_modem_default_instance_;
class radioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<radio>
      _instance;
} _radio_default_instance_;
class virtual_access_pointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<virtual_access_point>
      _instance;
} _virtual_access_point_default_instance_;
class destinationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<destination>
      _instance;
} _destination_default_instance_;
class applicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<application>
      _instance;
} _application_default_instance_;
class webcc_categoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<webcc_category>
      _instance;
} _webcc_category_default_instance_;
class webcc_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<webcc_info>
      _instance;
} _webcc_info_default_instance_;
class visibility_recDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<visibility_rec>
      _instance;
} _visibility_rec_default_instance_;
class campusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<campus>
      _instance;
} _campus_default_instance_;
class buildingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<building>
      _instance;
} _building_default_instance_;
class floorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<floor>
      _instance;
} _floor_default_instance_;
class pointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<point>
      _instance;
} _point_default_instance_;
class geofenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<geofence>
      _instance;
} _geofence_default_instance_;
class geofence_notify_Access_point_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<geofence_notify_Access_point_info>
      _instance;
} _geofence_notify_Access_point_info_default_instance_;
class geofence_notifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<geofence_notify>
      _instance;
} _geofence_notify_default_instance_;
class stats_radioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_radio>
      _instance;
} _stats_radio_default_instance_;
class stats_vapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_vap>
      _instance;
} _stats_vap_default_instance_;
class stats_stationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_station>
      _instance;
} _stats_station_default_instance_;
class state_stationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<state_station>
      _instance;
} _state_station_default_instance_;
class uplink_bandwidthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<uplink_bandwidth>
      _instance;
} _uplink_bandwidth_default_instance_;
class uplink_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<uplink_info>
      _instance;
} _uplink_info_default_instance_;
class stats_uplinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_uplink>
      _instance;
} _stats_uplink_default_instance_;
class wan_comp_uplinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<wan_comp_uplink>
      _instance;
} _wan_comp_uplink_default_instance_;
class stats_ip_probe_uplinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_ip_probe_uplink>
      _instance;
} _stats_ip_probe_uplink_default_instance_;
class stats_tunnelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_tunnel>
      _instance;
} _stats_tunnel_default_instance_;
class bytes_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bytes_info>
      _instance;
} _bytes_info_default_instance_;
class iap_bytes_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<iap_bytes_info>
      _instance;
} _iap_bytes_info_default_instance_;
class stats_role_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_role_iap>
      _instance;
} _stats_role_iap_default_instance_;
class stats_vlan_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_vlan_iap>
      _instance;
} _stats_vlan_iap_default_instance_;
class stats_ssid_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_ssid_iap>
      _instance;
} _stats_ssid_iap_default_instance_;
class stats_portDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<stats_port>
      _instance;
} _stats_port_default_instance_;
class summary_webcat_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<summary_webcat_iap>
      _instance;
} _summary_webcat_iap_default_instance_;
class summary_appid_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<summary_appid_iap>
      _instance;
} _summary_appid_iap_default_instance_;
class summary_webrep_iapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<summary_webrep_iap>
      _instance;
} _summary_webrep_iap_default_instance_;
class ap_neighbor_listDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ap_neighbor_list>
      _instance;
} _ap_neighbor_list_default_instance_;
class utilization_stats_radioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<utilization_stats_radio>
      _instance;
} _utilization_stats_radio_default_instance_;
class proximityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<proximity>
      _instance;
} _proximity_default_instance_;
class dot1xDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<dot1x>
      _instance;
} _dot1x_default_instance_;
class wpa_key_handshakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<wpa_key_handshake>
      _instance;
} _wpa_key_handshake_default_instance_;
class captive_portalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<captive_portal>
      _instance;
} _captive_portal_default_instance_;
class macauthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<macauth>
      _instance;
} _macauth_default_instance_;
class auth_srvr_timeoutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<auth_srvr_timeout>
      _instance;
} _auth_srvr_timeout_default_instance_;
class security_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<security_message>
      _instance;
} _security_message_default_instance_;
class spectrum_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<spectrum_info>
      _instance;
} _spectrum_info_default_instance_;
class rogue_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rogue_info>
      _instance;
} _rogue_info_default_instance_;
class key_value_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<key_value_type>
      _instance;
} _key_value_type_default_instance_;
class infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<info>
      _instance;
} _info_default_instance_;
class controller_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<controller_info>
      _instance;
} _controller_info_default_instance_;
class cluster_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_info>
      _instance;
} _cluster_info_default_instance_;
class topologyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<topology>
      _instance;
} _topology_default_instance_;
class ap_locationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ap_location>
      _instance;
} _ap_location_default_instance_;
class nb_eventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<nb_event>
      _instance;
} _nb_event_default_instance_;
class query_response_Location_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Location_result>
      _instance;
} _query_response_Location_result_default_instance_;
class query_response_Presence_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Presence_result>
      _instance;
} _query_response_Presence_result_default_instance_;
class query_response_Rssi_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Rssi_result>
      _instance;
} _query_response_Rssi_result_default_instance_;
class query_response_Station_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Station_result>
      _instance;
} _query_response_Station_result_default_instance_;
class query_response_Radio_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Radio_result>
      _instance;
} _query_response_Radio_result_default_instance_;
class query_response_Destination_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Destination_result>
      _instance;
} _query_response_Destination_result_default_instance_;
class query_response_Application_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Application_result>
      _instance;
} _query_response_Application_result_default_instance_;
class query_response_Visibility_rec_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Visibility_rec_result>
      _instance;
} _query_response_Visibility_rec_result_default_instance_;
class query_response_Campus_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Campus_result>
      _instance;
} _query_response_Campus_result_default_instance_;
class query_response_Building_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Building_result>
      _instance;
} _query_response_Building_result_default_instance_;
class query_response_Floor_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Floor_result>
      _instance;
} _query_response_Floor_result_default_instance_;
class query_response_Access_point_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Access_point_result>
      _instance;
} _query_response_Access_point_result_default_instance_;
class query_response_Virtual_access_point_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Virtual_access_point_result>
      _instance;
} _query_response_Virtual_access_point_result_default_instance_;
class query_response_Geofence_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Geofence_result>
      _instance;
} _query_response_Geofence_result_default_instance_;
class query_response_Proximity_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Proximity_result>
      _instance;
} _query_response_Proximity_result_default_instance_;
class query_response_WebCCCategory_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_WebCCCategory_result>
      _instance;
} _query_response_WebCCCategory_result_default_instance_;
class query_response_Info_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Info_result>
      _instance;
} _query_response_Info_result_default_instance_;
class query_response_Topology_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Topology_result>
      _instance;
} _query_response_Topology_result_default_instance_;
class query_response_Controller_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Controller_result>
      _instance;
} _query_response_Controller_result_default_instance_;
class query_response_Cluster_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Cluster_result>
      _instance;
} _query_response_Cluster_result_default_instance_;
class query_response_Access_point_location_resultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response_Access_point_location_result>
      _instance;
} _query_response_Access_point_location_result_default_instance_;
class query_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_response>
      _instance;
} _query_response_default_instance_;
class iap_client_urlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<iap_client_url>
      _instance;
} _iap_client_url_default_instance_;
class url_detail_recordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<url_detail_record>
      _instance;
} _url_detail_record_default_instance_;
class iap_message_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<iap_message_info>
      _instance;
} _iap_message_info_default_instance_;
class air_monitor_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<air_monitor_info>
      _instance;
} _air_monitor_info_default_instance_;
class air_monitor_rogue_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<air_monitor_rogue_info>
      _instance;
} _air_monitor_rogue_info_default_instance_;
}  // namespace nbapi
}  // namespace ce
namespace protobuf_schema_2eproto {
static void InitDefaultsip_address() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_ip_address_default_instance_;
    new (ptr) ::ce::nbapi::ip_address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::ip_address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ip_address =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsip_address}, {}};

static void InitDefaultsmac_address() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_mac_address_default_instance_;
    new (ptr) ::ce::nbapi::mac_address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::mac_address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_mac_address =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmac_address}, {}};

static void InitDefaultsdata_rate_stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_data_rate_stats_default_instance_;
    new (ptr) ::ce::nbapi::data_rate_stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::data_rate_stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_data_rate_stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdata_rate_stats}, {}};

static void InitDefaultsdata_prio_stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_data_prio_stats_default_instance_;
    new (ptr) ::ce::nbapi::data_prio_stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::data_prio_stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_data_prio_stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdata_prio_stats}, {}};

static void InitDefaultsdata_traffic_type_stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_data_traffic_type_stats_default_instance_;
    new (ptr) ::ce::nbapi::data_traffic_type_stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::data_traffic_type_stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_data_traffic_type_stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdata_traffic_type_stats}, {}};

static void InitDefaultsap_neighbor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_ap_neighbor_default_instance_;
    new (ptr) ::ce::nbapi::ap_neighbor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::ap_neighbor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ap_neighbor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsap_neighbor}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsutil_stats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_util_stats_default_instance_;
    new (ptr) ::ce::nbapi::util_stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::util_stats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_util_stats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsutil_stats}, {}};

static void InitDefaultslocation_record() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_location_record_default_instance_;
    new (ptr) ::ce::nbapi::location_record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::location_record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_location_record =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultslocation_record}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultslocation_rtls_tag() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_location_rtls_tag_default_instance_;
    new (ptr) ::ce::nbapi::location_rtls_tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::location_rtls_tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_location_rtls_tag =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslocation_rtls_tag}, {}};

static void InitDefaultslocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_location_default_instance_;
    new (ptr) ::ce::nbapi::location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_location =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultslocation}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_location_record.base,
      &protobuf_schema_2eproto::scc_info_location_rtls_tag.base,}};

static void InitDefaultspresence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_presence_default_instance_;
    new (ptr) ::ce::nbapi::presence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::presence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_presence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspresence}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsrssi() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_rssi_default_instance_;
    new (ptr) ::ce::nbapi::rssi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::rssi::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rssi =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrssi}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultssta_rssi() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_sta_rssi_default_instance_;
    new (ptr) ::ce::nbapi::sta_rssi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::sta_rssi::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_sta_rssi =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssta_rssi}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultstag_rssi() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_tag_rssi_default_instance_;
    new (ptr) ::ce::nbapi::tag_rssi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::tag_rssi::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_tag_rssi =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultstag_rssi}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsap_rssi() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_ap_rssi_default_instance_;
    new (ptr) ::ce::nbapi::ap_rssi();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::ap_rssi::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ap_rssi =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsap_rssi}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsstation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_station_default_instance_;
    new (ptr) ::ce::nbapi::station();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::station::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_station =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstation}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsaccess_point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_access_point_default_instance_;
    new (ptr) ::ce::nbapi::access_point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::access_point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_access_point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsaccess_point}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_radio.base,
      &protobuf_schema_2eproto::scc_info_ap_location.base,}};

static void InitDefaultsstate_access_point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_state_access_point_default_instance_;
    new (ptr) ::ce::nbapi::state_access_point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::state_access_point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_state_access_point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstate_access_point}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsstats_modem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_modem_default_instance_;
    new (ptr) ::ce::nbapi::stats_modem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_modem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_stats_modem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsstats_modem}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsradio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_radio_default_instance_;
    new (ptr) ::ce::nbapi::radio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::radio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_radio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsradio}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_virtual_access_point.base,}};

static void InitDefaultsvirtual_access_point() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_virtual_access_point_default_instance_;
    new (ptr) ::ce::nbapi::virtual_access_point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::virtual_access_point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_virtual_access_point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsvirtual_access_point}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsdestination() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_destination_default_instance_;
    new (ptr) ::ce::nbapi::destination();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::destination::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_destination =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsdestination}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsapplication() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_application_default_instance_;
    new (ptr) ::ce::nbapi::application();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::application::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_application =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsapplication}, {}};

static void InitDefaultswebcc_category() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_webcc_category_default_instance_;
    new (ptr) ::ce::nbapi::webcc_category();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::webcc_category::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_webcc_category =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultswebcc_category}, {}};

static void InitDefaultswebcc_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_webcc_info_default_instance_;
    new (ptr) ::ce::nbapi::webcc_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::webcc_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_webcc_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultswebcc_info}, {}};

static void InitDefaultsvisibility_rec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_visibility_rec_default_instance_;
    new (ptr) ::ce::nbapi::visibility_rec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::visibility_rec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_visibility_rec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsvisibility_rec}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultscampus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_campus_default_instance_;
    new (ptr) ::ce::nbapi::campus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::campus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_campus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscampus}, {}};

static void InitDefaultsbuilding() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_building_default_instance_;
    new (ptr) ::ce::nbapi::building();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::building::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_building =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbuilding}, {}};

static void InitDefaultsfloor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_floor_default_instance_;
    new (ptr) ::ce::nbapi::floor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::floor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_floor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsfloor}, {}};

static void InitDefaultspoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_point_default_instance_;
    new (ptr) ::ce::nbapi::point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspoint}, {}};

static void InitDefaultsgeofence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_geofence_default_instance_;
    new (ptr) ::ce::nbapi::geofence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::geofence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_geofence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgeofence}, {
      &protobuf_schema_2eproto::scc_info_point.base,}};

static void InitDefaultsgeofence_notify_Access_point_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_geofence_notify_Access_point_info_default_instance_;
    new (ptr) ::ce::nbapi::geofence_notify_Access_point_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::geofence_notify_Access_point_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_geofence_notify_Access_point_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsgeofence_notify_Access_point_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsgeofence_notify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_geofence_notify_default_instance_;
    new (ptr) ::ce::nbapi::geofence_notify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::geofence_notify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_geofence_notify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsgeofence_notify}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_geofence_notify_Access_point_info.base,}};

static void InitDefaultsstats_radio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_radio_default_instance_;
    new (ptr) ::ce::nbapi::stats_radio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_radio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_stats_radio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsstats_radio}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_data_traffic_type_stats.base,
      &protobuf_schema_2eproto::scc_info_data_prio_stats.base,
      &protobuf_schema_2eproto::scc_info_data_rate_stats.base,}};

static void InitDefaultsstats_vap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_vap_default_instance_;
    new (ptr) ::ce::nbapi::stats_vap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_vap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_stats_vap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsstats_vap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_data_traffic_type_stats.base,
      &protobuf_schema_2eproto::scc_info_data_prio_stats.base,
      &protobuf_schema_2eproto::scc_info_data_rate_stats.base,}};

static void InitDefaultsstats_station() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_station_default_instance_;
    new (ptr) ::ce::nbapi::stats_station();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_station::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_stats_station =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsstats_station}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_data_prio_stats.base,
      &protobuf_schema_2eproto::scc_info_data_rate_stats.base,}};

static void InitDefaultsstate_station() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_state_station_default_instance_;
    new (ptr) ::ce::nbapi::state_station();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::state_station::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_state_station =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsstate_station}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsuplink_bandwidth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_uplink_bandwidth_default_instance_;
    new (ptr) ::ce::nbapi::uplink_bandwidth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::uplink_bandwidth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_uplink_bandwidth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsuplink_bandwidth}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsuplink_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_uplink_info_default_instance_;
    new (ptr) ::ce::nbapi::uplink_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::uplink_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_uplink_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsuplink_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsstats_uplink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_uplink_default_instance_;
    new (ptr) ::ce::nbapi::stats_uplink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_uplink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_stats_uplink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsstats_uplink}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultswan_comp_uplink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_wan_comp_uplink_default_instance_;
    new (ptr) ::ce::nbapi::wan_comp_uplink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::wan_comp_uplink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_wan_comp_uplink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultswan_comp_uplink}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsstats_ip_probe_uplink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_ip_probe_uplink_default_instance_;
    new (ptr) ::ce::nbapi::stats_ip_probe_uplink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_ip_probe_uplink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_stats_ip_probe_uplink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstats_ip_probe_uplink}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsstats_tunnel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_tunnel_default_instance_;
    new (ptr) ::ce::nbapi::stats_tunnel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_tunnel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_stats_tunnel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsstats_tunnel}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsbytes_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_bytes_info_default_instance_;
    new (ptr) ::ce::nbapi::bytes_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::bytes_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bytes_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbytes_info}, {}};

static void InitDefaultsiap_bytes_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_iap_bytes_info_default_instance_;
    new (ptr) ::ce::nbapi::iap_bytes_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::iap_bytes_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_iap_bytes_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsiap_bytes_info}, {
      &protobuf_schema_2eproto::scc_info_bytes_info.base,}};

static void InitDefaultsstats_role_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_role_iap_default_instance_;
    new (ptr) ::ce::nbapi::stats_role_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_role_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_stats_role_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstats_role_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_bytes_info.base,}};

static void InitDefaultsstats_vlan_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_vlan_iap_default_instance_;
    new (ptr) ::ce::nbapi::stats_vlan_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_vlan_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_stats_vlan_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstats_vlan_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_bytes_info.base,}};

static void InitDefaultsstats_ssid_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_ssid_iap_default_instance_;
    new (ptr) ::ce::nbapi::stats_ssid_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_ssid_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_stats_ssid_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstats_ssid_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_bytes_info.base,}};

static void InitDefaultsstats_port() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_stats_port_default_instance_;
    new (ptr) ::ce::nbapi::stats_port();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::stats_port::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_stats_port =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsstats_port}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_bytes_info.base,}};

static void InitDefaultssummary_webcat_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_summary_webcat_iap_default_instance_;
    new (ptr) ::ce::nbapi::summary_webcat_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::summary_webcat_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_summary_webcat_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssummary_webcat_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_iap_bytes_info.base,}};

static void InitDefaultssummary_appid_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_summary_appid_iap_default_instance_;
    new (ptr) ::ce::nbapi::summary_appid_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::summary_appid_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_summary_appid_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssummary_appid_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_iap_bytes_info.base,}};

static void InitDefaultssummary_webrep_iap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_summary_webrep_iap_default_instance_;
    new (ptr) ::ce::nbapi::summary_webrep_iap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::summary_webrep_iap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_summary_webrep_iap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultssummary_webrep_iap}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_iap_bytes_info.base,}};

static void InitDefaultsap_neighbor_list() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_ap_neighbor_list_default_instance_;
    new (ptr) ::ce::nbapi::ap_neighbor_list();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::ap_neighbor_list::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ap_neighbor_list =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsap_neighbor_list}, {
      &protobuf_schema_2eproto::scc_info_ap_neighbor.base,}};

static void InitDefaultsutilization_stats_radio() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_utilization_stats_radio_default_instance_;
    new (ptr) ::ce::nbapi::utilization_stats_radio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::utilization_stats_radio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_utilization_stats_radio =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsutilization_stats_radio}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_util_stats.base,}};

static void InitDefaultsproximity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_proximity_default_instance_;
    new (ptr) ::ce::nbapi::proximity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::proximity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_proximity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsproximity}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsdot1x() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_dot1x_default_instance_;
    new (ptr) ::ce::nbapi::dot1x();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::dot1x::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_dot1x =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsdot1x}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultswpa_key_handshake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_wpa_key_handshake_default_instance_;
    new (ptr) ::ce::nbapi::wpa_key_handshake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::wpa_key_handshake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_wpa_key_handshake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultswpa_key_handshake}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultscaptive_portal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_captive_portal_default_instance_;
    new (ptr) ::ce::nbapi::captive_portal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::captive_portal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_captive_portal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultscaptive_portal}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsmacauth() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_macauth_default_instance_;
    new (ptr) ::ce::nbapi::macauth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::macauth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_macauth =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsmacauth}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultsauth_srvr_timeout() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_auth_srvr_timeout_default_instance_;
    new (ptr) ::ce::nbapi::auth_srvr_timeout();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::auth_srvr_timeout::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_auth_srvr_timeout =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsauth_srvr_timeout}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

static void InitDefaultssecurity_message() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_security_message_default_instance_;
    new (ptr) ::ce::nbapi::security_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::security_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_security_message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultssecurity_message}, {
      &protobuf_schema_2eproto::scc_info_auth_srvr_timeout.base,
      &protobuf_schema_2eproto::scc_info_macauth.base,
      &protobuf_schema_2eproto::scc_info_captive_portal.base,
      &protobuf_schema_2eproto::scc_info_wpa_key_handshake.base,
      &protobuf_schema_2eproto::scc_info_dot1x.base,}};

static void InitDefaultsspectrum_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_spectrum_info_default_instance_;
    new (ptr) ::ce::nbapi::spectrum_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::spectrum_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_spectrum_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsspectrum_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsrogue_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_rogue_info_default_instance_;
    new (ptr) ::ce::nbapi::rogue_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::rogue_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rogue_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrogue_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultskey_value_type() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_key_value_type_default_instance_;
    new (ptr) ::ce::nbapi::key_value_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::key_value_type::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_key_value_type =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultskey_value_type}, {}};

static void InitDefaultsinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_info_default_instance_;
    new (ptr) ::ce::nbapi::info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsinfo}, {
      &protobuf_schema_2eproto::scc_info_key_value_type.base,}};

static void InitDefaultscontroller_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_controller_info_default_instance_;
    new (ptr) ::ce::nbapi::controller_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::controller_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_controller_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultscontroller_info}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_access_point.base,}};

static void InitDefaultscluster_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_cluster_info_default_instance_;
    new (ptr) ::ce::nbapi::cluster_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::cluster_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_cluster_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultscluster_info}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_access_point.base,}};

static void InitDefaultstopology() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_topology_default_instance_;
    new (ptr) ::ce::nbapi::topology();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::topology::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_topology =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultstopology}, {
      &protobuf_schema_2eproto::scc_info_controller_info.base,
      &protobuf_schema_2eproto::scc_info_cluster_info.base,}};

static void InitDefaultsap_location() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_ap_location_default_instance_;
    new (ptr) ::ce::nbapi::ap_location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::ap_location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ap_location =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsap_location}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsnb_event() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_nb_event_default_instance_;
    new (ptr) ::ce::nbapi::nb_event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::nb_event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<48> scc_info_nb_event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 48, InitDefaultsnb_event}, {
      &protobuf_schema_2eproto::scc_info_location.base,
      &protobuf_schema_2eproto::scc_info_presence.base,
      &protobuf_schema_2eproto::scc_info_rssi.base,
      &protobuf_schema_2eproto::scc_info_station.base,
      &protobuf_schema_2eproto::scc_info_radio.base,
      &protobuf_schema_2eproto::scc_info_destination.base,
      &protobuf_schema_2eproto::scc_info_application.base,
      &protobuf_schema_2eproto::scc_info_visibility_rec.base,
      &protobuf_schema_2eproto::scc_info_campus.base,
      &protobuf_schema_2eproto::scc_info_building.base,
      &protobuf_schema_2eproto::scc_info_floor.base,
      &protobuf_schema_2eproto::scc_info_access_point.base,
      &protobuf_schema_2eproto::scc_info_virtual_access_point.base,
      &protobuf_schema_2eproto::scc_info_geofence.base,
      &protobuf_schema_2eproto::scc_info_geofence_notify.base,
      &protobuf_schema_2eproto::scc_info_stats_radio.base,
      &protobuf_schema_2eproto::scc_info_stats_vap.base,
      &protobuf_schema_2eproto::scc_info_stats_station.base,
      &protobuf_schema_2eproto::scc_info_ap_neighbor_list.base,
      &protobuf_schema_2eproto::scc_info_utilization_stats_radio.base,
      &protobuf_schema_2eproto::scc_info_sta_rssi.base,
      &protobuf_schema_2eproto::scc_info_ap_rssi.base,
      &protobuf_schema_2eproto::scc_info_proximity.base,
      &protobuf_schema_2eproto::scc_info_webcc_category.base,
      &protobuf_schema_2eproto::scc_info_webcc_info.base,
      &protobuf_schema_2eproto::scc_info_security_message.base,
      &protobuf_schema_2eproto::scc_info_spectrum_info.base,
      &protobuf_schema_2eproto::scc_info_state_station.base,
      &protobuf_schema_2eproto::scc_info_controller_info.base,
      &protobuf_schema_2eproto::scc_info_cluster_info.base,
      &protobuf_schema_2eproto::scc_info_uplink_bandwidth.base,
      &protobuf_schema_2eproto::scc_info_iap_client_url.base,
      &protobuf_schema_2eproto::scc_info_rogue_info.base,
      &protobuf_schema_2eproto::scc_info_air_monitor_info.base,
      &protobuf_schema_2eproto::scc_info_ap_location.base,
      &protobuf_schema_2eproto::scc_info_state_access_point.base,
      &protobuf_schema_2eproto::scc_info_stats_modem.base,
      &protobuf_schema_2eproto::scc_info_uplink_info.base,
      &protobuf_schema_2eproto::scc_info_stats_uplink.base,
      &protobuf_schema_2eproto::scc_info_wan_comp_uplink.base,
      &protobuf_schema_2eproto::scc_info_stats_ip_probe_uplink.base,
      &protobuf_schema_2eproto::scc_info_summary_webcat_iap.base,
      &protobuf_schema_2eproto::scc_info_summary_appid_iap.base,
      &protobuf_schema_2eproto::scc_info_summary_webrep_iap.base,
      &protobuf_schema_2eproto::scc_info_stats_role_iap.base,
      &protobuf_schema_2eproto::scc_info_stats_vlan_iap.base,
      &protobuf_schema_2eproto::scc_info_stats_ssid_iap.base,
      &protobuf_schema_2eproto::scc_info_tag_rssi.base,}};

static void InitDefaultsquery_response_Location_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Location_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Location_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Location_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Location_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Location_result}, {
      &protobuf_schema_2eproto::scc_info_location.base,}};

static void InitDefaultsquery_response_Presence_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Presence_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Presence_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Presence_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Presence_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Presence_result}, {
      &protobuf_schema_2eproto::scc_info_presence.base,}};

static void InitDefaultsquery_response_Rssi_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Rssi_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Rssi_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Rssi_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Rssi_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Rssi_result}, {
      &protobuf_schema_2eproto::scc_info_rssi.base,}};

static void InitDefaultsquery_response_Station_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Station_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Station_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Station_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Station_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Station_result}, {
      &protobuf_schema_2eproto::scc_info_station.base,}};

static void InitDefaultsquery_response_Radio_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Radio_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Radio_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Radio_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Radio_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Radio_result}, {
      &protobuf_schema_2eproto::scc_info_radio.base,}};

static void InitDefaultsquery_response_Destination_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Destination_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Destination_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Destination_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Destination_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Destination_result}, {
      &protobuf_schema_2eproto::scc_info_destination.base,}};

static void InitDefaultsquery_response_Application_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Application_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Application_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Application_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Application_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Application_result}, {
      &protobuf_schema_2eproto::scc_info_application.base,}};

static void InitDefaultsquery_response_Visibility_rec_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Visibility_rec_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Visibility_rec_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Visibility_rec_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Visibility_rec_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Visibility_rec_result}, {
      &protobuf_schema_2eproto::scc_info_visibility_rec.base,}};

static void InitDefaultsquery_response_Campus_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Campus_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Campus_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Campus_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Campus_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Campus_result}, {
      &protobuf_schema_2eproto::scc_info_campus.base,}};

static void InitDefaultsquery_response_Building_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Building_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Building_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Building_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Building_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Building_result}, {
      &protobuf_schema_2eproto::scc_info_building.base,}};

static void InitDefaultsquery_response_Floor_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Floor_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Floor_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Floor_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Floor_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Floor_result}, {
      &protobuf_schema_2eproto::scc_info_floor.base,}};

static void InitDefaultsquery_response_Access_point_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Access_point_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Access_point_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Access_point_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Access_point_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Access_point_result}, {
      &protobuf_schema_2eproto::scc_info_access_point.base,}};

static void InitDefaultsquery_response_Virtual_access_point_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Virtual_access_point_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Virtual_access_point_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Virtual_access_point_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Virtual_access_point_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Virtual_access_point_result}, {
      &protobuf_schema_2eproto::scc_info_virtual_access_point.base,}};

static void InitDefaultsquery_response_Geofence_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Geofence_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Geofence_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Geofence_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Geofence_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Geofence_result}, {
      &protobuf_schema_2eproto::scc_info_geofence.base,}};

static void InitDefaultsquery_response_Proximity_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Proximity_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Proximity_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Proximity_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Proximity_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Proximity_result}, {
      &protobuf_schema_2eproto::scc_info_proximity.base,}};

static void InitDefaultsquery_response_WebCCCategory_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_WebCCCategory_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_WebCCCategory_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_WebCCCategory_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_WebCCCategory_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_WebCCCategory_result}, {
      &protobuf_schema_2eproto::scc_info_webcc_category.base,}};

static void InitDefaultsquery_response_Info_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Info_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Info_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Info_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Info_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Info_result}, {
      &protobuf_schema_2eproto::scc_info_info.base,}};

static void InitDefaultsquery_response_Topology_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Topology_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Topology_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Topology_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Topology_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Topology_result}, {
      &protobuf_schema_2eproto::scc_info_topology.base,}};

static void InitDefaultsquery_response_Controller_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Controller_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Controller_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Controller_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Controller_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Controller_result}, {
      &protobuf_schema_2eproto::scc_info_controller_info.base,}};

static void InitDefaultsquery_response_Cluster_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Cluster_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Cluster_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Cluster_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Cluster_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Cluster_result}, {
      &protobuf_schema_2eproto::scc_info_cluster_info.base,}};

static void InitDefaultsquery_response_Access_point_location_result() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_Access_point_location_result_default_instance_;
    new (ptr) ::ce::nbapi::query_response_Access_point_location_result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response_Access_point_location_result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_query_response_Access_point_location_result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsquery_response_Access_point_location_result}, {
      &protobuf_schema_2eproto::scc_info_ap_location.base,}};

static void InitDefaultsquery_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_query_response_default_instance_;
    new (ptr) ::ce::nbapi::query_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::query_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<21> scc_info_query_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsquery_response}, {
      &protobuf_schema_2eproto::scc_info_query_response_Location_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Presence_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Rssi_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Station_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Radio_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Destination_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Application_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Visibility_rec_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Campus_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Building_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Floor_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Access_point_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Virtual_access_point_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Geofence_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Proximity_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_WebCCCategory_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Info_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Topology_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Controller_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Cluster_result.base,
      &protobuf_schema_2eproto::scc_info_query_response_Access_point_location_result.base,}};

static void InitDefaultsiap_client_url() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_iap_client_url_default_instance_;
    new (ptr) ::ce::nbapi::iap_client_url();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::iap_client_url::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_iap_client_url =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsiap_client_url}, {
      &protobuf_schema_2eproto::scc_info_iap_message_info.base,
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_url_detail_record.base,}};

static void InitDefaultsurl_detail_record() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_url_detail_record_default_instance_;
    new (ptr) ::ce::nbapi::url_detail_record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::url_detail_record::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_url_detail_record =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsurl_detail_record}, {
      &protobuf_schema_2eproto::scc_info_ip_address.base,
      &protobuf_schema_2eproto::scc_info_mac_address.base,}};

static void InitDefaultsiap_message_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_iap_message_info_default_instance_;
    new (ptr) ::ce::nbapi::iap_message_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::iap_message_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_iap_message_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsiap_message_info}, {}};

static void InitDefaultsair_monitor_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_air_monitor_info_default_instance_;
    new (ptr) ::ce::nbapi::air_monitor_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::air_monitor_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_air_monitor_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsair_monitor_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_air_monitor_rogue_info.base,}};

static void InitDefaultsair_monitor_rogue_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ce::nbapi::_air_monitor_rogue_info_default_instance_;
    new (ptr) ::ce::nbapi::air_monitor_rogue_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ce::nbapi::air_monitor_rogue_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_air_monitor_rogue_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsair_monitor_rogue_info}, {
      &protobuf_schema_2eproto::scc_info_mac_address.base,
      &protobuf_schema_2eproto::scc_info_ip_address.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ip_address.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mac_address.base);
  ::google::protobuf::internal::InitSCC(&scc_info_data_rate_stats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_data_prio_stats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_data_traffic_type_stats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ap_neighbor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_util_stats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_record.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location_rtls_tag.base);
  ::google::protobuf::internal::InitSCC(&scc_info_location.base);
  ::google::protobuf::internal::InitSCC(&scc_info_presence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rssi.base);
  ::google::protobuf::internal::InitSCC(&scc_info_sta_rssi.base);
  ::google::protobuf::internal::InitSCC(&scc_info_tag_rssi.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ap_rssi.base);
  ::google::protobuf::internal::InitSCC(&scc_info_station.base);
  ::google::protobuf::internal::InitSCC(&scc_info_access_point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_state_access_point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_modem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_radio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_virtual_access_point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_destination.base);
  ::google::protobuf::internal::InitSCC(&scc_info_application.base);
  ::google::protobuf::internal::InitSCC(&scc_info_webcc_category.base);
  ::google::protobuf::internal::InitSCC(&scc_info_webcc_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_visibility_rec.base);
  ::google::protobuf::internal::InitSCC(&scc_info_campus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_building.base);
  ::google::protobuf::internal::InitSCC(&scc_info_floor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_geofence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_geofence_notify_Access_point_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_geofence_notify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_radio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_vap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_station.base);
  ::google::protobuf::internal::InitSCC(&scc_info_state_station.base);
  ::google::protobuf::internal::InitSCC(&scc_info_uplink_bandwidth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_uplink_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_uplink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_wan_comp_uplink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_ip_probe_uplink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_tunnel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bytes_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_iap_bytes_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_role_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_vlan_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_ssid_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_stats_port.base);
  ::google::protobuf::internal::InitSCC(&scc_info_summary_webcat_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_summary_appid_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_summary_webrep_iap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ap_neighbor_list.base);
  ::google::protobuf::internal::InitSCC(&scc_info_utilization_stats_radio.base);
  ::google::protobuf::internal::InitSCC(&scc_info_proximity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_dot1x.base);
  ::google::protobuf::internal::InitSCC(&scc_info_wpa_key_handshake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_captive_portal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_macauth.base);
  ::google::protobuf::internal::InitSCC(&scc_info_auth_srvr_timeout.base);
  ::google::protobuf::internal::InitSCC(&scc_info_security_message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_spectrum_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rogue_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_key_value_type.base);
  ::google::protobuf::internal::InitSCC(&scc_info_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_controller_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_cluster_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_topology.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ap_location.base);
  ::google::protobuf::internal::InitSCC(&scc_info_nb_event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Location_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Presence_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Rssi_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Station_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Radio_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Destination_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Application_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Visibility_rec_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Campus_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Building_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Floor_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Access_point_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Virtual_access_point_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Geofence_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Proximity_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_WebCCCategory_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Info_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Topology_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Controller_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Cluster_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response_Access_point_location_result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_query_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_iap_client_url.base);
  ::google::protobuf::internal::InitSCC(&scc_info_url_detail_record.base);
  ::google::protobuf::internal::InitSCC(&scc_info_iap_message_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_air_monitor_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_air_monitor_rogue_info.base);
}

::google::protobuf::Metadata file_level_metadata[97];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[24];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ip_address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ip_address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ip_address, af_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ip_address, addr_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::mac_address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::mac_address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::mac_address, addr_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, tx_frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, tx_byte_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, rx_frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_rate_stats, rx_byte_count_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, prio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, tx_frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, rx_frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_prio_stats, tx_drop_count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_traffic_type_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_traffic_type_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_traffic_type_stats, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_traffic_type_stats, tx_frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::data_traffic_type_stats, rx_frame_count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, phy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, neighbor_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, neighbor_ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, neighbor_network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, neighbor_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor, neighbor_rssi_),
  1,
  2,
  4,
  3,
  0,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, bucket1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, bucket2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, bucket3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, bucket4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, bucket5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, curr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::util_stats, stat_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_record, channel_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, tx_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, data_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location_rtls_tag, payload_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, sta_location_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, sta_location_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, error_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, associated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, campus_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, floor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, geofence_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, loc_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, target_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, err_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, geofence_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, rtls_tag_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, location_compute_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::location, associated_to_valid_bssid_),
  4,
  5,
  6,
  7,
  11,
  0,
  1,
  2,
  3,
  ~0u,
  8,
  10,
  9,
  13,
  14,
  15,
  18,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, associated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::presence, target_type_),
  2,
  4,
  0,
  1,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, associated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, noise_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, is_ap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rssi, classification_type_),
  1,
  2,
  3,
  4,
  0,
  6,
  5,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, associated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, noise_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, assoc_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, classification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::sta_rssi, associated_to_valid_bssid_),
  0,
  1,
  3,
  6,
  4,
  5,
  2,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, tag_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, noise_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, tx_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, data_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::tag_rssi, payload_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, neighbor_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, phy_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, ht_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, tx_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, bw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_rssi, classification_type_),
  1,
  2,
  0,
  4,
  5,
  6,
  7,
  9,
  8,
  3,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, device_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, sta_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, hashed_sta_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, vlan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, ht_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::station, ap_name_),
  6,
  0,
  1,
  7,
  2,
  8,
  3,
  4,
  9,
  10,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, depl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, reboots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, rebootstraps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, managed_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, managed_by_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, radios_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, is_master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, reboot_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, ap_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::access_point, is_conductor_),
  5,
  0,
  1,
  2,
  9,
  6,
  10,
  11,
  7,
  3,
  ~0u,
  12,
  4,
  8,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, ap_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, cpu_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, memory_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, memory_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, is_master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, mesh_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, led_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, ext_ssid_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, service_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, modem_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, modem_simpin_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, current_uplink_inuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_access_point, is_conductor_),
  5,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  4,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_modem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_modem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_modem, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_modem, tx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_modem, rx_data_bytes_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, radio_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, phy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, ht_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, virtual_access_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::radio, radio_num_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::virtual_access_point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::virtual_access_point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::virtual_access_point, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::virtual_access_point, ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::virtual_access_point, radio_bssid_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::destination, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::destination, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::destination, dest_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::destination, dest_alias_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, app_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, app_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::application, app_long_name_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_category, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_category, cat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_category, category_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, webcc_md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, webcc_cat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, webcc_rep_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, webcc_url_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::webcc_info, webcc_not_supported_),
  0,
  2,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, ip_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, tx_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, rx_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, rx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, hashed_client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, device_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, hashed_device_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, app_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, cc_cat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, cc_rep_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, cc_url_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, cc_md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::visibility_rec, session_flags_),
  5,
  6,
  16,
  13,
  9,
  10,
  11,
  12,
  0,
  7,
  1,
  2,
  14,
  15,
  3,
  4,
  8,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::campus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::campus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::campus, campus_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::campus, campus_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::building, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::building, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::building, building_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::building, campus_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_img_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_img_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_img_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, floor_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::floor, grid_size_),
  0,
  1,
  5,
  6,
  2,
  7,
  8,
  3,
  9,
  4,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, floor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, geofence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, geofence_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence, point_list_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, radio_bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify_Access_point_info, rssi_val_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, geofence_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, geofence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, geofence_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, sta_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, associated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, dwell_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, access_point_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::geofence_notify, hashed_sta_mac_),
  4,
  0,
  1,
  3,
  5,
  6,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, radio_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, phy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, noise_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_channel_utilization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_data_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_data_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_data_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_frame_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, traffic_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, prio_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rate_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, actual_eirp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, tx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, rx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, radio_band_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, channel_busy_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_radio, sta_number_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  ~0u,
  23,
  1,
  22,
  25,
  24,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_data_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_data_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, tx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, rx_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, rx_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, rx_data_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, rx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, traffic_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, prio_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, rate_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vap, sta_number_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  12,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_data_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_data_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_data_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_data_retried_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, prio_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rate_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, ssid_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, max_tx_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_data_bytes_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_time_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_time_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, sta_client_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, rx_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_station, tx_retries_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  ~0u,
  ~0u,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  20,
  21,
  19,
  22,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, rx_tries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, tx_tries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, phy_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, security_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::state_station, hashed_sta_eth_mac_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, local_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, local_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_datagrams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_datagrams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, upstream_lost_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, downstream_lost_packets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_bandwidth, hashed_ap_eth_mac_),
  5,
  8,
  6,
  9,
  7,
  0,
  10,
  1,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  2,
  3,
  20,
  21,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, device_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, link_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, vlan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, port_tunnel_desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, link_prio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, wan_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, crypto_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, tunnel_active_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, tunnel_uptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, peer_tunnel_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, tunnel_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::uplink_info, tunnel_name_),
  3,
  6,
  0,
  8,
  7,
  1,
  9,
  10,
  11,
  13,
  12,
  4,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, device_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, rx_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, tx_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, rx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, vlan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_uplink, tunnel_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, boc_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, tot_comp_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, tot_uncomp_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wan_comp_uplink, tot_comp_savings_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, device_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, probe_ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, vlan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, avg_rtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, max_rtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, min_rtt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, avg_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, max_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, min_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, mos_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, probe_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, ip_probe_pkt_loss_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, tunnel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, sd_avg_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, ds_avg_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, sd_avg_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ip_probe_uplink, ds_avg_jitter_),
  1,
  3,
  2,
  8,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  9,
  17,
  0,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, tunnel_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, tx_data_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, rx_data_pkts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, tx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, rx_data_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_tunnel, iap_mac_),
  5,
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::bytes_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::bytes_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::bytes_info, tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::bytes_info, rx_bytes_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_bytes_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_bytes_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_bytes_info, session_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_bytes_info, bytes_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_role_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_role_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_role_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_role_iap, user_role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_role_iap, bytes_info_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vlan_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vlan_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vlan_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vlan_iap, vlan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_vlan_iap, bytes_info_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ssid_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ssid_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ssid_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ssid_iap, essid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_ssid_iap, bytes_info_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_port, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_port, port_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::stats_port, bytes_info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webcat_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webcat_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webcat_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webcat_iap, webcat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webcat_iap, bytes_info_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_appid_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_appid_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_appid_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_appid_iap, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_appid_iap, bytes_info_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webrep_iap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webrep_iap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webrep_iap, iap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webrep_iap, webrep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::summary_webrep_iap, bytes_info_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor_list, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_neighbor_list, neighbor_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::utilization_stats_radio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::utilization_stats_radio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::utilization_stats_radio, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::utilization_stats_radio, radio_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::utilization_stats_radio, ustats_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, radio_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, rssi_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, ap_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, hashed_sta_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::proximity, target_type_),
  2,
  3,
  4,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, finish_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, station_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, server_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, client_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, serverip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, srvr_elapsed_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::dot1x, clnt_elapsed_time_),
  4,
  5,
  1,
  0,
  2,
  6,
  7,
  8,
  9,
  3,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, finish_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, station_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, trigger_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, key1_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, key3_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::wpa_key_handshake, replay_counter_mismatch_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, finish_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, station_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, server_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, serverip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::captive_portal, userip_),
  5,
  6,
  1,
  0,
  2,
  7,
  8,
  9,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, finish_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, station_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, server_retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::macauth, serverip_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, station_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, authtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, retry_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, userip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::auth_srvr_timeout, serverip_),
  4,
  0,
  1,
  5,
  6,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, auth_srvr_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, macauth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, captive_portal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, wpa_key_handshake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::security_message, dot1x_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, radio_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, dev_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, dev_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, low_ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, high_ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, duty_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, center_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::spectrum_info, active_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, monitor_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, heard_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, monitor_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::rogue_info, is_ap_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::key_value_type, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::key_value_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::key_value_type, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::key_value_type, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::info, current_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::info, license_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::info, key_value_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::controller_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::controller_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::controller_info, controller_ip_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::controller_info, access_points_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, cluster_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, organization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, cluster_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::cluster_info, access_points_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::topology, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::topology, controller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::topology, cluster_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, ap_eth_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, campus_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, building_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, floor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, ap_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::ap_location, ap_y_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, topic_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, lic_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, presence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, station_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, radio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, application_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, visibility_rec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, campus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, building_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, access_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, virtual_access_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, geofence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, geofence_notify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_radio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_vap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_station_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, ap_neighbor_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, utilization_stats_radio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, sta_rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, ap_rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, proximity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, webcc_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, webcc_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, security_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, spectrum_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, state_station_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, controller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, uplink_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, iapclienturl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, rogue_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, air_mon_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, ap_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, state_access_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_modem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, uplink_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_uplink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, wan_comp_uplink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_ip_probe_uplink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, summary_webcat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, summary_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, summary_webrep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_vlan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, stats_ssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::nb_event, tag_rssi_),
  49,
  50,
  51,
  52,
  0,
  53,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Location_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Location_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Location_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Location_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Presence_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Presence_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Presence_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Presence_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Rssi_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Rssi_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Rssi_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Rssi_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Station_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Station_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Station_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Station_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Radio_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Radio_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Radio_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Radio_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Destination_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Destination_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Destination_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Destination_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Application_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Application_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Application_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Application_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Visibility_rec_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Visibility_rec_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Visibility_rec_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Visibility_rec_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Campus_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Campus_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Campus_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Campus_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Building_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Building_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Building_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Building_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Floor_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Floor_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Floor_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Floor_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Virtual_access_point_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Virtual_access_point_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Virtual_access_point_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Virtual_access_point_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Geofence_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Geofence_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Geofence_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Geofence_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Proximity_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Proximity_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Proximity_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Proximity_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_WebCCCategory_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_WebCCCategory_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_WebCCCategory_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_WebCCCategory_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Info_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Info_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Info_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Info_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Topology_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Topology_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Topology_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Topology_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Controller_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Controller_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Controller_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Controller_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Cluster_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Cluster_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Cluster_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Cluster_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_location_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_location_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_location_result, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response_Access_point_location_result, ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, location_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, presence_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, rssi_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, station_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, radio_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, destination_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, application_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, visibility_rec_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, campus_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, building_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, floor_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, access_point_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, virtual_access_point_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, geofence_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, proximity_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, webcccategory_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, info_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, topology_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, controller_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, cluster_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::query_response, access_point_location_result_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, ap_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, url_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_client_url, ap_host_name_),
  1,
  4,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, dest_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, hit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, client_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, http_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::url_detail_record, last_hit_timestamp_),
  1,
  2,
  0,
  5,
  3,
  6,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::iap_message_info, oem_tag_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, monitor_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, essid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, monitor_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, is_ap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, classification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, phy_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, ht_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, heard_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, bssid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, encr_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, encr_cipher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, auth_alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_info, am_rogue_),
  1,
  0,
  5,
  6,
  7,
  8,
  9,
  2,
  3,
  10,
  11,
  12,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, match_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, match_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, monitor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ce::nbapi::air_monitor_rogue_info, nat_match_type_),
  3,
  1,
  2,
  0,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ce::nbapi::ip_address)},
  { 9, 15, sizeof(::ce::nbapi::mac_address)},
  { 16, 26, sizeof(::ce::nbapi::data_rate_stats)},
  { 31, 40, sizeof(::ce::nbapi::data_prio_stats)},
  { 44, 52, sizeof(::ce::nbapi::data_traffic_type_stats)},
  { 55, 68, sizeof(::ce::nbapi::ap_neighbor)},
  { 76, 91, sizeof(::ce::nbapi::util_stats)},
  { 101, 110, sizeof(::ce::nbapi::location_record)},
  { 114, 124, sizeof(::ce::nbapi::location_rtls_tag)},
  { 129, 157, sizeof(::ce::nbapi::location)},
  { 180, 191, sizeof(::ce::nbapi::presence)},
  { 197, 211, sizeof(::ce::nbapi::rssi)},
  { 220, 234, sizeof(::ce::nbapi::sta_rssi)},
  { 243, 257, sizeof(::ce::nbapi::tag_rssi)},
  { 266, 282, sizeof(::ce::nbapi::ap_rssi)},
  { 293, 309, sizeof(::ce::nbapi::station)},
  { 320, 340, sizeof(::ce::nbapi::access_point)},
  { 355, 379, sizeof(::ce::nbapi::state_access_point)},
  { 398, 406, sizeof(::ce::nbapi::stats_modem)},
  { 409, 421, sizeof(::ce::nbapi::radio)},
  { 428, 436, sizeof(::ce::nbapi::virtual_access_point)},
  { 439, 447, sizeof(::ce::nbapi::destination)},
  { 450, 459, sizeof(::ce::nbapi::application)},
  { 463, 470, sizeof(::ce::nbapi::webcc_category)},
  { 472, 482, sizeof(::ce::nbapi::webcc_info)},
  { 487, 510, sizeof(::ce::nbapi::visibility_rec)},
  { 528, 535, sizeof(::ce::nbapi::campus)},
  { 537, 545, sizeof(::ce::nbapi::building)},
  { 548, 564, sizeof(::ce::nbapi::floor)},
  { 575, 582, sizeof(::ce::nbapi::point)},
  { 584, 594, sizeof(::ce::nbapi::geofence)},
  { 599, 608, sizeof(::ce::nbapi::geofence_notify_Access_point_info)},
  { 612, 625, sizeof(::ce::nbapi::geofence_notify)},
  { 633, 669, sizeof(::ce::nbapi::stats_radio)},
  { 700, 721, sizeof(::ce::nbapi::stats_vap)},
  { 737, 770, sizeof(::ce::nbapi::stats_station)},
  { 798, 811, sizeof(::ce::nbapi::state_station)},
  { 819, 846, sizeof(::ce::nbapi::uplink_bandwidth)},
  { 868, 887, sizeof(::ce::nbapi::uplink_info)},
  { 901, 914, sizeof(::ce::nbapi::stats_uplink)},
  { 922, 932, sizeof(::ce::nbapi::wan_comp_uplink)},
  { 937, 960, sizeof(::ce::nbapi::stats_ip_probe_uplink)},
  { 978, 989, sizeof(::ce::nbapi::stats_tunnel)},
  { 995, 1002, sizeof(::ce::nbapi::bytes_info)},
  { 1004, 1011, sizeof(::ce::nbapi::iap_bytes_info)},
  { 1013, 1021, sizeof(::ce::nbapi::stats_role_iap)},
  { 1024, 1032, sizeof(::ce::nbapi::stats_vlan_iap)},
  { 1035, 1043, sizeof(::ce::nbapi::stats_ssid_iap)},
  { 1046, 1053, sizeof(::ce::nbapi::stats_port)},
  { 1055, 1063, sizeof(::ce::nbapi::summary_webcat_iap)},
  { 1066, 1074, sizeof(::ce::nbapi::summary_appid_iap)},
  { 1077, 1085, sizeof(::ce::nbapi::summary_webrep_iap)},
  { 1088, 1094, sizeof(::ce::nbapi::ap_neighbor_list)},
  { 1095, 1103, sizeof(::ce::nbapi::utilization_stats_radio)},
  { 1106, 1117, sizeof(::ce::nbapi::proximity)},
  { 1123, 1140, sizeof(::ce::nbapi::dot1x)},
  { 1152, 1167, sizeof(::ce::nbapi::wpa_key_handshake)},
  { 1177, 1192, sizeof(::ce::nbapi::captive_portal)},
  { 1202, 1215, sizeof(::ce::nbapi::macauth)},
  { 1223, 1235, sizeof(::ce::nbapi::auth_srvr_timeout)},
  { 1242, 1253, sizeof(::ce::nbapi::security_message)},
  { 1259, 1275, sizeof(::ce::nbapi::spectrum_info)},
  { 1286, 1295, sizeof(::ce::nbapi::rogue_info)},
  { 1299, 1306, sizeof(::ce::nbapi::key_value_type)},
  { 1308, 1316, sizeof(::ce::nbapi::info)},
  { 1319, 1326, sizeof(::ce::nbapi::controller_info)},
  { 1328, 1338, sizeof(::ce::nbapi::cluster_info)},
  { 1343, 1350, sizeof(::ce::nbapi::topology)},
  { 1352, 1365, sizeof(::ce::nbapi::ap_location)},
  { 1373, 1432, sizeof(::ce::nbapi::nb_event)},
  { 1486, 1493, sizeof(::ce::nbapi::query_response_Location_result)},
  { 1495, 1502, sizeof(::ce::nbapi::query_response_Presence_result)},
  { 1504, 1511, sizeof(::ce::nbapi::query_response_Rssi_result)},
  { 1513, 1520, sizeof(::ce::nbapi::query_response_Station_result)},
  { 1522, 1529, sizeof(::ce::nbapi::query_response_Radio_result)},
  { 1531, 1538, sizeof(::ce::nbapi::query_response_Destination_result)},
  { 1540, 1547, sizeof(::ce::nbapi::query_response_Application_result)},
  { 1549, 1556, sizeof(::ce::nbapi::query_response_Visibility_rec_result)},
  { 1558, 1565, sizeof(::ce::nbapi::query_response_Campus_result)},
  { 1567, 1574, sizeof(::ce::nbapi::query_response_Building_result)},
  { 1576, 1583, sizeof(::ce::nbapi::query_response_Floor_result)},
  { 1585, 1592, sizeof(::ce::nbapi::query_response_Access_point_result)},
  { 1594, 1601, sizeof(::ce::nbapi::query_response_Virtual_access_point_result)},
  { 1603, 1610, sizeof(::ce::nbapi::query_response_Geofence_result)},
  { 1612, 1619, sizeof(::ce::nbapi::query_response_Proximity_result)},
  { 1621, 1628, sizeof(::ce::nbapi::query_response_WebCCCategory_result)},
  { 1630, 1637, sizeof(::ce::nbapi::query_response_Info_result)},
  { 1639, 1646, sizeof(::ce::nbapi::query_response_Topology_result)},
  { 1648, 1655, sizeof(::ce::nbapi::query_response_Controller_result)},
  { 1657, 1664, sizeof(::ce::nbapi::query_response_Cluster_result)},
  { 1666, 1673, sizeof(::ce::nbapi::query_response_Access_point_location_result)},
  { 1675, 1701, sizeof(::ce::nbapi::query_response)},
  { 1722, 1732, sizeof(::ce::nbapi::iap_client_url)},
  { 1737, 1749, sizeof(::ce::nbapi::url_detail_record)},
  { 1756, 1765, sizeof(::ce::nbapi::iap_message_info)},
  { 1769, 1787, sizeof(::ce::nbapi::air_monitor_info)},
  { 1800, 1810, sizeof(::ce::nbapi::air_monitor_rogue_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_ip_address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_mac_address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_data_rate_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_data_prio_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_data_traffic_type_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_ap_neighbor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_util_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_location_record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_location_rtls_tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_presence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_rssi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_sta_rssi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_tag_rssi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_ap_rssi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_station_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_access_point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_state_access_point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_modem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_radio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_virtual_access_point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_destination_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_application_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_webcc_category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_webcc_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_visibility_rec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_campus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_building_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_floor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_geofence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_geofence_notify_Access_point_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_geofence_notify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_radio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_vap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_station_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_state_station_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_uplink_bandwidth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_uplink_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_uplink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_wan_comp_uplink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_ip_probe_uplink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_tunnel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_bytes_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_iap_bytes_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_role_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_vlan_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_ssid_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_stats_port_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_summary_webcat_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_summary_appid_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_summary_webrep_iap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_ap_neighbor_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_utilization_stats_radio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_proximity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_dot1x_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_wpa_key_handshake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_captive_portal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_macauth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_auth_srvr_timeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_security_message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_spectrum_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_rogue_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_key_value_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_controller_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_cluster_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_topology_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_ap_location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_nb_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Location_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Presence_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Rssi_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Station_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Radio_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Destination_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Application_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Visibility_rec_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Campus_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Building_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Floor_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Access_point_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Virtual_access_point_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Geofence_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Proximity_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_WebCCCategory_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Info_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Topology_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Controller_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Cluster_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_Access_point_location_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_query_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_iap_client_url_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_url_detail_record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_iap_message_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_air_monitor_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ce::nbapi::_air_monitor_rogue_info_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 97);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\010ce.nbapi\"\234\001\n\nip_address\022"
      ",\n\002af\030\001 \002(\0162 .ce.nbapi.ip_address.addr_f"
      "amily\022\014\n\004addr\030\002 \002(\014\"R\n\013addr_family\022\026\n\022AD"
      "DR_FAMILY_UNSPEC\020\000\022\024\n\020ADDR_FAMILY_INET\020\002"
      "\022\025\n\021ADDR_FAMILY_INET6\020\n\"\033\n\013mac_address\022\014"
      "\n\004addr\030\001 \002(\014\"}\n\017data_rate_stats\022\014\n\004rate\030"
      "\001 \001(\r\022\026\n\016tx_frame_count\030\002 \001(\r\022\025\n\rtx_byte"
      "_count\030\003 \001(\r\022\026\n\016rx_frame_count\030\004 \001(\r\022\025\n\r"
      "rx_byte_count\030\005 \001(\r\"{\n\017data_prio_stats\022!"
      "\n\004prio\030\001 \001(\0162\023.ce.nbapi.data_prio\022\026\n\016tx_"
      "frame_count\030\002 \001(\r\022\026\n\016rx_frame_count\030\003 \001("
      "\r\022\025\n\rtx_drop_count\030\004 \001(\r\"o\n\027data_traffic"
      "_type_stats\022$\n\004type\030\001 \001(\0162\026.ce.nbapi.tra"
      "ffic_type\022\026\n\016tx_frame_count\030\002 \001(\r\022\026\n\016rx_"
      "frame_count\030\003 \001(\r\"\343\002\n\013ap_neighbor\022)\n\nap_"
      "eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022$\n\005"
      "bssid\030\002 \001(\0132\025.ce.nbapi.mac_address\022\037\n\003ph"
      "y\030\003 \001(\0162\022.ce.nbapi.phy_type\022-\n\016neighbor_"
      "bssid\030\004 \001(\0132\025.ce.nbapi.mac_address\022\025\n\rne"
      "ighbor_ssid\030\005 \001(\t\022<\n\020neighbor_network\030\006 "
      "\001(\0162\".ce.nbapi.ap_neighbor.network_type\022"
      "\030\n\020neighbor_channel\030\007 \001(\r\022\025\n\rneighbor_rs"
      "si\030\n \001(\r\"-\n\014network_type\022\022\n\016INFRASTRUCTU"
      "RE\020\000\022\t\n\005ADHOC\020\001\"\210\004\n\nutil_stats\0221\n\004type\030\001"
      " \001(\0162#.ce.nbapi.util_stats.util_stat_typ"
      "e\022\017\n\007bucket1\030\002 \001(\r\022\017\n\007bucket2\030\003 \001(\r\022\017\n\007b"
      "ucket3\030\004 \001(\r\022\017\n\007bucket4\030\005 \001(\r\022\017\n\007bucket5"
      "\030\006 \001(\r\022\013\n\003max\030\007 \001(\r\022\013\n\003min\030\010 \001(\r\022\014\n\004curr"
      "\030\t \001(\r\022\014\n\004stat\030\n \001(\004\"\273\002\n\016util_stat_type\022"
      "\032\n\026UTIL_STAT_TYPE_CHANNEL\020\000\022\035\n\031UTIL_STAT"
      "_TYPE_CHANNEL_TX\020\001\022\035\n\031UTIL_STAT_TYPE_CHA"
      "NNEL_RX\020\002\022\035\n\031UTIL_STAT_TYPE_QUEUE_SWTX\020\003"
      "\022\033\n\027UTIL_STAT_TYPE_QUEUE_BE\020\004\022\033\n\027UTIL_ST"
      "AT_TYPE_QUEUE_BK\020\005\022\033\n\027UTIL_STAT_TYPE_QUE"
      "UE_VI\020\006\022\033\n\027UTIL_STAT_TYPE_QUEUE_VO\020\007\022\035\n\031"
      "UTIL_STAT_TYPE_QUEUE_BCMC\020\010\022\035\n\031UTIL_STAT"
      "_TYPE_QUEUE_ATIM\020\t\"\262\n\n\010location\022*\n\013sta_e"
      "th_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\026\n\016s"
      "ta_location_x\030\002 \001(\002\022\026\n\016sta_location_y\030\003 "
      "\001(\002\022\023\n\013error_level\030\007 \001(\r\022\022\n\nassociated\030\010"
      " \001(\010\022\021\n\tcampus_id\030\t \001(\014\022\023\n\013building_id\030\n"
      " \001(\014\022\020\n\010floor_id\030\013 \001(\014\022\032\n\022hashed_sta_eth"
      "_mac\030\014 \001(\014\022\024\n\014geofence_ids\030\r \003(\014\0223\n\rloc_"
      "algorithm\030\016 \001(\0162\034.ce.nbapi.location.algo"
      "rithm\022\020\n\010rssi_val\030\017 \001(\r\022\021\n\tlongitude\030\020 \001"
      "(\001\022\020\n\010latitude\030\021 \001(\001\022\020\n\010altitude\030\022 \001(\001\022("
      "\n\004unit\030\023 \001(\0162\032.ce.nbapi.measurement_unit"
      "\022C\n\013target_type\030\024 \001(\0162\031.ce.nbapi.target_"
      "dev_type:\023TARGET_TYPE_STATION\022/\n\010err_cod"
      "e\030\025 \001(\0162\035.ce.nbapi.location.error_code\022*"
      "\n\007records\030\026 \003(\0132\031.ce.nbapi.location.reco"
      "rd\022\026\n\016geofence_names\030\027 \003(\t\0222\n\rrtls_tag_i"
      "nfo\030\030 \003(\0132\033.ce.nbapi.location.rtls_tag\022\""
      "\n\032location_compute_timestamp\030\031 \001(\r\022!\n\031as"
      "sociated_to_valid_bssid\030\032 \001(\010\032h\n\006record\022"
      "\021\n\ttimestamp\030\001 \002(\r\022(\n\tradio_mac\030\002 \002(\0132\025."
      "ce.nbapi.mac_address\022\020\n\010rssi_val\030\003 \002(\005\022\017"
      "\n\007channel\030\004 \001(\r\032b\n\010rtls_tag\022\017\n\007battery\030\001"
      " \001(\r\022\017\n\007channel\030\002 \001(\r\022\020\n\010tx_power\030\003 \001(\r\022"
      "\021\n\tdata_rate\030\004 \001(\r\022\017\n\007payload\030\005 \001(\014\"\224\001\n\t"
      "algorithm\022\033\n\027ALGORITHM_TRIANGULATION\020\000\022\032"
      "\n\026ALGORITHM_AP_PLACEMENT\020\001\022\031\n\025ALGORITHM_"
      "CALIBRATION\020\002\022\030\n\024ALGORITHM_ESTIMATION\020\003\022"
      "\031\n\025ALGORITHM_LOW_DENSITY\020\004\"\362\001\n\nerror_cod"
      "e\022\027\n\023ERROR_CODE_NO_ERROR\020\000\022\025\n\021ERROR_CODE"
      "_0_RSSI\020\001\022\032\n\026ERROR_CODE_ONLY_1_RSSI\020\002\022\032\n"
      "\026ERROR_CODE_ONLY_2_RSSI\020\003\022\033\n\027ERROR_CODE_"
      "RSSI_QUALITY\020\004\022!\n\035ERROR_CODE_RSSI_OLD_TI"
      "MESTAMP\020\010\022#\n\037ERROR_CODE_RSSI_CLOSE_TIMES"
      "TAMP\020\020\022\027\n\021ERROR_CODE_LEGACY\020\377\377\?\"\346\001\n\010pres"
      "ence\022*\n\013sta_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac"
      "_address\022\022\n\nassociated\030\002 \001(\010\022\032\n\022hashed_s"
      "ta_eth_mac\030\003 \001(\014\022\017\n\007ap_name\030\004 \001(\t\022(\n\trad"
      "io_mac\030\005 \001(\0132\025.ce.nbapi.mac_address\022C\n\013t"
      "arget_type\030\006 \001(\0162\031.ce.nbapi.target_dev_t"
      "ype:\023TARGET_TYPE_STATION\"\354\001\n\004rssi\022*\n\013sta"
      "_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022(\n"
      "\tradio_mac\030\002 \001(\0132\025.ce.nbapi.mac_address\022"
      "\020\n\010rssi_val\030\003 \001(\r\022\022\n\nassociated\030\004 \001(\010\022\032\n"
      "\022hashed_sta_eth_mac\030\005 \001(\014\022\023\n\013noise_floor"
      "\030\006 \001(\r\022\r\n\005is_ap\030\007 \001(\010\022\013\n\003age\030\010 \001(\r\022\033\n\023cl"
      "assification_type\030\t \001(\r\"\224\002\n\010sta_rssi\022*\n\013"
      "sta_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_address"
      "\022(\n\tradio_mac\030\002 \001(\0132\025.ce.nbapi.mac_addre"
      "ss\022\020\n\010rssi_val\030\003 \001(\021\022\022\n\nassociated\030\004 \001(\010"
      "\022\013\n\003age\030\005 \001(\005\022\023\n\013noise_floor\030\006 \001(\005\022*\n\013as"
      "soc_bssid\030\007 \001(\0132\025.ce.nbapi.mac_address\022\033"
      "\n\023classification_type\030\010 \001(\r\022!\n\031associate"
      "d_to_valid_bssid\030\t \001(\010\"\333\001\n\010tag_rssi\022&\n\007t"
      "ag_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022(\n\tr"
      "adio_mac\030\002 \001(\0132\025.ce.nbapi.mac_address\022\020\n"
      "\010rssi_val\030\003 \001(\021\022\023\n\013noise_floor\030\004 \001(\005\022\017\n\007"
      "battery\030\005 \001(\r\022\017\n\007channel\030\006 \001(\r\022\020\n\010tx_pow"
      "er\030\007 \001(\r\022\021\n\tdata_rate\030\010 \001(\r\022\017\n\007payload\030\t"
      " \001(\014\"\235\002\n\007ap_rssi\022)\n\nap_eth_mac\030\001 \001(\0132\025.c"
      "e.nbapi.mac_address\022-\n\016neighbor_bssid\030\002 "
      "\001(\0132\025.ce.nbapi.mac_address\022\014\n\004ssid\030\003 \001(\t"
      "\022\020\n\010rssi_val\030\004 \001(\021\022\020\n\010phy_type\030\005 \001(\r\022\017\n\007"
      "ht_mode\030\006 \001(\r\022\017\n\007channel\030\007 \001(\r\022\020\n\010tx_pow"
      "er\030\010 \001(\r\022\017\n\007bw_rate\030\t \001(\003\022$\n\005bssid\030\n \001(\013"
      "2\025.ce.nbapi.mac_address\022\033\n\023classificatio"
      "n_type\030\013 \001(\r\"\267\002\n\007station\022*\n\013sta_eth_mac\030"
      "\001 \001(\0132\025.ce.nbapi.mac_address\022\020\n\010username"
      "\030\002 \001(\t\022\014\n\004role\030\003 \001(\t\022$\n\005bssid\030\004 \001(\0132\025.ce"
      ".nbapi.mac_address\022\023\n\013device_type\030\005 \001(\t\022"
      ",\n\016sta_ip_address\030\006 \001(\0132\024.ce.nbapi.ip_ad"
      "dress\022\032\n\022hashed_sta_eth_mac\030\007 \001(\014\022\035\n\025has"
      "hed_sta_ip_address\030\010 \001(\014\022\014\n\004vlan\030\t \001(\r\022\035"
      "\n\002ht\030\n \001(\0162\021.ce.nbapi.ht_type\022\017\n\007ap_name"
      "\030\013 \001(\t\"\233\004\n\014access_point\022)\n\nap_eth_mac\030\001 "
      "\002(\0132\025.ce.nbapi.mac_address\022\017\n\007ap_name\030\002 "
      "\001(\t\022\020\n\010ap_group\030\003 \001(\t\022\020\n\010ap_model\030\004 \001(\t\022"
      "9\n\tdepl_mode\030\005 \001(\0162&.ce.nbapi.access_poi"
      "nt.deployment_mode\022+\n\rap_ip_address\030\006 \001("
      "\0132\024.ce.nbapi.ip_address\022\017\n\007reboots\030\007 \001(\r"
      "\022\024\n\014rebootstraps\030\010 \001(\r\022(\n\nmanaged_by\030\t \001"
      "(\0132\024.ce.nbapi.ip_address\022\026\n\016managed_by_k"
      "ey\030\n \001(\t\022\037\n\006radios\030\013 \003(\0132\017.ce.nbapi.radi"
      "o\022\025\n\tis_master\030\014 \001(\010B\002\030\001\022\025\n\rreboot_reaso"
      "n\030\r \001(\t\022*\n\013ap_location\030\016 \001(\0132\025.ce.nbapi."
      "ap_location\022\024\n\014is_conductor\030\017 \001(\010\"I\n\017dep"
      "loyment_mode\022\032\n\026DEPLOYMENT_MODE_CAMPUS\020\000"
      "\022\032\n\026DEPLOYMENT_MODE_REMOTE\020\001\"\305\003\n\022state_a"
      "ccess_point\022%\n\006ap_mac\030\001 \001(\0132\025.ce.nbapi.m"
      "ac_address\022\025\n\rserial_number\030\002 \001(\t\022\017\n\007ap_"
      "name\030\003 \001(\t\022\r\n\005model\030\004 \001(\t\022\014\n\004mode\030\005 \001(\t\022"
      "#\n\005ap_ip\030\006 \001(\0132\024.ce.nbapi.ip_address\022\021\n\t"
      "cpu_usage\030\007 \001(\r\022\024\n\014memory_total\030\010 \001(\r\022\023\n"
      "\013memory_free\030\t \001(\r\022\025\n\tis_master\030\n \001(\rB\002\030"
      "\001\022\016\n\006uptime\030\013 \001(\r\022\021\n\tmesh_mode\030\014 \001(\r\022\022\n\n"
      "led_status\030\r \001(\r\022\026\n\016ext_ssid_state\030\020 \001(\r"
      "\022\023\n\013service_tag\030\021 \001(\t\022\024\n\014modem_status\030\022 "
      "\001(\r\022\033\n\023modem_simpin_status\030\023 \001(\r\022\034\n\024curr"
      "ent_uplink_inuse\030\024 \001(\r\022\024\n\014is_conductor\030\025"
      " \001(\r\"c\n\013stats_modem\022&\n\007iap_mac\030\001 \001(\0132\025.c"
      "e.nbapi.mac_address\022\025\n\rtx_data_bytes\030\002 \001"
      "(\004\022\025\n\rrx_data_bytes\030\003 \001(\004\"\307\003\n\005radio\022)\n\na"
      "p_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022*"
      "\n\013radio_bssid\030\002 \002(\0132\025.ce.nbapi.mac_addre"
      "ss\022(\n\004mode\030\004 \001(\0162\032.ce.nbapi.radio.radio_"
      "mode\022\037\n\003phy\030\005 \001(\0162\022.ce.nbapi.phy_type\022\035\n"
      "\002ht\030\006 \001(\0162\021.ce.nbapi.ht_type\022=\n\025virtual_"
      "access_points\030\007 \003(\0132\036.ce.nbapi.virtual_a"
      "ccess_point\022\021\n\tradio_num\030\010 \001(\r\"\252\001\n\nradio"
      "_mode\022\021\n\rRADIO_MODE_AP\020\000\022\032\n\026RADIO_MODE_M"
      "ESH_PORTAL\020\001\022\031\n\025RADIO_MODE_MESH_POINT\020\002\022"
      "\032\n\026RADIO_MODE_AIR_MONITOR\020\003\022\036\n\032RADIO_MOD"
      "E_SPECTRUM_SENSOR\020\004\022\026\n\022RADIO_MODE_UNKNOW"
      "N\020\005\"v\n\024virtual_access_point\022$\n\005bssid\030\001 \002"
      "(\0132\025.ce.nbapi.mac_address\022\014\n\004ssid\030\002 \001(\t\022"
      "*\n\013radio_bssid\030\003 \001(\0132\025.ce.nbapi.mac_addr"
      "ess\"`\n\013destination\022%\n\007dest_ip\030\001 \001(\0132\024.ce"
      ".nbapi.ip_address\022\021\n\tdest_name\030\002 \001(\t\022\027\n\017"
      "dest_alias_name\030\003 \001(\t\"Z\n\013application\022\016\n\006"
      "app_id\030\001 \001(\r\022\020\n\010app_name\030\002 \001(\t\022\022\n\napp_fa"
      "mily\030\003 \001(\t\022\025\n\rapp_long_name\030\004 \001(\t\"2\n\016web"
      "cc_category\022\016\n\006cat_id\030\001 \001(\r\022\020\n\010category\030"
      "\002 \001(\t\"\205\001\n\nwebcc_info\022\021\n\twebcc_md5\030\001 \001(\014\022"
      "\024\n\014webcc_cat_id\030\002 \001(\r\022\027\n\017webcc_rep_score"
      "\030\003 \001(\r\022\030\n\020webcc_url_prefix\030\004 \001(\t\022\033\n\023webc"
      "c_not_supported\030\005 \001(\010\"\227\005\n\016visibility_rec"
      "\022\'\n\tclient_ip\030\001 \001(\0132\024.ce.nbapi.ip_addres"
      "s\022%\n\007dest_ip\030\002 \001(\0132\024.ce.nbapi.ip_address"
      "\0226\n\010ip_proto\030\003 \001(\0162$.ce.nbapi.visibility"
      "_rec.ip_protocol\022\016\n\006app_id\030\004 \001(\r\022\017\n\007tx_p"
      "kts\030\005 \001(\004\022\020\n\010tx_bytes\030\006 \001(\004\022\017\n\007rx_pkts\030\007"
      " \001(\004\022\020\n\010rx_bytes\030\010 \001(\004\022\030\n\020hashed_client_"
      "ip\030\t \001(\014\022)\n\ndevice_mac\030\n \001(\0132\025.ce.nbapi."
      "mac_address\022\031\n\021hashed_device_mac\030\013 \001(\014\022\020"
      "\n\010app_name\030\014 \001(\t\022\021\n\tcc_cat_id\030\r \001(\r\022\024\n\014c"
      "c_rep_score\030\016 \001(\r\022\025\n\rcc_url_prefix\030\017 \001(\t"
      "\022\016\n\006cc_md5\030\020 \001(\014\022%\n\006ap_mac\030\021 \001(\0132\025.ce.nb"
      "api.mac_address\022G\n\rsession_flags\030\022 \001(\01620"
      ".ce.nbapi.visibility_rec.IapAppEnforceme"
      "ntStatus\"<\n\013ip_protocol\022\025\n\021IP_PROTOCOL_V"
      "AL_6\020\006\022\026\n\022IP_PROTOCOL_VAL_17\020\021\"7\n\027IapApp"
      "EnforcementStatus\022\016\n\nENF_PERMIT\020\001\022\014\n\010ENF"
      "_DENY\020\002\"0\n\006campus\022\021\n\tcampus_id\030\001 \001(\014\022\023\n\013"
      "campus_name\030\002 \001(\t\"I\n\010building\022\023\n\013buildin"
      "g_id\030\001 \001(\014\022\025\n\rbuilding_name\030\002 \001(\t\022\021\n\tcam"
      "pus_id\030\003 \001(\014\"\365\001\n\005floor\022\020\n\010floor_id\030\001 \001(\014"
      "\022\022\n\nfloor_name\030\002 \001(\t\022\026\n\016floor_latitude\030\003"
      " \001(\002\022\027\n\017floor_longitude\030\004 \001(\002\022\026\n\016floor_i"
      "mg_path\030\005 \001(\t\022\027\n\017floor_img_width\030\006 \001(\002\022\030"
      "\n\020floor_img_length\030\007 \001(\002\022\023\n\013building_id\030"
      "\010 \001(\014\022\023\n\013floor_level\030\t \001(\002\022\r\n\005units\030\n \001("
      "\t\022\021\n\tgrid_size\030\013 \001(\002\"\035\n\005point\022\t\n\001x\030\001 \001(\002"
      "\022\t\n\001y\030\002 \001(\002\"{\n\010geofence\022\020\n\010floor_id\030\001 \001("
      "\014\022\023\n\013geofence_id\030\002 \001(\014\022\025\n\rgeofence_name\030"
      "\003 \001(\t\022\014\n\004type\030\004 \001(\t\022#\n\npoint_list\030\005 \003(\0132"
      "\017.ce.nbapi.point\"\343\003\n\017geofence_notify\022<\n\016"
      "geofence_event\030\001 \001(\0162$.ce.nbapi.geofence"
      "_notify.zone_event\022\023\n\013geofence_id\030\002 \001(\014\022"
      "\025\n\rgeofence_name\030\003 \001(\t\022&\n\007sta_mac\030\004 \001(\0132"
      "\025.ce.nbapi.mac_address\022\022\n\nassociated\030\005 \001"
      "(\010\022\025\n\ndwell_time\030\006 \001(\r:\0010\022F\n\021access_poin"
      "t_info\030\007 \003(\n2+.ce.nbapi.geofence_notify."
      "Access_point_info\022\026\n\016hashed_sta_mac\030\036 \001("
      "\014\032\211\001\n\021Access_point_info\022%\n\006ap_mac\030\010 \001(\0132"
      "\025.ce.nbapi.mac_address\022\017\n\007ap_name\030\t \001(\t\022"
      "*\n\013radio_bssid\030\n \001(\0132\025.ce.nbapi.mac_addr"
      "ess\022\020\n\010rssi_val\030\013 \001(\r\"\'\n\nzone_event\022\013\n\007Z"
      "ONE_IN\020\000\022\014\n\010ZONE_OUT\020\001\"\251\010\n\013stats_radio\022)"
      "\n\nap_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_addres"
      "s\022\024\n\014radio_number\030\002 \001(\r\022\017\n\007channel\030\003 \001(\r"
      "\022\037\n\003phy\030\004 \001(\0162\022.ce.nbapi.phy_type\022.\n\004mod"
      "e\030\005 \001(\0162 .ce.nbapi.stats_radio.radio_mod"
      "e\022\023\n\013noise_floor\030\007 \001(\r\022\020\n\010tx_power\030\010 \001(\r"
      "\022\033\n\023channel_utilization\030\t \001(\r\022\036\n\026rx_chan"
      "nel_utilization\030\n \001(\r\022\036\n\026tx_channel_util"
      "ization\030\013 \001(\r\022\023\n\013tx_received\030\014 \001(\r\022\026\n\016tx"
      "_transmitted\030\r \001(\r\022\022\n\ntx_dropped\030\016 \001(\r\022\030"
      "\n\020tx_data_received\030\017 \001(\r\022\033\n\023tx_data_tran"
      "smitted\030\020 \001(\r\022\027\n\017tx_data_retried\030\021 \001(\r\022\021"
      "\n\trx_frames\030\022 \001(\r\022\022\n\nrx_retried\030\023 \001(\r\022\026\n"
      "\016rx_data_frames\030\024 \001(\r\022\027\n\017rx_data_retried"
      "\030\025 \001(\r\022\027\n\017rx_frame_errors\030\026 \001(\r\0228\n\rtraff"
      "ic_stats\030\027 \003(\0132!.ce.nbapi.data_traffic_t"
      "ype_stats\022-\n\nprio_stats\030\030 \003(\0132\031.ce.nbapi"
      ".data_prio_stats\022-\n\nrate_stats\030\031 \003(\0132\031.c"
      "e.nbapi.data_rate_stats\022\023\n\013actual_eirp\030\032"
      " \001(\r\022(\n\tradio_mac\030\033 \001(\0132\025.ce.nbapi.mac_a"
      "ddress\022\025\n\rtx_data_bytes\030\034 \001(\004\022\025\n\rrx_data"
      "_bytes\030\035 \001(\004\022\022\n\nradio_band\030\036 \001(\r\022\027\n\017chan"
      "nel_busy_64\030\037 \001(\r\022\022\n\nsta_number\030  \001(\r\"\252\001"
      "\n\nradio_mode\022\021\n\rRADIO_MODE_AP\020\000\022\032\n\026RADIO"
      "_MODE_MESH_PORTAL\020\001\022\031\n\025RADIO_MODE_MESH_P"
      "OINT\020\002\022\032\n\026RADIO_MODE_AIR_MONITOR\020\003\022\036\n\032RA"
      "DIO_MODE_SPECTRUM_SENSOR\020\004\022\026\n\022RADIO_MODE"
      "_UNKNOWN\020\005\"\361\003\n\tstats_vap\022)\n\nap_eth_mac\030\001"
      " \001(\0132\025.ce.nbapi.mac_address\022$\n\005bssid\030\002 \001"
      "(\0132\025.ce.nbapi.mac_address\022\023\n\013tx_received"
      "\030\005 \001(\r\022\026\n\016tx_transmitted\030\006 \001(\r\022\022\n\ntx_dro"
      "pped\030\007 \001(\r\022\030\n\020tx_data_received\030\010 \001(\r\022\033\n\023"
      "tx_data_transmitted\030\t \001(\r\022\027\n\017tx_data_ret"
      "ried\030\n \001(\r\022\021\n\trx_frames\030\022 \001(\r\022\022\n\nrx_retr"
      "ied\030\023 \001(\r\022\026\n\016rx_data_frames\030\013 \001(\r\022\027\n\017rx_"
      "data_retried\030\014 \001(\r\0228\n\rtraffic_stats\030\027 \003("
      "\0132!.ce.nbapi.data_traffic_type_stats\022-\n\n"
      "prio_stats\030\r \003(\0132\031.ce.nbapi.data_prio_st"
      "ats\022-\n\nrate_stats\030\016 \003(\0132\031.ce.nbapi.data_"
      "rate_stats\022\022\n\nsta_number\030\017 \001(\r\"\356\005\n\rstats"
      "_station\022*\n\013sta_eth_mac\030\001 \001(\0132\025.ce.nbapi"
      ".mac_address\022)\n\nap_eth_mac\030\002 \001(\0132\025.ce.nb"
      "api.mac_address\022$\n\005bssid\030\003 \001(\0132\025.ce.nbap"
      "i.mac_address\022\013\n\003snr\030\004 \001(\r\022\023\n\013tx_receive"
      "d\030\005 \001(\r\022\026\n\016tx_transmitted\030\006 \001(\r\022\022\n\ntx_dr"
      "opped\030\007 \001(\r\022\030\n\020tx_data_received\030\010 \001(\r\022\033\n"
      "\023tx_data_transmitted\030\t \001(\r\022\027\n\017tx_data_re"
      "tried\030\n \001(\r\022\030\n\020rx_data_received\030\013 \001(\r\022\027\n"
      "\017rx_data_retried\030\014 \001(\r\022-\n\nprio_stats\030\r \003"
      "(\0132\031.ce.nbapi.data_prio_stats\022-\n\nrate_st"
      "ats\030\016 \003(\0132\031.ce.nbapi.data_rate_stats\022\r\n\005"
      "speed\030\017 \001(\r\022\017\n\007rx_rate\030\020 \001(\004\022\017\n\007tx_rate\030"
      "\021 \001(\004\022\025\n\rrx_data_bytes\030\022 \001(\004\022\025\n\rtx_data_"
      "bytes\030\023 \001(\004\022\017\n\007ssid_up\030\024 \001(\r\022\032\n\022hashed_s"
      "ta_eth_mac\030\026 \001(\014\022\023\n\013max_tx_rate\030\027 \001(\004\022!\n"
      "\031tx_data_bytes_transmitted\030\030 \001(\004\022\024\n\014tx_t"
      "ime_data\030\031 \001(\r\022\024\n\014rx_time_data\030\032 \001(\r\022\031\n\021"
      "sta_client_health\030\033 \001(\r\022\022\n\nrx_retries\030\034 "
      "\001(\r\022\022\n\ntx_retries\030\035 \001(\r\"\360\001\n\rstate_statio"
      "n\022*\n\013sta_eth_mac\030\001 \001(\0132\025.ce.nbapi.mac_ad"
      "dress\022)\n\nap_eth_mac\030\002 \001(\0132\025.ce.nbapi.mac"
      "_address\022\013\n\003snr\030\003 \001(\r\022\020\n\010rx_tries\030\004 \001(\r\022"
      "\020\n\010tx_tries\030\005 \001(\r\022$\n\010phy_type\030\006 \001(\0162\022.ce"
      ".nbapi.phy_type\022\025\n\rsecurity_type\030\007 \001(\r\022\032"
      "\n\022hashed_sta_eth_mac\030\010 \001(\014\"\346\004\n\020uplink_ba"
      "ndwidth\022\'\n\tserver_ip\030\001 \001(\0132\024.ce.nbapi.ip"
      "_address\022\023\n\013server_port\030\002 \001(\r\022&\n\010local_i"
      "p\030\003 \001(\0132\024.ce.nbapi.ip_address\022\022\n\nlocal_p"
      "ort\030\004 \001(\r\022%\n\006ap_mac\030\005 \001(\0132\025.ce.nbapi.mac"
      "_address\022\017\n\007ap_name\030\006 \001(\t\022\021\n\ttimestamp\030\007"
      " \001(\004\022\020\n\010protocol\030\010 \001(\t\022\020\n\010interval\030\t \001(\r"
      "\022\026\n\016upstream_bytes\030\n \001(\r\022\032\n\022upstream_ban"
      "dwidth\030\013 \001(\r\022\030\n\020upstream_retries\030\014 \001(\r\022\030"
      "\n\020downstream_bytes\030\r \001(\r\022\034\n\024downstream_b"
      "andwidth\030\016 \001(\r\022\032\n\022downstream_retries\030\017 \001"
      "(\r\022\032\n\022upstream_datagrams\030\020 \001(\r\022\034\n\024downst"
      "ream_datagrams\030\021 \001(\r\022\027\n\017upstream_jitter\030"
      "\022 \001(\t\022\031\n\021downstream_jitter\030\023 \001(\t\022\035\n\025upst"
      "ream_lost_packets\030\024 \001(\r\022\037\n\027downstream_lo"
      "st_packets\030\025 \001(\r\022\031\n\021hashed_ap_eth_mac\030\026 "
      "\001(\014\"\364\002\n\013uplink_info\022)\n\ndevice_mac\030\001 \001(\0132"
      "\025.ce.nbapi.mac_address\022\017\n\007link_id\030\002 \001(\004\022"
      "\014\n\004desc\030\003 \001(\t\022\023\n\013link_status\030\004 \001(\r\022\017\n\007vl"
      "an_id\030\005 \001(\004\022\030\n\020port_tunnel_desc\030\006 \001(\t\022\021\n"
      "\tlink_prio\030\007 \001(\r\022\022\n\nwan_status\030\010 \001(\r\022\023\n\013"
      "crypto_type\030\t \001(\r\022\034\n\024tunnel_active_statu"
      "s\030\n \001(\r\022\025\n\rtunnel_uptime\030\013 \001(\004\022,\n\016peer_t"
      "unnel_ip\030\014 \001(\0132\024.ce.nbapi.ip_address\022\'\n\t"
      "tunnel_ip\030\r \001(\0132\024.ce.nbapi.ip_address\022\023\n"
      "\013tunnel_name\030\016 \001(\t\"\266\001\n\014stats_uplink\022)\n\nd"
      "evice_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\017"
      "\n\007link_id\030\002 \001(\004\022\017\n\007rx_pkts\030\003 \001(\004\022\017\n\007tx_p"
      "kts\030\004 \001(\004\022\020\n\010rx_bytes\030\005 \001(\004\022\020\n\010tx_bytes\030"
      "\006 \001(\004\022\017\n\007vlan_id\030\007 \001(\r\022\023\n\013tunnel_name\030\010 "
      "\001(\t\"\226\001\n\017wan_comp_uplink\022&\n\007boc_mac\030\001 \001(\013"
      "2\025.ce.nbapi.mac_address\022\017\n\007link_id\030\002 \001(\004"
      "\022\026\n\016tot_comp_bytes\030\003 \001(\004\022\030\n\020tot_uncomp_b"
      "ytes\030\004 \001(\004\022\030\n\020tot_comp_savings\030\005 \001(\004\"\275\003\n"
      "\025stats_ip_probe_uplink\022)\n\ndevice_mac\030\001 \001"
      "(\0132\025.ce.nbapi.mac_address\022\017\n\007link_id\030\002 \001"
      "(\004\022+\n\rprobe_ip_addr\030\003 \001(\0132\024.ce.nbapi.ip_"
      "address\022\017\n\007vlan_id\030\004 \001(\r\022\017\n\007avg_rtt\030\005 \001("
      "\004\022\017\n\007max_rtt\030\006 \001(\004\022\017\n\007min_rtt\030\007 \001(\004\022\022\n\na"
      "vg_jitter\030\010 \001(\004\022\022\n\nmax_jitter\030\t \001(\004\022\022\n\nm"
      "in_jitter\030\n \001(\004\022\023\n\013mos_quality\030\013 \001(\004\022\024\n\014"
      "probe_status\030\014 \001(\r\022\035\n\025ip_probe_pkt_loss_"
      "pct\030\r \001(\r\022\023\n\013tunnel_name\030\016 \001(\t\022\026\n\016sd_avg"
      "_latency\030\017 \001(\004\022\026\n\016ds_avg_latency\030\020 \001(\004\022\025"
      "\n\rsd_avg_jitter\030\021 \001(\004\022\025\n\rds_avg_jitter\030\022"
      " \001(\004\"\246\001\n\014stats_tunnel\022\024\n\014tunnel_index\030\001 "
      "\001(\r\022\024\n\014tx_data_pkts\030\002 \001(\004\022\024\n\014rx_data_pkt"
      "s\030\003 \001(\004\022\025\n\rtx_data_bytes\030\004 \001(\004\022\025\n\rrx_dat"
      "a_bytes\030\005 \001(\004\022&\n\007iap_mac\030\006 \001(\0132\025.ce.nbap"
      "i.mac_address\"0\n\nbytes_info\022\020\n\010tx_bytes\030"
      "\001 \001(\004\022\020\n\010rx_bytes\030\002 \001(\004\"s\n\016iap_bytes_inf"
      "o\0227\n\rsession_flags\030\001 \001(\0162 .ce.nbapi.iap_"
      "enforcement_status\022(\n\nbytes_info\030\002 \001(\0132\024"
      ".ce.nbapi.bytes_info\"u\n\016stats_role_iap\022&"
      "\n\007iap_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\021"
      "\n\tuser_role\030\002 \001(\014\022(\n\nbytes_info\030\003 \001(\0132\024."
      "ce.nbapi.bytes_info\"p\n\016stats_vlan_iap\022&\n"
      "\007iap_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\014\n"
      "\004vlan\030\002 \001(\r\022(\n\nbytes_info\030\003 \001(\0132\024.ce.nba"
      "pi.bytes_info\"q\n\016stats_ssid_iap\022&\n\007iap_m"
      "ac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\r\n\005essid"
      "\030\002 \001(\014\022(\n\nbytes_info\030\003 \001(\0132\024.ce.nbapi.by"
      "tes_info\"_\n\nstats_port\022\'\n\010port_mac\030\001 \001(\013"
      "2\025.ce.nbapi.mac_address\022(\n\nbytes_info\030\002 "
      "\001(\0132\024.ce.nbapi.bytes_info\"}\n\022summary_web"
      "cat_iap\022&\n\007iap_mac\030\001 \001(\0132\025.ce.nbapi.mac_"
      "address\022\021\n\twebcat_id\030\002 \001(\r\022,\n\nbytes_info"
      "\030\003 \001(\0132\030.ce.nbapi.iap_bytes_info\"y\n\021summ"
      "ary_appid_iap\022&\n\007iap_mac\030\001 \001(\0132\025.ce.nbap"
      "i.mac_address\022\016\n\006app_id\030\002 \001(\r\022,\n\nbytes_i"
      "nfo\030\003 \001(\0132\030.ce.nbapi.iap_bytes_info\"}\n\022s"
      "ummary_webrep_iap\022&\n\007iap_mac\030\001 \001(\0132\025.ce."
      "nbapi.mac_address\022\021\n\twebrep_id\030\002 \001(\r\022,\n\n"
      "bytes_info\030\003 \001(\0132\030.ce.nbapi.iap_bytes_in"
      "fo\";\n\020ap_neighbor_list\022\'\n\010neighbor\030\001 \003(\013"
      "2\025.ce.nbapi.ap_neighbor\"\200\001\n\027utilization_"
      "stats_radio\022)\n\nap_eth_mac\030\001 \001(\0132\025.ce.nba"
      "pi.mac_address\022\024\n\014radio_number\030\002 \001(\r\022$\n\006"
      "ustats\030\003 \003(\0132\024.ce.nbapi.util_stats\"\345\001\n\tp"
      "roximity\022*\n\013sta_eth_mac\030\001 \001(\0132\025.ce.nbapi"
      ".mac_address\022(\n\tradio_mac\030\002 \001(\0132\025.ce.nba"
      "pi.mac_address\022\020\n\010rssi_val\030\003 \001(\005\022\017\n\007ap_n"
      "ame\030\004 \001(\t\022\032\n\022hashed_sta_eth_mac\030\005 \001(\014\022C\n"
      "\013target_type\030\006 \001(\0162\031.ce.nbapi.target_dev"
      "_type:\023TARGET_TYPE_STATION\"\320\002\n\005dot1x\022\027\n\017"
      "start_timestamp\030\001 \001(\004\022\030\n\020finish_timestam"
      "p\030\002 \001(\004\022*\n\013station_mac\030\003 \001(\0132\025.ce.nbapi."
      "mac_address\022\020\n\010username\030\004 \001(\t\022$\n\005bssid\030\005"
      " \001(\0132\025.ce.nbapi.mac_address\022\016\n\006result\030\006 "
      "\001(\r\022\016\n\006reason\030\007 \001(\r\022\030\n\020server_retry_cnt\030"
      "\010 \001(\r\022\030\n\020client_retry_cnt\030\t \001(\r\022&\n\010serve"
      "rip\030\n \001(\0132\024.ce.nbapi.ip_address\022\031\n\021srvr_"
      "elapsed_time\030\013 \001(\r\022\031\n\021clnt_elapsed_time\030"
      "\014 \001(\r\"\241\002\n\021wpa_key_handshake\022\027\n\017start_tim"
      "estamp\030\001 \001(\004\022\030\n\020finish_timestamp\030\002 \001(\004\022*"
      "\n\013station_mac\030\003 \001(\0132\025.ce.nbapi.mac_addre"
      "ss\022$\n\005bssid\030\004 \001(\0132\025.ce.nbapi.mac_address"
      "\022\016\n\006result\030\005 \001(\r\022\026\n\016trigger_reason\030\006 \001(\r"
      "\022\016\n\006reason\030\007 \001(\r\022\026\n\016key1_retry_cnt\030\010 \001(\r"
      "\022\026\n\016key3_retry_cnt\030\t \001(\r\022\037\n\027replay_count"
      "er_mismatch\030\n \001(\r\"\257\002\n\016captive_portal\022\027\n\017"
      "start_timestamp\030\001 \001(\004\022\030\n\020finish_timestam"
      "p\030\002 \001(\004\022*\n\013station_mac\030\003 \001(\0132\025.ce.nbapi."
      "mac_address\022\020\n\010username\030\004 \001(\t\022$\n\005bssid\030\005"
      " \001(\0132\025.ce.nbapi.mac_address\022\016\n\006result\030\006 "
      "\001(\r\022\016\n\006reason\030\007 \001(\r\022\030\n\020server_retry_cnt\030"
      "\010 \001(\r\022&\n\010serverip\030\t \001(\0132\024.ce.nbapi.ip_ad"
      "dress\022$\n\006userip\030\n \001(\0132\024.ce.nbapi.ip_addr"
      "ess\"\360\001\n\007macauth\022\027\n\017start_timestamp\030\001 \001(\004"
      "\022\030\n\020finish_timestamp\030\002 \001(\004\022*\n\013station_ma"
      "c\030\003 \001(\0132\025.ce.nbapi.mac_address\022$\n\005bssid\030"
      "\004 \001(\0132\025.ce.nbapi.mac_address\022\016\n\006result\030\005"
      " \001(\r\022\016\n\006reason\030\006 \001(\r\022\030\n\020server_retry_cnt"
      "\030\007 \001(\r\022&\n\010serverip\030\010 \001(\0132\024.ce.nbapi.ip_a"
      "ddress\"\353\001\n\021auth_srvr_timeout\022\021\n\ttimestam"
      "p\030\001 \001(\004\022*\n\013station_mac\030\002 \001(\0132\025.ce.nbapi."
      "mac_address\022$\n\005bssid\030\003 \001(\0132\025.ce.nbapi.ma"
      "c_address\022\020\n\010authtype\030\004 \001(\r\022\021\n\tretry_cnt"
      "\030\005 \001(\r\022$\n\006userip\030\006 \001(\0132\024.ce.nbapi.ip_add"
      "ress\022&\n\010serverip\030\007 \001(\0132\024.ce.nbapi.ip_add"
      "ress\"\315\003\n\020security_message\022>\n\010msg_type\030\001 "
      "\001(\0162,.ce.nbapi.security_message.security"
      "_msg_type\0226\n\021auth_srvr_timeout\030\002 \001(\0132\033.c"
      "e.nbapi.auth_srvr_timeout\022\"\n\007macauth\030\003 \001"
      "(\0132\021.ce.nbapi.macauth\0220\n\016captive_portal\030"
      "\004 \001(\0132\030.ce.nbapi.captive_portal\0226\n\021wpa_k"
      "ey_handshake\030\005 \001(\0132\033.ce.nbapi.wpa_key_ha"
      "ndshake\022\036\n\005dot1x\030\006 \001(\0132\017.ce.nbapi.dot1x\""
      "\222\001\n\021security_msg_type\022\031\n\025AUTH_SRVR_TIMEO"
      "UT_MSG\020\000\022\017\n\013MACAUTH_MSG\020\001\022\026\n\022CAPTIVE_POR"
      "TAL_MSG\020\002\022\031\n\025WPA_KEY_HANDSHAKE_MSG\020\003\022\r\n\t"
      "DOT1X_MSG\020\004\022\017\n\013UNKNOWN_MSG\020\005\"\360\001\n\rspectru"
      "m_info\022%\n\006ap_mac\030\001 \001(\0132\025.ce.nbapi.mac_ad"
      "dress\022\024\n\014radio_number\030\002 \001(\r\022\016\n\006dev_id\030\003 "
      "\001(\r\022\020\n\010dev_type\030\004 \001(\r\022\016\n\006low_ch\030\005 \001(\r\022\017\n"
      "\007high_ch\030\006 \001(\r\022\016\n\006signal\030\007 \001(\r\022\022\n\nduty_c"
      "ycle\030\010 \001(\r\022\023\n\013center_freq\030\t \001(\r\022\021\n\ttimes"
      "tamp\030\n \001(\004\022\023\n\013active_time\030\013 \001(\004\"\212\001\n\nrogu"
      "e_info\022*\n\013monitor_mac\030\001 \001(\0132\025.ce.nbapi.m"
      "ac_address\022(\n\theard_mac\030\002 \001(\0132\025.ce.nbapi"
      ".mac_address\022\027\n\017monitor_channel\030\003 \001(\r\022\r\n"
      "\005is_ap\030\004 \001(\r\",\n\016key_value_type\022\013\n\003key\030\001 "
      "\001(\t\022\r\n\005value\030\002 \001(\t\"\343\001\n\004info\022.\n\014current_m"
      "ode\030\001 \001(\0162\030.ce.nbapi.info.mode_type\022\025\n\rl"
      "icense_valid\030\002 \001(\010\022+\n\tkey_value\030\003 \003(\0132\030."
      "ce.nbapi.key_value_type\"g\n\tmode_type\022\013\n\007"
      "CONTEXT\020\000\022)\n%CONTEXT_AND_LOCATION_WITH_C"
      "ALIBRATION\020\001\022\"\n\036CONTEXT_AND_ESTIMATED_LO"
      "CATION\020\002\"u\n\017controller_info\0223\n\025controlle"
      "r_ip_address\030\001 \002(\0132\024.ce.nbapi.ip_address"
      "\022-\n\raccess_points\030\002 \003(\0132\026.ce.nbapi.acces"
      "s_point\"\250\001\n\014cluster_info\022\023\n\013cluster_key\030"
      "\001 \001(\t\022\024\n\014cluster_name\030\002 \001(\t\022\024\n\014organizat"
      "ion\030\003 \001(\t\022(\n\ncluster_ip\030\004 \001(\0132\024.ce.nbapi"
      ".ip_address\022-\n\raccess_points\030\005 \003(\0132\026.ce."
      "nbapi.access_point\"b\n\010topology\022-\n\ncontro"
      "ller\030\002 \001(\0132\031.ce.nbapi.controller_info\022\'\n"
      "\007cluster\030\003 \001(\0132\026.ce.nbapi.cluster_info\"\263"
      "\001\n\013ap_location\022)\n\nap_eth_mac\030\001 \002(\0132\025.ce."
      "nbapi.mac_address\022\021\n\tcampus_id\030\002 \001(\014\022\023\n\013"
      "building_id\030\003 \001(\014\022\020\n\010floor_id\030\004 \001(\014\022\021\n\tl"
      "ongitude\030\005 \001(\001\022\020\n\010latitude\030\006 \001(\001\022\014\n\004ap_x"
      "\030\007 \001(\001\022\014\n\004ap_y\030\010 \001(\001\"\273\025\n\010nb_event\022\013\n\003seq"
      "\030\001 \001(\004\022\021\n\ttimestamp\030\002 \001(\r\022.\n\002op\030\003 \001(\0162\"."
      "ce.nbapi.nb_event.event_operation\022\021\n\ttop"
      "ic_seq\030\004 \001(\004\022\021\n\tsource_id\030\005 \001(\014\022:\n\010lic_i"
      "nfo\030\006 \001(\0162\037.ce.nbapi.nb_event.license_in"
      "fo:\007hb_Dhak\022%\n\010location\030\364\003 \001(\0132\022.ce.nbap"
      "i.location\022%\n\010presence\030\365\003 \001(\0132\022.ce.nbapi"
      ".presence\022\035\n\004rssi\030\366\003 \001(\0132\016.ce.nbapi.rssi"
      "\022#\n\007station\030\367\003 \001(\0132\021.ce.nbapi.station\022\037\n"
      "\005radio\030\371\003 \001(\0132\017.ce.nbapi.radio\022+\n\013destin"
      "ation\030\373\003 \001(\0132\025.ce.nbapi.destination\022+\n\013a"
      "pplication\030\375\003 \001(\0132\025.ce.nbapi.application"
      "\0221\n\016visibility_rec\030\376\003 \001(\0132\030.ce.nbapi.vis"
      "ibility_rec\022!\n\006campus\030\377\003 \001(\0132\020.ce.nbapi."
      "campus\022%\n\010building\030\200\004 \001(\0132\022.ce.nbapi.bui"
      "lding\022\037\n\005floor\030\201\004 \001(\0132\017.ce.nbapi.floor\022-"
      "\n\014access_point\030\202\004 \001(\0132\026.ce.nbapi.access_"
      "point\022=\n\024virtual_access_point\030\203\004 \001(\0132\036.c"
      "e.nbapi.virtual_access_point\022%\n\010geofence"
      "\030\204\004 \001(\0132\022.ce.nbapi.geofence\0223\n\017geofence_"
      "notify\030\205\004 \001(\0132\031.ce.nbapi.geofence_notify"
      "\022+\n\013stats_radio\030\206\004 \001(\0132\025.ce.nbapi.stats_"
      "radio\022\'\n\tstats_vap\030\207\004 \001(\0132\023.ce.nbapi.sta"
      "ts_vap\022/\n\rstats_station\030\210\004 \001(\0132\027.ce.nbap"
      "i.stats_station\0225\n\020ap_neighbor_list\030\211\004 \001"
      "(\0132\032.ce.nbapi.ap_neighbor_list\022C\n\027utiliz"
      "ation_stats_radio\030\212\004 \001(\0132!.ce.nbapi.util"
      "ization_stats_radio\022%\n\010sta_rssi\030\213\004 \001(\0132\022"
      ".ce.nbapi.sta_rssi\022#\n\007ap_rssi\030\214\004 \001(\0132\021.c"
      "e.nbapi.ap_rssi\022\'\n\tproximity\030\215\004 \001(\0132\023.ce"
      ".nbapi.proximity\0221\n\016webcc_category\030\216\004 \001("
      "\0132\030.ce.nbapi.webcc_category\022)\n\nwebcc_inf"
      "o\030\217\004 \001(\0132\024.ce.nbapi.webcc_info\0225\n\020securi"
      "ty_message\030\220\004 \001(\0132\032.ce.nbapi.security_me"
      "ssage\022/\n\rspectrum_info\030\221\004 \001(\0132\027.ce.nbapi"
      ".spectrum_info\022/\n\rstate_station\030\222\004 \001(\0132\027"
      ".ce.nbapi.state_station\022.\n\ncontroller\030\223\004"
      " \001(\0132\031.ce.nbapi.controller_info\022(\n\007clust"
      "er\030\224\004 \001(\0132\026.ce.nbapi.cluster_info\0225\n\020upl"
      "ink_bandwidth\030\225\004 \001(\0132\032.ce.nbapi.uplink_b"
      "andwidth\022/\n\014iapClientURL\030\240\004 \001(\0132\030.ce.nba"
      "pi.iap_client_url\022)\n\nrogue_info\030\241\004 \001(\0132\024"
      ".ce.nbapi.rogue_info\0221\n\014air_mon_info\030\242\004 "
      "\001(\0132\032.ce.nbapi.air_monitor_info\022+\n\013ap_lo"
      "cation\030\243\004 \001(\0132\025.ce.nbapi.ap_location\0229\n\022"
      "state_access_point\030\244\004 \001(\0132\034.ce.nbapi.sta"
      "te_access_point\022+\n\013stats_modem\030\245\004 \001(\0132\025."
      "ce.nbapi.stats_modem\022+\n\013uplink_info\030\246\004 \001"
      "(\0132\025.ce.nbapi.uplink_info\022-\n\014stats_uplin"
      "k\030\247\004 \001(\0132\026.ce.nbapi.stats_uplink\0223\n\017wan_"
      "comp_uplink\030\250\004 \001(\0132\031.ce.nbapi.wan_comp_u"
      "plink\022\?\n\025stats_ip_probe_uplink\030\251\004 \001(\0132\037."
      "ce.nbapi.stats_ip_probe_uplink\0225\n\016summar"
      "y_webcat\030\252\004 \001(\0132\034.ce.nbapi.summary_webca"
      "t_iap\0223\n\rsummary_appid\030\253\004 \001(\0132\033.ce.nbapi"
      ".summary_appid_iap\0225\n\016summary_webrep\030\254\004 "
      "\001(\0132\034.ce.nbapi.summary_webrep_iap\022-\n\nsta"
      "ts_role\030\255\004 \001(\0132\030.ce.nbapi.stats_role_iap"
      "\022-\n\nstats_vlan\030\256\004 \001(\0132\030.ce.nbapi.stats_v"
      "lan_iap\022-\n\nstats_ssid\030\257\004 \001(\0132\030.ce.nbapi."
      "stats_ssid_iap\022%\n\010tag_rssi\030\260\004 \001(\0132\022.ce.n"
      "bapi.tag_rssi\"H\n\017event_operation\022\n\n\006OP_A"
      "DD\020\000\022\r\n\tOP_UPDATE\020\001\022\r\n\tOP_DELETE\020\002\022\013\n\007OP"
      "_SYNC\020\003\"\360\001\n\014license_info\022\013\n\007hb_Dhak\020\n\022\016\n"
      "\nhb_LimitOk\020\013\022\027\n\023hb_ThresholdXNotice\020\024\022\030"
      "\n\024hb_ThresholdOkNotice\020\025\022\026\n\022hb_LicenseEx"
      "ceeded\020\037\022\022\n\016hb_EvalStarted\020)\022\027\n\023hb_NewLi"
      "mitExceeded\0203\022\017\n\013hb_EvalDone\020=\022\020\n\014hb_ALS"
      "Online\020G\022\020\n\014hb_ALSDieing\020Q\022\026\n\022hb_LICENSE"
      "_BLOCKED\020[\"\347\026\n\016query_response\022A\n\017locatio"
      "n_result\030\n \003(\n2(.ce.nbapi.query_response"
      ".Location_result\022A\n\017presence_result\030\024 \003("
      "\n2(.ce.nbapi.query_response.Presence_res"
      "ult\0229\n\013rssi_result\030\036 \003(\n2$.ce.nbapi.quer"
      "y_response.Rssi_result\022\?\n\016station_result"
      "\030( \003(\n2\'.ce.nbapi.query_response.Station"
      "_result\022;\n\014radio_result\0302 \003(\n2%.ce.nbapi"
      ".query_response.Radio_result\022G\n\022destinat"
      "ion_result\030< \003(\n2+.ce.nbapi.query_respon"
      "se.Destination_result\022G\n\022application_res"
      "ult\030F \003(\n2+.ce.nbapi.query_response.Appl"
      "ication_result\022M\n\025visibility_rec_result\030"
      "P \003(\n2..ce.nbapi.query_response.Visibili"
      "ty_rec_result\022=\n\rcampus_result\030Z \003(\n2&.c"
      "e.nbapi.query_response.Campus_result\022A\n\017"
      "building_result\030d \003(\n2(.ce.nbapi.query_r"
      "esponse.Building_result\022;\n\014floor_result\030"
      "n \003(\n2%.ce.nbapi.query_response.Floor_re"
      "sult\022I\n\023access_point_result\030x \003(\n2,.ce.n"
      "bapi.query_response.Access_point_result\022"
      "Z\n\033virtual_access_point_result\030\202\001 \003(\n24."
      "ce.nbapi.query_response.Virtual_access_p"
      "oint_result\022B\n\017geofence_result\030\214\001 \003(\n2(."
      "ce.nbapi.query_response.Geofence_result\022"
      "D\n\020proximity_result\030\226\001 \003(\n2).ce.nbapi.qu"
      "ery_response.Proximity_result\022L\n\024webccca"
      "tegory_result\030\240\001 \003(\n2-.ce.nbapi.query_re"
      "sponse.WebCCCategory_result\022:\n\013info_resu"
      "lt\030\252\001 \001(\n2$.ce.nbapi.query_response.Info"
      "_result\022B\n\017topology_result\030\264\001 \003(\n2(.ce.n"
      "bapi.query_response.Topology_result\022F\n\021c"
      "ontroller_result\030\276\001 \003(\n2*.ce.nbapi.query"
      "_response.Controller_result\022@\n\016cluster_r"
      "esult\030\310\001 \003(\n2\'.ce.nbapi.query_response.C"
      "luster_result\022\\\n\034access_point_location_r"
      "esult\030\322\001 \003(\n25.ce.nbapi.query_response.A"
      "ccess_point_location_result\032>\n\017Location_"
      "result\022\037\n\003msg\030\013 \002(\0132\022.ce.nbapi.location\022"
      "\n\n\002ts\030\014 \001(\r\032>\n\017Presence_result\022\037\n\003msg\030\025 "
      "\002(\0132\022.ce.nbapi.presence\022\n\n\002ts\030\026 \001(\r\0326\n\013R"
      "ssi_result\022\033\n\003msg\030\037 \002(\0132\016.ce.nbapi.rssi\022"
      "\n\n\002ts\030  \001(\r\032<\n\016Station_result\022\036\n\003msg\030) \002"
      "(\0132\021.ce.nbapi.station\022\n\n\002ts\030* \001(\r\0328\n\014Rad"
      "io_result\022\034\n\003msg\0303 \002(\0132\017.ce.nbapi.radio\022"
      "\n\n\002ts\0304 \001(\r\032D\n\022Destination_result\022\"\n\003msg"
      "\030= \002(\0132\025.ce.nbapi.destination\022\n\n\002ts\030> \001("
      "\r\032D\n\022Application_result\022\"\n\003msg\030G \002(\0132\025.c"
      "e.nbapi.application\022\n\n\002ts\030H \001(\r\032J\n\025Visib"
      "ility_rec_result\022%\n\003msg\030Q \002(\0132\030.ce.nbapi"
      ".visibility_rec\022\n\n\002ts\030R \001(\r\032:\n\rCampus_re"
      "sult\022\035\n\003msg\030[ \002(\0132\020.ce.nbapi.campus\022\n\n\002t"
      "s\030\\ \001(\r\032>\n\017Building_result\022\037\n\003msg\030e \002(\0132"
      "\022.ce.nbapi.building\022\n\n\002ts\030f \001(\r\0328\n\014Floor"
      "_result\022\034\n\003msg\030o \002(\0132\017.ce.nbapi.floor\022\n\n"
      "\002ts\030p \001(\r\032F\n\023Access_point_result\022#\n\003msg\030"
      "y \002(\0132\026.ce.nbapi.access_point\022\n\n\002ts\030z \001("
      "\r\032X\n\033Virtual_access_point_result\022,\n\003msg\030"
      "\203\001 \002(\0132\036.ce.nbapi.virtual_access_point\022\013"
      "\n\002ts\030\204\001 \001(\r\032@\n\017Geofence_result\022 \n\003msg\030\215\001"
      " \002(\0132\022.ce.nbapi.geofence\022\013\n\002ts\030\216\001 \001(\r\032B\n"
      "\020Proximity_result\022!\n\003msg\030\230\001 \002(\0132\023.ce.nba"
      "pi.proximity\022\013\n\002ts\030\231\001 \001(\r\032K\n\024WebCCCatego"
      "ry_result\022&\n\003msg\030\241\001 \002(\0132\030.ce.nbapi.webcc"
      "_category\022\013\n\002ts\030\242\001 \001(\r\0328\n\013Info_result\022\034\n"
      "\003msg\030\253\001 \002(\0132\016.ce.nbapi.info\022\013\n\002ts\030\254\001 \001(\r"
      "\032@\n\017Topology_result\022 \n\003msg\030\265\001 \002(\0132\022.ce.n"
      "bapi.topology\022\013\n\002ts\030\266\001 \001(\r\032I\n\021Controller"
      "_result\022\'\n\003msg\030\277\001 \002(\0132\031.ce.nbapi.control"
      "ler_info\022\013\n\002ts\030\300\001 \001(\r\032C\n\016Cluster_result\022"
      "$\n\003msg\030\311\001 \002(\0132\026.ce.nbapi.cluster_info\022\013\n"
      "\002ts\030\312\001 \001(\r\032P\n\034Access_point_location_resu"
      "lt\022#\n\003msg\030\323\001 \002(\0132\025.ce.nbapi.ap_location\022"
      "\013\n\002ts\030\324\001 \001(\r\"\273\001\n\016iap_client_url\022(\n\004info\030"
      "\001 \001(\0132\032.ce.nbapi.iap_message_info\022\021\n\ttim"
      "estamp\030\002 \001(\004\022%\n\006ap_mac\030\003 \001(\0132\025.ce.nbapi."
      "mac_address\022/\n\nurl_record\030\004 \001(\0132\033.ce.nba"
      "pi.url_detail_record\022\024\n\014ap_host_name\030\005 \001"
      "(\t\"\347\002\n\021url_detail_record\022\'\n\tclient_ip\030\001 "
      "\001(\0132\024.ce.nbapi.ip_address\022%\n\007dest_ip\030\002 \001"
      "(\0132\024.ce.nbapi.ip_address\022\013\n\003url\030\003 \001(\014\022\021\n"
      "\thit_count\030\004 \001(\r\022)\n\nclient_mac\030\005 \001(\0132\025.c"
      "e.nbapi.mac_address\022@\n\013http_method\030\006 \001(\016"
      "2+.ce.nbapi.url_detail_record.url_http_m"
      "ethod\022\032\n\022last_hit_timestamp\030\007 \001(\004\"Y\n\017url"
      "_http_method\022\014\n\010NON_HTTP\020\001\022\014\n\010HTTP_GET\020\002"
      "\022\014\n\010HTTP_PUT\020\003\022\r\n\tHTTP_POST\020\004\022\r\n\tHTTP_HE"
      "AD\020\005\"T\n\020iap_message_info\022\017\n\007version\030\001 \001("
      "\r\022\020\n\010sequence\030\003 \001(\004\022\014\n\004guid\030\004 \001(\014\022\017\n\007oem"
      "_tag\030\005 \001(\t\"\363\002\n\020air_monitor_info\022*\n\013monit"
      "or_mac\030\001 \001(\0132\025.ce.nbapi.mac_address\022\r\n\005e"
      "ssid\030\002 \001(\014\022\027\n\017monitor_channel\030\003 \001(\r\022\r\n\005i"
      "s_ap\030\004 \001(\r\022\033\n\023classification_type\030\005 \001(\r\022"
      "\020\n\010phy_type\030\006 \001(\r\022\017\n\007ht_type\030\007 \001(\r\022(\n\the"
      "ard_mac\030\010 \001(\0132\025.ce.nbapi.mac_address\022$\n\005"
      "bssid\030\t \001(\0132\025.ce.nbapi.mac_address\022\021\n\ten"
      "cr_type\030\n \001(\r\022\023\n\013encr_cipher\030\013 \001(\r\022\020\n\010au"
      "th_alg\030\014 \001(\r\0222\n\010am_rogue\030\r \001(\0132 .ce.nbap"
      "i.air_monitor_rogue_info\"\254\001\n\026air_monitor"
      "_rogue_info\022\022\n\nmatch_type\030\001 \001(\r\022(\n\tmatch"
      "_mac\030\002 \001(\0132\025.ce.nbapi.mac_address\022&\n\010mat"
      "ch_ip\030\003 \001(\0132\024.ce.nbapi.ip_address\022\024\n\014mon"
      "itor_name\030\004 \001(\t\022\026\n\016nat_match_type\030\005 \001(\r*"
      "S\n\tdata_prio\022\020\n\014DATA_PRIO_BK\020\000\022\020\n\014DATA_P"
      "RIO_BE\020\001\022\020\n\014DATA_PRIO_VI\020\002\022\020\n\014DATA_PRIO_"
      "VO\020\003*e\n\014traffic_type\022\033\n\027DATA_TRAFFIC_TYP"
      "E_BCAST\020\000\022\033\n\027DATA_TRAFFIC_TYPE_MCAST\020\001\022\033"
      "\n\027DATA_TRAFFIC_TYPE_UCAST\020\002*\201\002\n\007ht_type\022"
      "\014\n\010HTT_NONE\020\000\022\014\n\010HTT_20MZ\020\001\022\014\n\010HTT_40MZ\020"
      "\002\022\020\n\014HTT_VHT_20MZ\020\003\022\020\n\014HTT_VHT_40MZ\020\004\022\020\n"
      "\014HTT_VHT_80MZ\020\005\022\021\n\rHTT_VHT_160MZ\020\006\022\026\n\022HT"
      "T_VHT_80PLUS80MZ\020\007\022\017\n\013HTT_HE_20MZ\020\010\022\017\n\013H"
      "TT_HE_40MZ\020\t\022\017\n\013HTT_HE_80MZ\020\n\022\020\n\014HTT_HE_"
      "160MZ\020\013\022\025\n\021HTT_HE_80PLUS80MZ\020\014\022\017\n\013HTT_IN"
      "VALID\020\r*u\n\010phy_type\022\023\n\017PHY_TYPE_80211B\020\000"
      "\022\023\n\017PHY_TYPE_80211A\020\001\022\023\n\017PHY_TYPE_80211G"
      "\020\002\022\024\n\020PHY_TYPE_80211AG\020\003\022\024\n\020PHY_TYPE_INV"
      "ALID\020\004*4\n\020measurement_unit\022\n\n\006METERS\020\000\022\010"
      "\n\004FEET\020\001\022\n\n\006PIXELS\020\002*>\n\017vpn_tunnel_type\022"
      "\033\n\027ARUBA_CONTROLLER_TUNNEL\020\001\022\016\n\nVIG_TUNN"
      "EL\020\002*r\n\017target_dev_type\022\027\n\023TARGET_TYPE_U"
      "NKNOWN\020\000\022\027\n\023TARGET_TYPE_STATION\020\001\022\023\n\017TAR"
      "GET_TYPE_TAG\020\002\022\030\n\024TARGET_TYPE_UNSECURE\020\003"
      "*6\n\026iap_enforcement_status\022\016\n\nENF_PERMIT"
      "\020\001\022\014\n\010ENF_DENY\020\002B\025\n\023com.aruba.ale.proto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 24879);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace ce {
namespace nbapi {
const ::google::protobuf::EnumDescriptor* ip_address_addr_family_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[0];
}
bool ip_address_addr_family_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ip_address_addr_family ip_address::ADDR_FAMILY_UNSPEC;
const ip_address_addr_family ip_address::ADDR_FAMILY_INET;
const ip_address_addr_family ip_address::ADDR_FAMILY_INET6;
const ip_address_addr_family ip_address::addr_family_MIN;
const ip_address_addr_family ip_address::addr_family_MAX;
const int ip_address::addr_family_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ap_neighbor_network_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[1];
}
bool ap_neighbor_network_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ap_neighbor_network_type ap_neighbor::INFRASTRUCTURE;
const ap_neighbor_network_type ap_neighbor::ADHOC;
const ap_neighbor_network_type ap_neighbor::network_type_MIN;
const ap_neighbor_network_type ap_neighbor::network_type_MAX;
const int ap_neighbor::network_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* util_stats_util_stat_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[2];
}
bool util_stats_util_stat_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_CHANNEL;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_CHANNEL_TX;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_CHANNEL_RX;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_SWTX;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_BE;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_BK;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_VI;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_VO;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_BCMC;
const util_stats_util_stat_type util_stats::UTIL_STAT_TYPE_QUEUE_ATIM;
const util_stats_util_stat_type util_stats::util_stat_type_MIN;
const util_stats_util_stat_type util_stats::util_stat_type_MAX;
const int util_stats::util_stat_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* location_algorithm_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[3];
}
bool location_algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const location_algorithm location::ALGORITHM_TRIANGULATION;
const location_algorithm location::ALGORITHM_AP_PLACEMENT;
const location_algorithm location::ALGORITHM_CALIBRATION;
const location_algorithm location::ALGORITHM_ESTIMATION;
const location_algorithm location::ALGORITHM_LOW_DENSITY;
const location_algorithm location::algorithm_MIN;
const location_algorithm location::algorithm_MAX;
const int location::algorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* location_error_code_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[4];
}
bool location_error_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 8:
    case 16:
    case 1048575:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const location_error_code location::ERROR_CODE_NO_ERROR;
const location_error_code location::ERROR_CODE_0_RSSI;
const location_error_code location::ERROR_CODE_ONLY_1_RSSI;
const location_error_code location::ERROR_CODE_ONLY_2_RSSI;
const location_error_code location::ERROR_CODE_RSSI_QUALITY;
const location_error_code location::ERROR_CODE_RSSI_OLD_TIMESTAMP;
const location_error_code location::ERROR_CODE_RSSI_CLOSE_TIMESTAMP;
const location_error_code location::ERROR_CODE_LEGACY;
const location_error_code location::error_code_MIN;
const location_error_code location::error_code_MAX;
const int location::error_code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* access_point_deployment_mode_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[5];
}
bool access_point_deployment_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const access_point_deployment_mode access_point::DEPLOYMENT_MODE_CAMPUS;
const access_point_deployment_mode access_point::DEPLOYMENT_MODE_REMOTE;
const access_point_deployment_mode access_point::deployment_mode_MIN;
const access_point_deployment_mode access_point::deployment_mode_MAX;
const int access_point::deployment_mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* radio_radio_mode_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[6];
}
bool radio_radio_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const radio_radio_mode radio::RADIO_MODE_AP;
const radio_radio_mode radio::RADIO_MODE_MESH_PORTAL;
const radio_radio_mode radio::RADIO_MODE_MESH_POINT;
const radio_radio_mode radio::RADIO_MODE_AIR_MONITOR;
const radio_radio_mode radio::RADIO_MODE_SPECTRUM_SENSOR;
const radio_radio_mode radio::RADIO_MODE_UNKNOWN;
const radio_radio_mode radio::radio_mode_MIN;
const radio_radio_mode radio::radio_mode_MAX;
const int radio::radio_mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* visibility_rec_ip_protocol_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[7];
}
bool visibility_rec_ip_protocol_IsValid(int value) {
  switch (value) {
    case 6:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const visibility_rec_ip_protocol visibility_rec::IP_PROTOCOL_VAL_6;
const visibility_rec_ip_protocol visibility_rec::IP_PROTOCOL_VAL_17;
const visibility_rec_ip_protocol visibility_rec::ip_protocol_MIN;
const visibility_rec_ip_protocol visibility_rec::ip_protocol_MAX;
const int visibility_rec::ip_protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* visibility_rec_IapAppEnforcementStatus_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[8];
}
bool visibility_rec_IapAppEnforcementStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const visibility_rec_IapAppEnforcementStatus visibility_rec::ENF_PERMIT;
const visibility_rec_IapAppEnforcementStatus visibility_rec::ENF_DENY;
const visibility_rec_IapAppEnforcementStatus visibility_rec::IapAppEnforcementStatus_MIN;
const visibility_rec_IapAppEnforcementStatus visibility_rec::IapAppEnforcementStatus_MAX;
const int visibility_rec::IapAppEnforcementStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* geofence_notify_zone_event_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[9];
}
bool geofence_notify_zone_event_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const geofence_notify_zone_event geofence_notify::ZONE_IN;
const geofence_notify_zone_event geofence_notify::ZONE_OUT;
const geofence_notify_zone_event geofence_notify::zone_event_MIN;
const geofence_notify_zone_event geofence_notify::zone_event_MAX;
const int geofence_notify::zone_event_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* stats_radio_radio_mode_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[10];
}
bool stats_radio_radio_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const stats_radio_radio_mode stats_radio::RADIO_MODE_AP;
const stats_radio_radio_mode stats_radio::RADIO_MODE_MESH_PORTAL;
const stats_radio_radio_mode stats_radio::RADIO_MODE_MESH_POINT;
const stats_radio_radio_mode stats_radio::RADIO_MODE_AIR_MONITOR;
const stats_radio_radio_mode stats_radio::RADIO_MODE_SPECTRUM_SENSOR;
const stats_radio_radio_mode stats_radio::RADIO_MODE_UNKNOWN;
const stats_radio_radio_mode stats_radio::radio_mode_MIN;
const stats_radio_radio_mode stats_radio::radio_mode_MAX;
const int stats_radio::radio_mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* security_message_security_msg_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[11];
}
bool security_message_security_msg_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const security_message_security_msg_type security_message::AUTH_SRVR_TIMEOUT_MSG;
const security_message_security_msg_type security_message::MACAUTH_MSG;
const security_message_security_msg_type security_message::CAPTIVE_PORTAL_MSG;
const security_message_security_msg_type security_message::WPA_KEY_HANDSHAKE_MSG;
const security_message_security_msg_type security_message::DOT1X_MSG;
const security_message_security_msg_type security_message::UNKNOWN_MSG;
const security_message_security_msg_type security_message::security_msg_type_MIN;
const security_message_security_msg_type security_message::security_msg_type_MAX;
const int security_message::security_msg_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* info_mode_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[12];
}
bool info_mode_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const info_mode_type info::CONTEXT;
const info_mode_type info::CONTEXT_AND_LOCATION_WITH_CALIBRATION;
const info_mode_type info::CONTEXT_AND_ESTIMATED_LOCATION;
const info_mode_type info::mode_type_MIN;
const info_mode_type info::mode_type_MAX;
const int info::mode_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nb_event_event_operation_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[13];
}
bool nb_event_event_operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nb_event_event_operation nb_event::OP_ADD;
const nb_event_event_operation nb_event::OP_UPDATE;
const nb_event_event_operation nb_event::OP_DELETE;
const nb_event_event_operation nb_event::OP_SYNC;
const nb_event_event_operation nb_event::event_operation_MIN;
const nb_event_event_operation nb_event::event_operation_MAX;
const int nb_event::event_operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* nb_event_license_info_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[14];
}
bool nb_event_license_info_IsValid(int value) {
  switch (value) {
    case 10:
    case 11:
    case 20:
    case 21:
    case 31:
    case 41:
    case 51:
    case 61:
    case 71:
    case 81:
    case 91:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const nb_event_license_info nb_event::hb_Dhak;
const nb_event_license_info nb_event::hb_LimitOk;
const nb_event_license_info nb_event::hb_ThresholdXNotice;
const nb_event_license_info nb_event::hb_ThresholdOkNotice;
const nb_event_license_info nb_event::hb_LicenseExceeded;
const nb_event_license_info nb_event::hb_EvalStarted;
const nb_event_license_info nb_event::hb_NewLimitExceeded;
const nb_event_license_info nb_event::hb_EvalDone;
const nb_event_license_info nb_event::hb_ALSOnline;
const nb_event_license_info nb_event::hb_ALSDieing;
const nb_event_license_info nb_event::hb_LICENSE_BLOCKED;
const nb_event_license_info nb_event::license_info_MIN;
const nb_event_license_info nb_event::license_info_MAX;
const int nb_event::license_info_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* url_detail_record_url_http_method_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[15];
}
bool url_detail_record_url_http_method_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const url_detail_record_url_http_method url_detail_record::NON_HTTP;
const url_detail_record_url_http_method url_detail_record::HTTP_GET;
const url_detail_record_url_http_method url_detail_record::HTTP_PUT;
const url_detail_record_url_http_method url_detail_record::HTTP_POST;
const url_detail_record_url_http_method url_detail_record::HTTP_HEAD;
const url_detail_record_url_http_method url_detail_record::url_http_method_MIN;
const url_detail_record_url_http_method url_detail_record::url_http_method_MAX;
const int url_detail_record::url_http_method_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* data_prio_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[16];
}
bool data_prio_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* traffic_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[17];
}
bool traffic_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ht_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[18];
}
bool ht_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* phy_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[19];
}
bool phy_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* measurement_unit_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[20];
}
bool measurement_unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* vpn_tunnel_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[21];
}
bool vpn_tunnel_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* target_dev_type_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[22];
}
bool target_dev_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* iap_enforcement_status_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[23];
}
bool iap_enforcement_status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ip_address::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ip_address::kAfFieldNumber;
const int ip_address::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ip_address::ip_address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ip_address.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.ip_address)
}
ip_address::ip_address(const ip_address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  af_ = from.af_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.ip_address)
}

void ip_address::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_ = 0;
}

ip_address::~ip_address() {
  // @@protoc_insertion_point(destructor:ce.nbapi.ip_address)
  SharedDtor();
}

void ip_address::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ip_address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ip_address::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ip_address& ip_address::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ip_address.base);
  return *internal_default_instance();
}


void ip_address::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.ip_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmptyNoArena();
  }
  af_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ip_address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.ip_address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.ip_address.addr_family af = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::ip_address_addr_family_IsValid(value)) {
            set_af(static_cast< ::ce::nbapi::ip_address_addr_family >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.ip_address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.ip_address)
  return false;
#undef DO_
}

void ip_address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.ip_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ip_address.addr_family af = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->af(), output);
  }

  // required bytes addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.ip_address)
}

::google::protobuf::uint8* ip_address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.ip_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ip_address.addr_family af = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->af(), target);
  }

  // required bytes addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.ip_address)
  return target;
}

size_t ip_address::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ce.nbapi.ip_address)
  size_t total_size = 0;

  if (has_addr()) {
    // required bytes addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());
  }

  if (has_af()) {
    // required .ce.nbapi.ip_address.addr_family af = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->af());
  }

  return total_size;
}
size_t ip_address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.ip_address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());

    // required .ce.nbapi.ip_address.addr_family af = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->af());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ip_address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.ip_address)
  GOOGLE_DCHECK_NE(&from, this);
  const ip_address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ip_address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.ip_address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.ip_address)
    MergeFrom(*source);
  }
}

void ip_address::MergeFrom(const ip_address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.ip_address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      af_ = from.af_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ip_address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.ip_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ip_address::CopyFrom(const ip_address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.ip_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ip_address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ip_address::Swap(ip_address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ip_address::InternalSwap(ip_address* other) {
  using std::swap;
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(af_, other->af_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ip_address::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mac_address::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mac_address::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mac_address::mac_address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_mac_address.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.mac_address)
}
mac_address::mac_address(const mac_address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.mac_address)
}

void mac_address::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mac_address::~mac_address() {
  // @@protoc_insertion_point(destructor:ce.nbapi.mac_address)
  SharedDtor();
}

void mac_address::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mac_address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mac_address::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mac_address& mac_address::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_mac_address.base);
  return *internal_default_instance();
}


void mac_address::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.mac_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mac_address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.mac_address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.mac_address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.mac_address)
  return false;
#undef DO_
}

void mac_address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.mac_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.mac_address)
}

::google::protobuf::uint8* mac_address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.mac_address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.mac_address)
  return target;
}

size_t mac_address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.mac_address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes addr = 1;
  if (has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mac_address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.mac_address)
  GOOGLE_DCHECK_NE(&from, this);
  const mac_address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mac_address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.mac_address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.mac_address)
    MergeFrom(*source);
  }
}

void mac_address::MergeFrom(const mac_address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.mac_address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addr()) {
    set_has_addr();
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void mac_address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.mac_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mac_address::CopyFrom(const mac_address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.mac_address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mac_address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void mac_address::Swap(mac_address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mac_address::InternalSwap(mac_address* other) {
  using std::swap;
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mac_address::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void data_rate_stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int data_rate_stats::kRateFieldNumber;
const int data_rate_stats::kTxFrameCountFieldNumber;
const int data_rate_stats::kTxByteCountFieldNumber;
const int data_rate_stats::kRxFrameCountFieldNumber;
const int data_rate_stats::kRxByteCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

data_rate_stats::data_rate_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_data_rate_stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.data_rate_stats)
}
data_rate_stats::data_rate_stats(const data_rate_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rate_, &from.rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&rx_byte_count_) -
    reinterpret_cast<char*>(&rate_)) + sizeof(rx_byte_count_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.data_rate_stats)
}

void data_rate_stats::SharedCtor() {
  ::memset(&rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_byte_count_) -
      reinterpret_cast<char*>(&rate_)) + sizeof(rx_byte_count_));
}

data_rate_stats::~data_rate_stats() {
  // @@protoc_insertion_point(destructor:ce.nbapi.data_rate_stats)
  SharedDtor();
}

void data_rate_stats::SharedDtor() {
}

void data_rate_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* data_rate_stats::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const data_rate_stats& data_rate_stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_data_rate_stats.base);
  return *internal_default_instance();
}


void data_rate_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.data_rate_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rx_byte_count_) -
        reinterpret_cast<char*>(&rate_)) + sizeof(rx_byte_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool data_rate_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.data_rate_stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_byte_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tx_byte_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_byte_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frame_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_byte_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rx_byte_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_byte_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.data_rate_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.data_rate_stats)
  return false;
#undef DO_
}

void data_rate_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.data_rate_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rate(), output);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx_frame_count(), output);
  }

  // optional uint32 tx_byte_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tx_byte_count(), output);
  }

  // optional uint32 rx_frame_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rx_frame_count(), output);
  }

  // optional uint32 rx_byte_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rx_byte_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.data_rate_stats)
}

::google::protobuf::uint8* data_rate_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.data_rate_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rate(), target);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx_frame_count(), target);
  }

  // optional uint32 tx_byte_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tx_byte_count(), target);
  }

  // optional uint32 rx_frame_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rx_frame_count(), target);
  }

  // optional uint32 rx_byte_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rx_byte_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.data_rate_stats)
  return target;
}

size_t data_rate_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.data_rate_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // optional uint32 tx_frame_count = 2;
    if (has_tx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_frame_count());
    }

    // optional uint32 tx_byte_count = 3;
    if (has_tx_byte_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_byte_count());
    }

    // optional uint32 rx_frame_count = 4;
    if (has_rx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frame_count());
    }

    // optional uint32 rx_byte_count = 5;
    if (has_rx_byte_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_byte_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void data_rate_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.data_rate_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const data_rate_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const data_rate_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.data_rate_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.data_rate_stats)
    MergeFrom(*source);
  }
}

void data_rate_stats::MergeFrom(const data_rate_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.data_rate_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      rate_ = from.rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      tx_frame_count_ = from.tx_frame_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      tx_byte_count_ = from.tx_byte_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      rx_frame_count_ = from.rx_frame_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      rx_byte_count_ = from.rx_byte_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void data_rate_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.data_rate_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_rate_stats::CopyFrom(const data_rate_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.data_rate_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_rate_stats::IsInitialized() const {
  return true;
}

void data_rate_stats::Swap(data_rate_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void data_rate_stats::InternalSwap(data_rate_stats* other) {
  using std::swap;
  swap(rate_, other->rate_);
  swap(tx_frame_count_, other->tx_frame_count_);
  swap(tx_byte_count_, other->tx_byte_count_);
  swap(rx_frame_count_, other->rx_frame_count_);
  swap(rx_byte_count_, other->rx_byte_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata data_rate_stats::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void data_prio_stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int data_prio_stats::kPrioFieldNumber;
const int data_prio_stats::kTxFrameCountFieldNumber;
const int data_prio_stats::kRxFrameCountFieldNumber;
const int data_prio_stats::kTxDropCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

data_prio_stats::data_prio_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_data_prio_stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.data_prio_stats)
}
data_prio_stats::data_prio_stats(const data_prio_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prio_, &from.prio_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_drop_count_) -
    reinterpret_cast<char*>(&prio_)) + sizeof(tx_drop_count_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.data_prio_stats)
}

void data_prio_stats::SharedCtor() {
  ::memset(&prio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_drop_count_) -
      reinterpret_cast<char*>(&prio_)) + sizeof(tx_drop_count_));
}

data_prio_stats::~data_prio_stats() {
  // @@protoc_insertion_point(destructor:ce.nbapi.data_prio_stats)
  SharedDtor();
}

void data_prio_stats::SharedDtor() {
}

void data_prio_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* data_prio_stats::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const data_prio_stats& data_prio_stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_data_prio_stats.base);
  return *internal_default_instance();
}


void data_prio_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.data_prio_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&prio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_drop_count_) -
        reinterpret_cast<char*>(&prio_)) + sizeof(tx_drop_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool data_prio_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.data_prio_stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.data_prio prio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::data_prio_IsValid(value)) {
            set_prio(static_cast< ::ce::nbapi::data_prio >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frame_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_drop_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tx_drop_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_drop_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.data_prio_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.data_prio_stats)
  return false;
#undef DO_
}

void data_prio_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.data_prio_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.data_prio prio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->prio(), output);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx_frame_count(), output);
  }

  // optional uint32 rx_frame_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx_frame_count(), output);
  }

  // optional uint32 tx_drop_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tx_drop_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.data_prio_stats)
}

::google::protobuf::uint8* data_prio_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.data_prio_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.data_prio prio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->prio(), target);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx_frame_count(), target);
  }

  // optional uint32 rx_frame_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx_frame_count(), target);
  }

  // optional uint32 tx_drop_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tx_drop_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.data_prio_stats)
  return target;
}

size_t data_prio_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.data_prio_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .ce.nbapi.data_prio prio = 1;
    if (has_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prio());
    }

    // optional uint32 tx_frame_count = 2;
    if (has_tx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_frame_count());
    }

    // optional uint32 rx_frame_count = 3;
    if (has_rx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frame_count());
    }

    // optional uint32 tx_drop_count = 4;
    if (has_tx_drop_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_drop_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void data_prio_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.data_prio_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const data_prio_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const data_prio_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.data_prio_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.data_prio_stats)
    MergeFrom(*source);
  }
}

void data_prio_stats::MergeFrom(const data_prio_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.data_prio_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      prio_ = from.prio_;
    }
    if (cached_has_bits & 0x00000002u) {
      tx_frame_count_ = from.tx_frame_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      rx_frame_count_ = from.rx_frame_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_drop_count_ = from.tx_drop_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void data_prio_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.data_prio_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_prio_stats::CopyFrom(const data_prio_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.data_prio_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_prio_stats::IsInitialized() const {
  return true;
}

void data_prio_stats::Swap(data_prio_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void data_prio_stats::InternalSwap(data_prio_stats* other) {
  using std::swap;
  swap(prio_, other->prio_);
  swap(tx_frame_count_, other->tx_frame_count_);
  swap(rx_frame_count_, other->rx_frame_count_);
  swap(tx_drop_count_, other->tx_drop_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata data_prio_stats::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void data_traffic_type_stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int data_traffic_type_stats::kTypeFieldNumber;
const int data_traffic_type_stats::kTxFrameCountFieldNumber;
const int data_traffic_type_stats::kRxFrameCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

data_traffic_type_stats::data_traffic_type_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_data_traffic_type_stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.data_traffic_type_stats)
}
data_traffic_type_stats::data_traffic_type_stats(const data_traffic_type_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rx_frame_count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(rx_frame_count_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.data_traffic_type_stats)
}

void data_traffic_type_stats::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_frame_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(rx_frame_count_));
}

data_traffic_type_stats::~data_traffic_type_stats() {
  // @@protoc_insertion_point(destructor:ce.nbapi.data_traffic_type_stats)
  SharedDtor();
}

void data_traffic_type_stats::SharedDtor() {
}

void data_traffic_type_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* data_traffic_type_stats::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const data_traffic_type_stats& data_traffic_type_stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_data_traffic_type_stats.base);
  return *internal_default_instance();
}


void data_traffic_type_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.data_traffic_type_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rx_frame_count_) -
        reinterpret_cast<char*>(&type_)) + sizeof(rx_frame_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool data_traffic_type_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.data_traffic_type_stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.traffic_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::traffic_type_IsValid(value)) {
            set_type(static_cast< ::ce::nbapi::traffic_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frame_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rx_frame_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.data_traffic_type_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.data_traffic_type_stats)
  return false;
#undef DO_
}

void data_traffic_type_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.data_traffic_type_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.traffic_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx_frame_count(), output);
  }

  // optional uint32 rx_frame_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx_frame_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.data_traffic_type_stats)
}

::google::protobuf::uint8* data_traffic_type_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.data_traffic_type_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.traffic_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 tx_frame_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx_frame_count(), target);
  }

  // optional uint32 rx_frame_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx_frame_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.data_traffic_type_stats)
  return target;
}

size_t data_traffic_type_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.data_traffic_type_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.traffic_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 tx_frame_count = 2;
    if (has_tx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_frame_count());
    }

    // optional uint32 rx_frame_count = 3;
    if (has_rx_frame_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frame_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void data_traffic_type_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.data_traffic_type_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const data_traffic_type_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const data_traffic_type_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.data_traffic_type_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.data_traffic_type_stats)
    MergeFrom(*source);
  }
}

void data_traffic_type_stats::MergeFrom(const data_traffic_type_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.data_traffic_type_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      tx_frame_count_ = from.tx_frame_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      rx_frame_count_ = from.rx_frame_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void data_traffic_type_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.data_traffic_type_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void data_traffic_type_stats::CopyFrom(const data_traffic_type_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.data_traffic_type_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool data_traffic_type_stats::IsInitialized() const {
  return true;
}

void data_traffic_type_stats::Swap(data_traffic_type_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void data_traffic_type_stats::InternalSwap(data_traffic_type_stats* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(tx_frame_count_, other->tx_frame_count_);
  swap(rx_frame_count_, other->rx_frame_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata data_traffic_type_stats::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ap_neighbor::InitAsDefaultInstance() {
  ::ce::nbapi::_ap_neighbor_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_ap_neighbor_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_ap_neighbor_default_instance_._instance.get_mutable()->neighbor_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ap_neighbor::kApEthMacFieldNumber;
const int ap_neighbor::kBssidFieldNumber;
const int ap_neighbor::kPhyFieldNumber;
const int ap_neighbor::kNeighborBssidFieldNumber;
const int ap_neighbor::kNeighborSsidFieldNumber;
const int ap_neighbor::kNeighborNetworkFieldNumber;
const int ap_neighbor::kNeighborChannelFieldNumber;
const int ap_neighbor::kNeighborRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ap_neighbor::ap_neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ap_neighbor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.ap_neighbor)
}
ap_neighbor::ap_neighbor(const ap_neighbor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neighbor_ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_neighbor_ssid()) {
    neighbor_ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_ssid_);
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_neighbor_bssid()) {
    neighbor_bssid_ = new ::ce::nbapi::mac_address(*from.neighbor_bssid_);
  } else {
    neighbor_bssid_ = NULL;
  }
  ::memcpy(&phy_, &from.phy_,
    static_cast<size_t>(reinterpret_cast<char*>(&neighbor_rssi_) -
    reinterpret_cast<char*>(&phy_)) + sizeof(neighbor_rssi_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.ap_neighbor)
}

void ap_neighbor::SharedCtor() {
  neighbor_ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neighbor_rssi_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(neighbor_rssi_));
}

ap_neighbor::~ap_neighbor() {
  // @@protoc_insertion_point(destructor:ce.nbapi.ap_neighbor)
  SharedDtor();
}

void ap_neighbor::SharedDtor() {
  neighbor_ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete neighbor_bssid_;
}

void ap_neighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ap_neighbor::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ap_neighbor& ap_neighbor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ap_neighbor.base);
  return *internal_default_instance();
}


void ap_neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.ap_neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      neighbor_ssid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(neighbor_bssid_ != NULL);
      neighbor_bssid_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&phy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&neighbor_rssi_) -
        reinterpret_cast<char*>(&phy_)) + sizeof(neighbor_rssi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ap_neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.ap_neighbor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.phy_type phy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::phy_type_IsValid(value)) {
            set_phy(static_cast< ::ce::nbapi::phy_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address neighbor_bssid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string neighbor_ssid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_ssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->neighbor_ssid().data(), static_cast<int>(this->neighbor_ssid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.ap_neighbor.neighbor_ssid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ap_neighbor.network_type neighbor_network = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::ap_neighbor_network_type_IsValid(value)) {
            set_neighbor_network(static_cast< ::ce::nbapi::ap_neighbor_network_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neighbor_channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_neighbor_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighbor_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neighbor_rssi = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_neighbor_rssi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighbor_rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.ap_neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.ap_neighbor)
  return false;
#undef DO_
}

void ap_neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.ap_neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bssid(), output);
  }

  // optional .ce.nbapi.phy_type phy = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phy(), output);
  }

  // optional .ce.nbapi.mac_address neighbor_bssid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_neighbor_bssid(), output);
  }

  // optional string neighbor_ssid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neighbor_ssid().data(), static_cast<int>(this->neighbor_ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.ap_neighbor.neighbor_ssid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->neighbor_ssid(), output);
  }

  // optional .ce.nbapi.ap_neighbor.network_type neighbor_network = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->neighbor_network(), output);
  }

  // optional uint32 neighbor_channel = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->neighbor_channel(), output);
  }

  // optional uint32 neighbor_rssi = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->neighbor_rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.ap_neighbor)
}

::google::protobuf::uint8* ap_neighbor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.ap_neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bssid(), deterministic, target);
  }

  // optional .ce.nbapi.phy_type phy = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phy(), target);
  }

  // optional .ce.nbapi.mac_address neighbor_bssid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_neighbor_bssid(), deterministic, target);
  }

  // optional string neighbor_ssid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->neighbor_ssid().data(), static_cast<int>(this->neighbor_ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.ap_neighbor.neighbor_ssid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->neighbor_ssid(), target);
  }

  // optional .ce.nbapi.ap_neighbor.network_type neighbor_network = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->neighbor_network(), target);
  }

  // optional uint32 neighbor_channel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->neighbor_channel(), target);
  }

  // optional uint32 neighbor_rssi = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->neighbor_rssi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.ap_neighbor)
  return target;
}

size_t ap_neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.ap_neighbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string neighbor_ssid = 5;
    if (has_neighbor_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->neighbor_ssid());
    }

    // optional .ce.nbapi.mac_address ap_eth_mac = 1;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 2;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.mac_address neighbor_bssid = 4;
    if (has_neighbor_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *neighbor_bssid_);
    }

    // optional .ce.nbapi.phy_type phy = 3;
    if (has_phy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phy());
    }

    // optional .ce.nbapi.ap_neighbor.network_type neighbor_network = 6;
    if (has_neighbor_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->neighbor_network());
    }

    // optional uint32 neighbor_channel = 7;
    if (has_neighbor_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighbor_channel());
    }

    // optional uint32 neighbor_rssi = 10;
    if (has_neighbor_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighbor_rssi());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ap_neighbor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.ap_neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const ap_neighbor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ap_neighbor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.ap_neighbor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.ap_neighbor)
    MergeFrom(*source);
  }
}

void ap_neighbor::MergeFrom(const ap_neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.ap_neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_neighbor_ssid();
      neighbor_ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_ssid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_neighbor_bssid()->::ce::nbapi::mac_address::MergeFrom(from.neighbor_bssid());
    }
    if (cached_has_bits & 0x00000010u) {
      phy_ = from.phy_;
    }
    if (cached_has_bits & 0x00000020u) {
      neighbor_network_ = from.neighbor_network_;
    }
    if (cached_has_bits & 0x00000040u) {
      neighbor_channel_ = from.neighbor_channel_;
    }
    if (cached_has_bits & 0x00000080u) {
      neighbor_rssi_ = from.neighbor_rssi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ap_neighbor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.ap_neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ap_neighbor::CopyFrom(const ap_neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.ap_neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ap_neighbor::IsInitialized() const {
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_neighbor_bssid()) {
    if (!this->neighbor_bssid_->IsInitialized()) return false;
  }
  return true;
}

void ap_neighbor::Swap(ap_neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ap_neighbor::InternalSwap(ap_neighbor* other) {
  using std::swap;
  neighbor_ssid_.Swap(&other->neighbor_ssid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(bssid_, other->bssid_);
  swap(neighbor_bssid_, other->neighbor_bssid_);
  swap(phy_, other->phy_);
  swap(neighbor_network_, other->neighbor_network_);
  swap(neighbor_channel_, other->neighbor_channel_);
  swap(neighbor_rssi_, other->neighbor_rssi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ap_neighbor::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void util_stats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int util_stats::kTypeFieldNumber;
const int util_stats::kBucket1FieldNumber;
const int util_stats::kBucket2FieldNumber;
const int util_stats::kBucket3FieldNumber;
const int util_stats::kBucket4FieldNumber;
const int util_stats::kBucket5FieldNumber;
const int util_stats::kMaxFieldNumber;
const int util_stats::kMinFieldNumber;
const int util_stats::kCurrFieldNumber;
const int util_stats::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

util_stats::util_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_util_stats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.util_stats)
}
util_stats::util_stats(const util_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&curr_) -
    reinterpret_cast<char*>(&type_)) + sizeof(curr_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.util_stats)
}

void util_stats::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curr_) -
      reinterpret_cast<char*>(&type_)) + sizeof(curr_));
}

util_stats::~util_stats() {
  // @@protoc_insertion_point(destructor:ce.nbapi.util_stats)
  SharedDtor();
}

void util_stats::SharedDtor() {
}

void util_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* util_stats::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const util_stats& util_stats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_util_stats.base);
  return *internal_default_instance();
}


void util_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.util_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_) -
        reinterpret_cast<char*>(&type_)) + sizeof(min_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curr_) -
        reinterpret_cast<char*>(&stat_)) + sizeof(curr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool util_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.util_stats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.util_stats.util_stat_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::util_stats_util_stat_type_IsValid(value)) {
            set_type(static_cast< ::ce::nbapi::util_stats_util_stat_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bucket1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bucket1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bucket2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bucket2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bucket3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bucket3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bucket4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bucket4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bucket5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_bucket5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 curr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_curr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 stat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.util_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.util_stats)
  return false;
#undef DO_
}

void util_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.util_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.util_stats.util_stat_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 bucket1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bucket1(), output);
  }

  // optional uint32 bucket2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bucket2(), output);
  }

  // optional uint32 bucket3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bucket3(), output);
  }

  // optional uint32 bucket4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bucket4(), output);
  }

  // optional uint32 bucket5 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bucket5(), output);
  }

  // optional uint32 max = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max(), output);
  }

  // optional uint32 min = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->min(), output);
  }

  // optional uint32 curr = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curr(), output);
  }

  // optional uint64 stat = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->stat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.util_stats)
}

::google::protobuf::uint8* util_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.util_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.util_stats.util_stat_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 bucket1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bucket1(), target);
  }

  // optional uint32 bucket2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bucket2(), target);
  }

  // optional uint32 bucket3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bucket3(), target);
  }

  // optional uint32 bucket4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bucket4(), target);
  }

  // optional uint32 bucket5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bucket5(), target);
  }

  // optional uint32 max = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max(), target);
  }

  // optional uint32 min = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->min(), target);
  }

  // optional uint32 curr = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curr(), target);
  }

  // optional uint64 stat = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->stat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.util_stats)
  return target;
}

size_t util_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.util_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.util_stats.util_stat_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 bucket1 = 2;
    if (has_bucket1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket1());
    }

    // optional uint32 bucket2 = 3;
    if (has_bucket2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket2());
    }

    // optional uint32 bucket3 = 4;
    if (has_bucket3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket3());
    }

    // optional uint32 bucket4 = 5;
    if (has_bucket4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket4());
    }

    // optional uint32 bucket5 = 6;
    if (has_bucket5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bucket5());
    }

    // optional uint32 max = 7;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 min = 8;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint64 stat = 10;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stat());
    }

    // optional uint32 curr = 9;
    if (has_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void util_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.util_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const util_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const util_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.util_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.util_stats)
    MergeFrom(*source);
  }
}

void util_stats::MergeFrom(const util_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.util_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      bucket1_ = from.bucket1_;
    }
    if (cached_has_bits & 0x00000004u) {
      bucket2_ = from.bucket2_;
    }
    if (cached_has_bits & 0x00000008u) {
      bucket3_ = from.bucket3_;
    }
    if (cached_has_bits & 0x00000010u) {
      bucket4_ = from.bucket4_;
    }
    if (cached_has_bits & 0x00000020u) {
      bucket5_ = from.bucket5_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_ = from.min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      stat_ = from.stat_;
    }
    if (cached_has_bits & 0x00000200u) {
      curr_ = from.curr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void util_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.util_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void util_stats::CopyFrom(const util_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.util_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool util_stats::IsInitialized() const {
  return true;
}

void util_stats::Swap(util_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void util_stats::InternalSwap(util_stats* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(bucket1_, other->bucket1_);
  swap(bucket2_, other->bucket2_);
  swap(bucket3_, other->bucket3_);
  swap(bucket4_, other->bucket4_);
  swap(bucket5_, other->bucket5_);
  swap(max_, other->max_);
  swap(min_, other->min_);
  swap(stat_, other->stat_);
  swap(curr_, other->curr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata util_stats::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void location_record::InitAsDefaultInstance() {
  ::ce::nbapi::_location_record_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location_record::kTimestampFieldNumber;
const int location_record::kRadioMacFieldNumber;
const int location_record::kRssiValFieldNumber;
const int location_record::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location_record::location_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_location_record.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.location.record)
}
location_record::location_record(const location_record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.location.record)
}

void location_record::SharedCtor() {
  ::memset(&radio_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&radio_mac_)) + sizeof(channel_));
}

location_record::~location_record() {
  // @@protoc_insertion_point(destructor:ce.nbapi.location.record)
  SharedDtor();
}

void location_record::SharedDtor() {
  if (this != internal_default_instance()) delete radio_mac_;
}

void location_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* location_record::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const location_record& location_record::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_location_record.base);
  return *internal_default_instance();
}


void location_record::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.location.record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(radio_mac_ != NULL);
    radio_mac_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool location_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.location.record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ce.nbapi.mac_address radio_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rssi_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.location.record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.location.record)
  return false;
#undef DO_
}

void location_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.location.record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // required .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_mac(), output);
  }

  // required int32 rssi_val = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rssi_val(), output);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.location.record)
}

::google::protobuf::uint8* location_record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.location.record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // required .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_mac(), deterministic, target);
  }

  // required int32 rssi_val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rssi_val(), target);
  }

  // optional uint32 channel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.location.record)
  return target;
}

size_t location_record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ce.nbapi.location.record)
  size_t total_size = 0;

  if (has_radio_mac()) {
    // required .ce.nbapi.mac_address radio_mac = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *radio_mac_);
  }

  if (has_timestamp()) {
    // required uint32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  if (has_rssi_val()) {
    // required int32 rssi_val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rssi_val());
  }

  return total_size;
}
size_t location_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.location.record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ce.nbapi.mac_address radio_mac = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *radio_mac_);

    // required uint32 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());

    // required int32 rssi_val = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rssi_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 channel = 4;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.location.record)
  GOOGLE_DCHECK_NE(&from, this);
  const location_record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const location_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.location.record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.location.record)
    MergeFrom(*source);
  }
}

void location_record::MergeFrom(const location_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.location.record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void location_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.location.record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_record::CopyFrom(const location_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.location.record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void location_record::Swap(location_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location_record::InternalSwap(location_record* other) {
  using std::swap;
  swap(radio_mac_, other->radio_mac_);
  swap(timestamp_, other->timestamp_);
  swap(rssi_val_, other->rssi_val_);
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata location_record::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void location_rtls_tag::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location_rtls_tag::kBatteryFieldNumber;
const int location_rtls_tag::kChannelFieldNumber;
const int location_rtls_tag::kTxPowerFieldNumber;
const int location_rtls_tag::kDataRateFieldNumber;
const int location_rtls_tag::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location_rtls_tag::location_rtls_tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_location_rtls_tag.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.location.rtls_tag)
}
location_rtls_tag::location_rtls_tag(const location_rtls_tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&battery_, &from.battery_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_rate_) -
    reinterpret_cast<char*>(&battery_)) + sizeof(data_rate_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.location.rtls_tag)
}

void location_rtls_tag::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&battery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_rate_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(data_rate_));
}

location_rtls_tag::~location_rtls_tag() {
  // @@protoc_insertion_point(destructor:ce.nbapi.location.rtls_tag)
  SharedDtor();
}

void location_rtls_tag::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void location_rtls_tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* location_rtls_tag::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const location_rtls_tag& location_rtls_tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_location_rtls_tag.base);
  return *internal_default_instance();
}


void location_rtls_tag::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.location.rtls_tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&battery_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_rate_) -
        reinterpret_cast<char*>(&battery_)) + sizeof(data_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool location_rtls_tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.location.rtls_tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battery = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_battery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_power = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tx_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_data_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.location.rtls_tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.location.rtls_tag)
  return false;
#undef DO_
}

void location_rtls_tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.location.rtls_tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battery = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battery(), output);
  }

  // optional uint32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // optional uint32 tx_power = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tx_power(), output);
  }

  // optional uint32 data_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_rate(), output);
  }

  // optional bytes payload = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.location.rtls_tag)
}

::google::protobuf::uint8* location_rtls_tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.location.rtls_tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battery = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battery(), target);
  }

  // optional uint32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // optional uint32 tx_power = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tx_power(), target);
  }

  // optional uint32 data_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data_rate(), target);
  }

  // optional bytes payload = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.location.rtls_tag)
  return target;
}

size_t location_rtls_tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.location.rtls_tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes payload = 5;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional uint32 battery = 1;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battery());
    }

    // optional uint32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 tx_power = 3;
    if (has_tx_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_power());
    }

    // optional uint32 data_rate = 4;
    if (has_data_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_rate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location_rtls_tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.location.rtls_tag)
  GOOGLE_DCHECK_NE(&from, this);
  const location_rtls_tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const location_rtls_tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.location.rtls_tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.location.rtls_tag)
    MergeFrom(*source);
  }
}

void location_rtls_tag::MergeFrom(const location_rtls_tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.location.rtls_tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      battery_ = from.battery_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_power_ = from.tx_power_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_rate_ = from.data_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void location_rtls_tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.location.rtls_tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location_rtls_tag::CopyFrom(const location_rtls_tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.location.rtls_tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location_rtls_tag::IsInitialized() const {
  return true;
}

void location_rtls_tag::Swap(location_rtls_tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location_rtls_tag::InternalSwap(location_rtls_tag* other) {
  using std::swap;
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(battery_, other->battery_);
  swap(channel_, other->channel_);
  swap(tx_power_, other->tx_power_);
  swap(data_rate_, other->data_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata location_rtls_tag::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void location::InitAsDefaultInstance() {
  ::ce::nbapi::_location_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int location::kStaEthMacFieldNumber;
const int location::kStaLocationXFieldNumber;
const int location::kStaLocationYFieldNumber;
const int location::kErrorLevelFieldNumber;
const int location::kAssociatedFieldNumber;
const int location::kCampusIdFieldNumber;
const int location::kBuildingIdFieldNumber;
const int location::kFloorIdFieldNumber;
const int location::kHashedStaEthMacFieldNumber;
const int location::kGeofenceIdsFieldNumber;
const int location::kLocAlgorithmFieldNumber;
const int location::kRssiValFieldNumber;
const int location::kLongitudeFieldNumber;
const int location::kLatitudeFieldNumber;
const int location::kAltitudeFieldNumber;
const int location::kUnitFieldNumber;
const int location::kTargetTypeFieldNumber;
const int location::kErrCodeFieldNumber;
const int location::kRecordsFieldNumber;
const int location::kGeofenceNamesFieldNumber;
const int location::kRtlsTagInfoFieldNumber;
const int location::kLocationComputeTimestampFieldNumber;
const int location::kAssociatedToValidBssidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

location::location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_location.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.location)
}
location::location(const location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      geofence_ids_(from.geofence_ids_),
      records_(from.records_),
      geofence_names_(from.geofence_names_),
      rtls_tag_info_(from.rtls_tag_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_campus_id()) {
    campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
  }
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_building_id()) {
    building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
  }
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_id()) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  ::memcpy(&sta_location_x_, &from.sta_location_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_type_) -
    reinterpret_cast<char*>(&sta_location_x_)) + sizeof(target_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.location)
}

void location::SharedCtor() {
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_compute_timestamp_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(location_compute_timestamp_));
  target_type_ = 1;
}

location::~location() {
  // @@protoc_insertion_point(destructor:ce.nbapi.location)
  SharedDtor();
}

void location::SharedDtor() {
  campus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
}

void location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* location::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const location& location::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_location.base);
  return *internal_default_instance();
}


void location::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geofence_ids_.Clear();
  records_.Clear();
  geofence_names_.Clear();
  rtls_tag_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      campus_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      building_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      floor_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&sta_location_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_level_) -
        reinterpret_cast<char*>(&sta_location_x_)) + sizeof(error_level_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&loc_algorithm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&loc_algorithm_)) + sizeof(unit_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&err_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&location_compute_timestamp_) -
        reinterpret_cast<char*>(&err_code_)) + sizeof(location_compute_timestamp_));
    target_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sta_location_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_sta_location_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sta_location_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sta_location_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_sta_location_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sta_location_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 error_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_error_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_associated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes campus_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_campus_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes building_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_building_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes floor_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_floor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes geofence_ids = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_geofence_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.location.algorithm loc_algorithm = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::location_algorithm_IsValid(value)) {
            set_loc_algorithm(static_cast< ::ce::nbapi::location_algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rssi_val = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.measurement_unit unit = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::measurement_unit_IsValid(value)) {
            set_unit(static_cast< ::ce::nbapi::measurement_unit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.target_dev_type target_type = 20 [default = TARGET_TYPE_STATION];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::target_dev_type_IsValid(value)) {
            set_target_type(static_cast< ::ce::nbapi::target_dev_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.location.error_code err_code = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::location_error_code_IsValid(value)) {
            set_err_code(static_cast< ::ce::nbapi::location_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.location.record records = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string geofence_names = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_geofence_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geofence_names(this->geofence_names_size() - 1).data(),
            static_cast<int>(this->geofence_names(this->geofence_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.location.geofence_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.location.rtls_tag rtls_tag_info = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rtls_tag_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 location_compute_timestamp = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_location_compute_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_compute_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated_to_valid_bssid = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_associated_to_valid_bssid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_to_valid_bssid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.location)
  return false;
#undef DO_
}

void location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional float sta_location_x = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sta_location_x(), output);
  }

  // optional float sta_location_y = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sta_location_y(), output);
  }

  // optional uint32 error_level = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->error_level(), output);
  }

  // optional bool associated = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->associated(), output);
  }

  // optional bytes campus_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->campus_id(), output);
  }

  // optional bytes building_id = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->building_id(), output);
  }

  // optional bytes floor_id = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->floor_id(), output);
  }

  // optional bytes hashed_sta_eth_mac = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->hashed_sta_eth_mac(), output);
  }

  // repeated bytes geofence_ids = 13;
  for (int i = 0, n = this->geofence_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->geofence_ids(i), output);
  }

  // optional .ce.nbapi.location.algorithm loc_algorithm = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->loc_algorithm(), output);
  }

  // optional uint32 rssi_val = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rssi_val(), output);
  }

  // optional double longitude = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->longitude(), output);
  }

  // optional double latitude = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->latitude(), output);
  }

  // optional double altitude = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->altitude(), output);
  }

  // optional .ce.nbapi.measurement_unit unit = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->unit(), output);
  }

  // optional .ce.nbapi.target_dev_type target_type = 20 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->target_type(), output);
  }

  // optional .ce.nbapi.location.error_code err_code = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->err_code(), output);
  }

  // repeated .ce.nbapi.location.record records = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->records(static_cast<int>(i)),
      output);
  }

  // repeated string geofence_names = 23;
  for (int i = 0, n = this->geofence_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_names(i).data(), static_cast<int>(this->geofence_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.location.geofence_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->geofence_names(i), output);
  }

  // repeated .ce.nbapi.location.rtls_tag rtls_tag_info = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtls_tag_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->rtls_tag_info(static_cast<int>(i)),
      output);
  }

  // optional uint32 location_compute_timestamp = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->location_compute_timestamp(), output);
  }

  // optional bool associated_to_valid_bssid = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->associated_to_valid_bssid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.location)
}

::google::protobuf::uint8* location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional float sta_location_x = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sta_location_x(), target);
  }

  // optional float sta_location_y = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sta_location_y(), target);
  }

  // optional uint32 error_level = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->error_level(), target);
  }

  // optional bool associated = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->associated(), target);
  }

  // optional bytes campus_id = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->campus_id(), target);
  }

  // optional bytes building_id = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->building_id(), target);
  }

  // optional bytes floor_id = 11;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->floor_id(), target);
  }

  // optional bytes hashed_sta_eth_mac = 12;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->hashed_sta_eth_mac(), target);
  }

  // repeated bytes geofence_ids = 13;
  for (int i = 0, n = this->geofence_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(13, this->geofence_ids(i), target);
  }

  // optional .ce.nbapi.location.algorithm loc_algorithm = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->loc_algorithm(), target);
  }

  // optional uint32 rssi_val = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rssi_val(), target);
  }

  // optional double longitude = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->longitude(), target);
  }

  // optional double latitude = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->latitude(), target);
  }

  // optional double altitude = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->altitude(), target);
  }

  // optional .ce.nbapi.measurement_unit unit = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->unit(), target);
  }

  // optional .ce.nbapi.target_dev_type target_type = 20 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->target_type(), target);
  }

  // optional .ce.nbapi.location.error_code err_code = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->err_code(), target);
  }

  // repeated .ce.nbapi.location.record records = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->records(static_cast<int>(i)), deterministic, target);
  }

  // repeated string geofence_names = 23;
  for (int i = 0, n = this->geofence_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_names(i).data(), static_cast<int>(this->geofence_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.location.geofence_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->geofence_names(i), target);
  }

  // repeated .ce.nbapi.location.rtls_tag rtls_tag_info = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtls_tag_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->rtls_tag_info(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 location_compute_timestamp = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->location_compute_timestamp(), target);
  }

  // optional bool associated_to_valid_bssid = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->associated_to_valid_bssid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.location)
  return target;
}

size_t location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes geofence_ids = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->geofence_ids_size());
  for (int i = 0, n = this->geofence_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->geofence_ids(i));
  }

  // repeated .ce.nbapi.location.record records = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->records_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->records(static_cast<int>(i)));
    }
  }

  // repeated string geofence_names = 23;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->geofence_names_size());
  for (int i = 0, n = this->geofence_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->geofence_names(i));
  }

  // repeated .ce.nbapi.location.rtls_tag rtls_tag_info = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->rtls_tag_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rtls_tag_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes campus_id = 9;
    if (has_campus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->campus_id());
    }

    // optional bytes building_id = 10;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->building_id());
    }

    // optional bytes floor_id = 11;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->floor_id());
    }

    // optional bytes hashed_sta_eth_mac = 12;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional float sta_location_x = 2;
    if (has_sta_location_x()) {
      total_size += 1 + 4;
    }

    // optional float sta_location_y = 3;
    if (has_sta_location_y()) {
      total_size += 1 + 4;
    }

    // optional uint32 error_level = 7;
    if (has_error_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_level());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ce.nbapi.location.algorithm loc_algorithm = 14;
    if (has_loc_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_algorithm());
    }

    // optional double longitude = 16;
    if (has_longitude()) {
      total_size += 2 + 8;
    }

    // optional uint32 rssi_val = 15;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rssi_val());
    }

    // optional bool associated = 8;
    if (has_associated()) {
      total_size += 1 + 1;
    }

    // optional bool associated_to_valid_bssid = 26;
    if (has_associated_to_valid_bssid()) {
      total_size += 2 + 1;
    }

    // optional double latitude = 17;
    if (has_latitude()) {
      total_size += 2 + 8;
    }

    // optional double altitude = 18;
    if (has_altitude()) {
      total_size += 2 + 8;
    }

    // optional .ce.nbapi.measurement_unit unit = 19;
    if (has_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .ce.nbapi.location.error_code err_code = 21;
    if (has_err_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_code());
    }

    // optional uint32 location_compute_timestamp = 25;
    if (has_location_compute_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_compute_timestamp());
    }

    // optional .ce.nbapi.target_dev_type target_type = 20 [default = TARGET_TYPE_STATION];
    if (has_target_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.location)
  GOOGLE_DCHECK_NE(&from, this);
  const location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.location)
    MergeFrom(*source);
  }
}

void location::MergeFrom(const location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geofence_ids_.MergeFrom(from.geofence_ids_);
  records_.MergeFrom(from.records_);
  geofence_names_.MergeFrom(from.geofence_names_);
  rtls_tag_info_.MergeFrom(from.rtls_tag_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_campus_id();
      campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_building_id();
      building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_floor_id();
      floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000020u) {
      sta_location_x_ = from.sta_location_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      sta_location_y_ = from.sta_location_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      error_level_ = from.error_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      loc_algorithm_ = from.loc_algorithm_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000400u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000800u) {
      associated_ = from.associated_;
    }
    if (cached_has_bits & 0x00001000u) {
      associated_to_valid_bssid_ = from.associated_to_valid_bssid_;
    }
    if (cached_has_bits & 0x00002000u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      err_code_ = from.err_code_;
    }
    if (cached_has_bits & 0x00020000u) {
      location_compute_timestamp_ = from.location_compute_timestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      target_type_ = from.target_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void location::CopyFrom(const location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool location::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  return true;
}

void location::Swap(location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void location::InternalSwap(location* other) {
  using std::swap;
  geofence_ids_.InternalSwap(CastToBase(&other->geofence_ids_));
  CastToBase(&records_)->InternalSwap(CastToBase(&other->records_));
  geofence_names_.InternalSwap(CastToBase(&other->geofence_names_));
  CastToBase(&rtls_tag_info_)->InternalSwap(CastToBase(&other->rtls_tag_info_));
  campus_id_.Swap(&other->campus_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  building_id_.Swap(&other->building_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(sta_location_x_, other->sta_location_x_);
  swap(sta_location_y_, other->sta_location_y_);
  swap(error_level_, other->error_level_);
  swap(loc_algorithm_, other->loc_algorithm_);
  swap(longitude_, other->longitude_);
  swap(rssi_val_, other->rssi_val_);
  swap(associated_, other->associated_);
  swap(associated_to_valid_bssid_, other->associated_to_valid_bssid_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  swap(unit_, other->unit_);
  swap(err_code_, other->err_code_);
  swap(location_compute_timestamp_, other->location_compute_timestamp_);
  swap(target_type_, other->target_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata location::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void presence::InitAsDefaultInstance() {
  ::ce::nbapi::_presence_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_presence_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int presence::kStaEthMacFieldNumber;
const int presence::kAssociatedFieldNumber;
const int presence::kHashedStaEthMacFieldNumber;
const int presence::kApNameFieldNumber;
const int presence::kRadioMacFieldNumber;
const int presence::kTargetTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

presence::presence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_presence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.presence)
}
presence::presence(const presence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&associated_, &from.associated_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_type_) -
    reinterpret_cast<char*>(&associated_)) + sizeof(target_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.presence)
}

void presence::SharedCtor() {
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&associated_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(associated_));
  target_type_ = 1;
}

presence::~presence() {
  // @@protoc_insertion_point(destructor:ce.nbapi.presence)
  SharedDtor();
}

void presence::SharedDtor() {
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
}

void presence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* presence::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const presence& presence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_presence.base);
  return *internal_default_instance();
}


void presence::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.presence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    associated_ = false;
    target_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool presence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.presence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_associated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.presence.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::target_dev_type_IsValid(value)) {
            set_target_type(static_cast< ::ce::nbapi::target_dev_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.presence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.presence)
  return false;
#undef DO_
}

void presence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.presence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional bool associated = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->associated(), output);
  }

  // optional bytes hashed_sta_eth_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hashed_sta_eth_mac(), output);
  }

  // optional string ap_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.presence.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ap_name(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_radio_mac(), output);
  }

  // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->target_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.presence)
}

::google::protobuf::uint8* presence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.presence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional bool associated = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->associated(), target);
  }

  // optional bytes hashed_sta_eth_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hashed_sta_eth_mac(), target);
  }

  // optional string ap_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.presence.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ap_name(), target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_radio_mac(), deterministic, target);
  }

  // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->target_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.presence)
  return target;
}

size_t presence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.presence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes hashed_sta_eth_mac = 3;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional string ap_name = 4;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 5;
    if (has_radio_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional bool associated = 2;
    if (has_associated()) {
      total_size += 1 + 1;
    }

    // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
    if (has_target_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void presence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.presence)
  GOOGLE_DCHECK_NE(&from, this);
  const presence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const presence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.presence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.presence)
    MergeFrom(*source);
  }
}

void presence::MergeFrom(const presence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.presence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      associated_ = from.associated_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_type_ = from.target_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void presence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.presence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void presence::CopyFrom(const presence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.presence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool presence::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void presence::Swap(presence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void presence::InternalSwap(presence* other) {
  using std::swap;
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(associated_, other->associated_);
  swap(target_type_, other->target_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata presence::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rssi::InitAsDefaultInstance() {
  ::ce::nbapi::_rssi_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_rssi_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rssi::kStaEthMacFieldNumber;
const int rssi::kRadioMacFieldNumber;
const int rssi::kRssiValFieldNumber;
const int rssi::kAssociatedFieldNumber;
const int rssi::kHashedStaEthMacFieldNumber;
const int rssi::kNoiseFloorFieldNumber;
const int rssi::kIsApFieldNumber;
const int rssi::kAgeFieldNumber;
const int rssi::kClassificationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rssi::rssi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_rssi.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.rssi)
}
rssi::rssi(const rssi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&rssi_val_, &from.rssi_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_type_) -
    reinterpret_cast<char*>(&rssi_val_)) + sizeof(classification_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.rssi)
}

void rssi::SharedCtor() {
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_type_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(classification_type_));
}

rssi::~rssi() {
  // @@protoc_insertion_point(destructor:ce.nbapi.rssi)
  SharedDtor();
}

void rssi::SharedDtor() {
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
}

void rssi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rssi::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rssi& rssi::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_rssi.base);
  return *internal_default_instance();
}


void rssi::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&rssi_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_) -
        reinterpret_cast<char*>(&rssi_val_)) + sizeof(age_));
  }
  classification_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rssi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.rssi)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rssi_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_associated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 noise_floor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_noise_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noise_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classification_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_classification_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classification_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.rssi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.rssi)
  return false;
#undef DO_
}

void rssi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_mac(), output);
  }

  // optional uint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rssi_val(), output);
  }

  // optional bool associated = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->associated(), output);
  }

  // optional bytes hashed_sta_eth_mac = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->hashed_sta_eth_mac(), output);
  }

  // optional uint32 noise_floor = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->noise_floor(), output);
  }

  // optional bool is_ap = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_ap(), output);
  }

  // optional uint32 age = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->age(), output);
  }

  // optional uint32 classification_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->classification_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.rssi)
}

::google::protobuf::uint8* rssi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_mac(), deterministic, target);
  }

  // optional uint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rssi_val(), target);
  }

  // optional bool associated = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->associated(), target);
  }

  // optional bytes hashed_sta_eth_mac = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->hashed_sta_eth_mac(), target);
  }

  // optional uint32 noise_floor = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->noise_floor(), target);
  }

  // optional bool is_ap = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_ap(), target);
  }

  // optional uint32 age = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->age(), target);
  }

  // optional uint32 classification_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->classification_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.rssi)
  return target;
}

size_t rssi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.rssi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes hashed_sta_eth_mac = 5;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 2;
    if (has_radio_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional uint32 rssi_val = 3;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rssi_val());
    }

    // optional bool associated = 4;
    if (has_associated()) {
      total_size += 1 + 1;
    }

    // optional bool is_ap = 7;
    if (has_is_ap()) {
      total_size += 1 + 1;
    }

    // optional uint32 noise_floor = 6;
    if (has_noise_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noise_floor());
    }

    // optional uint32 age = 8;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  // optional uint32 classification_type = 9;
  if (has_classification_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classification_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rssi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.rssi)
  GOOGLE_DCHECK_NE(&from, this);
  const rssi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rssi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.rssi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.rssi)
    MergeFrom(*source);
  }
}

void rssi::MergeFrom(const rssi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.rssi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      associated_ = from.associated_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_ap_ = from.is_ap_;
    }
    if (cached_has_bits & 0x00000040u) {
      noise_floor_ = from.noise_floor_;
    }
    if (cached_has_bits & 0x00000080u) {
      age_ = from.age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_classification_type(from.classification_type());
  }
}

void rssi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rssi::CopyFrom(const rssi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rssi::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void rssi::Swap(rssi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rssi::InternalSwap(rssi* other) {
  using std::swap;
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(rssi_val_, other->rssi_val_);
  swap(associated_, other->associated_);
  swap(is_ap_, other->is_ap_);
  swap(noise_floor_, other->noise_floor_);
  swap(age_, other->age_);
  swap(classification_type_, other->classification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rssi::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void sta_rssi::InitAsDefaultInstance() {
  ::ce::nbapi::_sta_rssi_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_sta_rssi_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_sta_rssi_default_instance_._instance.get_mutable()->assoc_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sta_rssi::kStaEthMacFieldNumber;
const int sta_rssi::kRadioMacFieldNumber;
const int sta_rssi::kRssiValFieldNumber;
const int sta_rssi::kAssociatedFieldNumber;
const int sta_rssi::kAgeFieldNumber;
const int sta_rssi::kNoiseFloorFieldNumber;
const int sta_rssi::kAssocBssidFieldNumber;
const int sta_rssi::kClassificationTypeFieldNumber;
const int sta_rssi::kAssociatedToValidBssidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sta_rssi::sta_rssi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_sta_rssi.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.sta_rssi)
}
sta_rssi::sta_rssi(const sta_rssi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  if (from.has_assoc_bssid()) {
    assoc_bssid_ = new ::ce::nbapi::mac_address(*from.assoc_bssid_);
  } else {
    assoc_bssid_ = NULL;
  }
  ::memcpy(&rssi_val_, &from.rssi_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_type_) -
    reinterpret_cast<char*>(&rssi_val_)) + sizeof(classification_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.sta_rssi)
}

void sta_rssi::SharedCtor() {
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_type_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(classification_type_));
}

sta_rssi::~sta_rssi() {
  // @@protoc_insertion_point(destructor:ce.nbapi.sta_rssi)
  SharedDtor();
}

void sta_rssi::SharedDtor() {
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
  if (this != internal_default_instance()) delete assoc_bssid_;
}

void sta_rssi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* sta_rssi::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sta_rssi& sta_rssi::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_sta_rssi.base);
  return *internal_default_instance();
}


void sta_rssi::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.sta_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(assoc_bssid_ != NULL);
      assoc_bssid_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&rssi_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&associated_to_valid_bssid_) -
        reinterpret_cast<char*>(&rssi_val_)) + sizeof(associated_to_valid_bssid_));
  }
  classification_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sta_rssi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.sta_rssi)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rssi_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_associated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 noise_floor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_noise_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noise_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address assoc_bssid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_assoc_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classification_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_classification_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classification_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated_to_valid_bssid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_associated_to_valid_bssid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_to_valid_bssid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.sta_rssi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.sta_rssi)
  return false;
#undef DO_
}

void sta_rssi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.sta_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_mac(), output);
  }

  // optional sint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->rssi_val(), output);
  }

  // optional bool associated = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->associated(), output);
  }

  // optional int32 age = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->age(), output);
  }

  // optional int32 noise_floor = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->noise_floor(), output);
  }

  // optional .ce.nbapi.mac_address assoc_bssid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_assoc_bssid(), output);
  }

  // optional uint32 classification_type = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->classification_type(), output);
  }

  // optional bool associated_to_valid_bssid = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->associated_to_valid_bssid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.sta_rssi)
}

::google::protobuf::uint8* sta_rssi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.sta_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_mac(), deterministic, target);
  }

  // optional sint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->rssi_val(), target);
  }

  // optional bool associated = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->associated(), target);
  }

  // optional int32 age = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->age(), target);
  }

  // optional int32 noise_floor = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->noise_floor(), target);
  }

  // optional .ce.nbapi.mac_address assoc_bssid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_assoc_bssid(), deterministic, target);
  }

  // optional uint32 classification_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->classification_type(), target);
  }

  // optional bool associated_to_valid_bssid = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->associated_to_valid_bssid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.sta_rssi)
  return target;
}

size_t sta_rssi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.sta_rssi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 2;
    if (has_radio_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional .ce.nbapi.mac_address assoc_bssid = 7;
    if (has_assoc_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *assoc_bssid_);
    }

    // optional sint32 rssi_val = 3;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rssi_val());
    }

    // optional int32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional int32 noise_floor = 6;
    if (has_noise_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noise_floor());
    }

    // optional bool associated = 4;
    if (has_associated()) {
      total_size += 1 + 1;
    }

    // optional bool associated_to_valid_bssid = 9;
    if (has_associated_to_valid_bssid()) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 classification_type = 8;
  if (has_classification_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->classification_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sta_rssi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.sta_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  const sta_rssi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sta_rssi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.sta_rssi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.sta_rssi)
    MergeFrom(*source);
  }
}

void sta_rssi::MergeFrom(const sta_rssi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.sta_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_assoc_bssid()->::ce::nbapi::mac_address::MergeFrom(from.assoc_bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000020u) {
      noise_floor_ = from.noise_floor_;
    }
    if (cached_has_bits & 0x00000040u) {
      associated_ = from.associated_;
    }
    if (cached_has_bits & 0x00000080u) {
      associated_to_valid_bssid_ = from.associated_to_valid_bssid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_classification_type(from.classification_type());
  }
}

void sta_rssi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.sta_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sta_rssi::CopyFrom(const sta_rssi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.sta_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sta_rssi::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  if (has_assoc_bssid()) {
    if (!this->assoc_bssid_->IsInitialized()) return false;
  }
  return true;
}

void sta_rssi::Swap(sta_rssi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sta_rssi::InternalSwap(sta_rssi* other) {
  using std::swap;
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(assoc_bssid_, other->assoc_bssid_);
  swap(rssi_val_, other->rssi_val_);
  swap(age_, other->age_);
  swap(noise_floor_, other->noise_floor_);
  swap(associated_, other->associated_);
  swap(associated_to_valid_bssid_, other->associated_to_valid_bssid_);
  swap(classification_type_, other->classification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata sta_rssi::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void tag_rssi::InitAsDefaultInstance() {
  ::ce::nbapi::_tag_rssi_default_instance_._instance.get_mutable()->tag_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_tag_rssi_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tag_rssi::kTagMacFieldNumber;
const int tag_rssi::kRadioMacFieldNumber;
const int tag_rssi::kRssiValFieldNumber;
const int tag_rssi::kNoiseFloorFieldNumber;
const int tag_rssi::kBatteryFieldNumber;
const int tag_rssi::kChannelFieldNumber;
const int tag_rssi::kTxPowerFieldNumber;
const int tag_rssi::kDataRateFieldNumber;
const int tag_rssi::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tag_rssi::tag_rssi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_tag_rssi.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.tag_rssi)
}
tag_rssi::tag_rssi(const tag_rssi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_tag_mac()) {
    tag_mac_ = new ::ce::nbapi::mac_address(*from.tag_mac_);
  } else {
    tag_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&rssi_val_, &from.rssi_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_rate_) -
    reinterpret_cast<char*>(&rssi_val_)) + sizeof(data_rate_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.tag_rssi)
}

void tag_rssi::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_rate_) -
      reinterpret_cast<char*>(&tag_mac_)) + sizeof(data_rate_));
}

tag_rssi::~tag_rssi() {
  // @@protoc_insertion_point(destructor:ce.nbapi.tag_rssi)
  SharedDtor();
}

void tag_rssi::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tag_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
}

void tag_rssi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* tag_rssi::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const tag_rssi& tag_rssi::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_tag_rssi.base);
  return *internal_default_instance();
}


void tag_rssi::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.tag_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tag_mac_ != NULL);
      tag_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&rssi_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_power_) -
        reinterpret_cast<char*>(&rssi_val_)) + sizeof(tx_power_));
  }
  data_rate_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool tag_rssi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.tag_rssi)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address tag_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rssi_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 noise_floor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_noise_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noise_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 battery = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_battery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_power = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tx_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_data_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.tag_rssi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.tag_rssi)
  return false;
#undef DO_
}

void tag_rssi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.tag_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address tag_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tag_mac(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_mac(), output);
  }

  // optional sint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->rssi_val(), output);
  }

  // optional int32 noise_floor = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->noise_floor(), output);
  }

  // optional uint32 battery = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battery(), output);
  }

  // optional uint32 channel = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel(), output);
  }

  // optional uint32 tx_power = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_power(), output);
  }

  // optional uint32 data_rate = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->data_rate(), output);
  }

  // optional bytes payload = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.tag_rssi)
}

::google::protobuf::uint8* tag_rssi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.tag_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address tag_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tag_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_mac(), deterministic, target);
  }

  // optional sint32 rssi_val = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->rssi_val(), target);
  }

  // optional int32 noise_floor = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->noise_floor(), target);
  }

  // optional uint32 battery = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battery(), target);
  }

  // optional uint32 channel = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channel(), target);
  }

  // optional uint32 tx_power = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_power(), target);
  }

  // optional uint32 data_rate = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->data_rate(), target);
  }

  // optional bytes payload = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.tag_rssi)
  return target;
}

size_t tag_rssi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.tag_rssi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes payload = 9;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional .ce.nbapi.mac_address tag_mac = 1;
    if (has_tag_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 2;
    if (has_radio_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional sint32 rssi_val = 3;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rssi_val());
    }

    // optional int32 noise_floor = 4;
    if (has_noise_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noise_floor());
    }

    // optional uint32 battery = 5;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battery());
    }

    // optional uint32 channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 tx_power = 7;
    if (has_tx_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_power());
    }

  }
  // optional uint32 data_rate = 8;
  if (has_data_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void tag_rssi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.tag_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  const tag_rssi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tag_rssi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.tag_rssi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.tag_rssi)
    MergeFrom(*source);
  }
}

void tag_rssi::MergeFrom(const tag_rssi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.tag_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag_mac()->::ce::nbapi::mac_address::MergeFrom(from.tag_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      noise_floor_ = from.noise_floor_;
    }
    if (cached_has_bits & 0x00000020u) {
      battery_ = from.battery_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000080u) {
      tx_power_ = from.tx_power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_data_rate(from.data_rate());
  }
}

void tag_rssi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.tag_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tag_rssi::CopyFrom(const tag_rssi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.tag_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tag_rssi::IsInitialized() const {
  if (has_tag_mac()) {
    if (!this->tag_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void tag_rssi::Swap(tag_rssi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tag_rssi::InternalSwap(tag_rssi* other) {
  using std::swap;
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tag_mac_, other->tag_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(rssi_val_, other->rssi_val_);
  swap(noise_floor_, other->noise_floor_);
  swap(battery_, other->battery_);
  swap(channel_, other->channel_);
  swap(tx_power_, other->tx_power_);
  swap(data_rate_, other->data_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata tag_rssi::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ap_rssi::InitAsDefaultInstance() {
  ::ce::nbapi::_ap_rssi_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_ap_rssi_default_instance_._instance.get_mutable()->neighbor_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_ap_rssi_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ap_rssi::kApEthMacFieldNumber;
const int ap_rssi::kNeighborBssidFieldNumber;
const int ap_rssi::kSsidFieldNumber;
const int ap_rssi::kRssiValFieldNumber;
const int ap_rssi::kPhyTypeFieldNumber;
const int ap_rssi::kHtModeFieldNumber;
const int ap_rssi::kChannelFieldNumber;
const int ap_rssi::kTxPowerFieldNumber;
const int ap_rssi::kBwRateFieldNumber;
const int ap_rssi::kBssidFieldNumber;
const int ap_rssi::kClassificationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ap_rssi::ap_rssi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ap_rssi.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.ap_rssi)
}
ap_rssi::ap_rssi(const ap_rssi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssid()) {
    ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_neighbor_bssid()) {
    neighbor_bssid_ = new ::ce::nbapi::mac_address(*from.neighbor_bssid_);
  } else {
    neighbor_bssid_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  ::memcpy(&rssi_val_, &from.rssi_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_type_) -
    reinterpret_cast<char*>(&rssi_val_)) + sizeof(classification_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.ap_rssi)
}

void ap_rssi::SharedCtor() {
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_type_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(classification_type_));
}

ap_rssi::~ap_rssi() {
  // @@protoc_insertion_point(destructor:ce.nbapi.ap_rssi)
  SharedDtor();
}

void ap_rssi::SharedDtor() {
  ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete neighbor_bssid_;
  if (this != internal_default_instance()) delete bssid_;
}

void ap_rssi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ap_rssi::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ap_rssi& ap_rssi::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ap_rssi.base);
  return *internal_default_instance();
}


void ap_rssi::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.ap_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ssid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(neighbor_bssid_ != NULL);
      neighbor_bssid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&rssi_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&rssi_val_)) + sizeof(channel_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&bw_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classification_type_) -
        reinterpret_cast<char*>(&bw_rate_)) + sizeof(classification_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ap_rssi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.ap_rssi)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address neighbor_bssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ssid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ssid().data(), static_cast<int>(this->ssid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.ap_rssi.ssid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rssi_val = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phy_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_phy_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phy_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ht_mode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ht_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ht_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_power = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tx_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bw_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_bw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classification_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_classification_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classification_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.ap_rssi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.ap_rssi)
  return false;
#undef DO_
}

void ap_rssi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.ap_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address neighbor_bssid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_neighbor_bssid(), output);
  }

  // optional string ssid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.ap_rssi.ssid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ssid(), output);
  }

  // optional sint32 rssi_val = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->rssi_val(), output);
  }

  // optional uint32 phy_type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->phy_type(), output);
  }

  // optional uint32 ht_mode = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ht_mode(), output);
  }

  // optional uint32 channel = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channel(), output);
  }

  // optional uint32 tx_power = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tx_power(), output);
  }

  // optional int64 bw_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->bw_rate(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_bssid(), output);
  }

  // optional uint32 classification_type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->classification_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.ap_rssi)
}

::google::protobuf::uint8* ap_rssi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.ap_rssi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address neighbor_bssid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_neighbor_bssid(), deterministic, target);
  }

  // optional string ssid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.ap_rssi.ssid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ssid(), target);
  }

  // optional sint32 rssi_val = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->rssi_val(), target);
  }

  // optional uint32 phy_type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->phy_type(), target);
  }

  // optional uint32 ht_mode = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ht_mode(), target);
  }

  // optional uint32 channel = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channel(), target);
  }

  // optional uint32 tx_power = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tx_power(), target);
  }

  // optional int64 bw_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->bw_rate(), target);
  }

  // optional .ce.nbapi.mac_address bssid = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 classification_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->classification_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.ap_rssi)
  return target;
}

size_t ap_rssi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.ap_rssi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ssid = 3;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssid());
    }

    // optional .ce.nbapi.mac_address ap_eth_mac = 1;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional .ce.nbapi.mac_address neighbor_bssid = 2;
    if (has_neighbor_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *neighbor_bssid_);
    }

    // optional .ce.nbapi.mac_address bssid = 10;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional sint32 rssi_val = 4;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rssi_val());
    }

    // optional uint32 phy_type = 5;
    if (has_phy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phy_type());
    }

    // optional uint32 ht_mode = 6;
    if (has_ht_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ht_mode());
    }

    // optional uint32 channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int64 bw_rate = 9;
    if (has_bw_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bw_rate());
    }

    // optional uint32 tx_power = 8;
    if (has_tx_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_power());
    }

    // optional uint32 classification_type = 11;
    if (has_classification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classification_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ap_rssi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.ap_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  const ap_rssi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ap_rssi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.ap_rssi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.ap_rssi)
    MergeFrom(*source);
  }
}

void ap_rssi::MergeFrom(const ap_rssi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.ap_rssi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ssid();
      ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_neighbor_bssid()->::ce::nbapi::mac_address::MergeFrom(from.neighbor_bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000010u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000020u) {
      phy_type_ = from.phy_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      ht_mode_ = from.ht_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      bw_rate_ = from.bw_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      tx_power_ = from.tx_power_;
    }
    if (cached_has_bits & 0x00000400u) {
      classification_type_ = from.classification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ap_rssi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.ap_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ap_rssi::CopyFrom(const ap_rssi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.ap_rssi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ap_rssi::IsInitialized() const {
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_neighbor_bssid()) {
    if (!this->neighbor_bssid_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  return true;
}

void ap_rssi::Swap(ap_rssi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ap_rssi::InternalSwap(ap_rssi* other) {
  using std::swap;
  ssid_.Swap(&other->ssid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(neighbor_bssid_, other->neighbor_bssid_);
  swap(bssid_, other->bssid_);
  swap(rssi_val_, other->rssi_val_);
  swap(phy_type_, other->phy_type_);
  swap(ht_mode_, other->ht_mode_);
  swap(channel_, other->channel_);
  swap(bw_rate_, other->bw_rate_);
  swap(tx_power_, other->tx_power_);
  swap(classification_type_, other->classification_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ap_rssi::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void station::InitAsDefaultInstance() {
  ::ce::nbapi::_station_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_station_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_station_default_instance_._instance.get_mutable()->sta_ip_address_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int station::kStaEthMacFieldNumber;
const int station::kUsernameFieldNumber;
const int station::kRoleFieldNumber;
const int station::kBssidFieldNumber;
const int station::kDeviceTypeFieldNumber;
const int station::kStaIpAddressFieldNumber;
const int station::kHashedStaEthMacFieldNumber;
const int station::kHashedStaIpAddressFieldNumber;
const int station::kVlanFieldNumber;
const int station::kHtFieldNumber;
const int station::kApNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

station::station()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_station.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.station)
}
station::station(const station& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_role()) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_type()) {
    device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
  }
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  hashed_sta_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_ip_address()) {
    hashed_sta_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_ip_address_);
  }
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_sta_ip_address()) {
    sta_ip_address_ = new ::ce::nbapi::ip_address(*from.sta_ip_address_);
  } else {
    sta_ip_address_ = NULL;
  }
  ::memcpy(&vlan_, &from.vlan_,
    static_cast<size_t>(reinterpret_cast<char*>(&ht_) -
    reinterpret_cast<char*>(&vlan_)) + sizeof(ht_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.station)
}

void station::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ht_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(ht_));
}

station::~station() {
  // @@protoc_insertion_point(destructor:ce.nbapi.station)
  SharedDtor();
}

void station::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete sta_ip_address_;
}

void station::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* station::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const station& station::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_station.base);
  return *internal_default_instance();
}


void station::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      role_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      hashed_sta_ip_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(sta_ip_address_ != NULL);
    sta_ip_address_->Clear();
  }
  if (cached_has_bits & 1536u) {
    ::memset(&vlan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ht_) -
        reinterpret_cast<char*>(&vlan_)) + sizeof(ht_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool station::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.station)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.station.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role().data(), static_cast<int>(this->role().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.station.role");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_type().data(), static_cast<int>(this->device_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.station.device_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address sta_ip_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_ip_address = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vlan = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_vlan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ht_type ht = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::ht_type_IsValid(value)) {
            set_ht(static_cast< ::ce::nbapi::ht_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.station.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.station)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.station)
  return false;
#undef DO_
}

void station::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string role = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->role(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_bssid(), output);
  }

  // optional string device_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.device_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_type(), output);
  }

  // optional .ce.nbapi.ip_address sta_ip_address = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_sta_ip_address(), output);
  }

  // optional bytes hashed_sta_eth_mac = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->hashed_sta_eth_mac(), output);
  }

  // optional bytes hashed_sta_ip_address = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->hashed_sta_ip_address(), output);
  }

  // optional uint32 vlan = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vlan(), output);
  }

  // optional .ce.nbapi.ht_type ht = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ht(), output);
  }

  // optional string ap_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ap_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.station)
}

::google::protobuf::uint8* station::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string role = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role(), target);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_bssid(), deterministic, target);
  }

  // optional string device_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_type().data(), static_cast<int>(this->device_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.device_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_type(), target);
  }

  // optional .ce.nbapi.ip_address sta_ip_address = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_sta_ip_address(), deterministic, target);
  }

  // optional bytes hashed_sta_eth_mac = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->hashed_sta_eth_mac(), target);
  }

  // optional bytes hashed_sta_ip_address = 8;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->hashed_sta_ip_address(), target);
  }

  // optional uint32 vlan = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vlan(), target);
  }

  // optional .ce.nbapi.ht_type ht = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ht(), target);
  }

  // optional string ap_name = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.station.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ap_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.station)
  return target;
}

size_t station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.station)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

    // optional string device_type = 5;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

    // optional bytes hashed_sta_eth_mac = 7;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional bytes hashed_sta_ip_address = 8;
    if (has_hashed_sta_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_ip_address());
    }

    // optional string ap_name = 11;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 4;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .ce.nbapi.ip_address sta_ip_address = 6;
    if (has_sta_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_ip_address_);
    }

    // optional uint32 vlan = 9;
    if (has_vlan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlan());
    }

    // optional .ce.nbapi.ht_type ht = 10;
    if (has_ht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ht());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void station::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.station)
  GOOGLE_DCHECK_NE(&from, this);
  const station* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const station>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.station)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.station)
    MergeFrom(*source);
  }
}

void station::MergeFrom(const station& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.station)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_role();
      role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_type();
      device_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_hashed_sta_ip_address();
      hashed_sta_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_ip_address_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_sta_ip_address()->::ce::nbapi::ip_address::MergeFrom(from.sta_ip_address());
    }
    if (cached_has_bits & 0x00000200u) {
      vlan_ = from.vlan_;
    }
    if (cached_has_bits & 0x00000400u) {
      ht_ = from.ht_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void station::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void station::CopyFrom(const station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool station::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_sta_ip_address()) {
    if (!this->sta_ip_address_->IsInitialized()) return false;
  }
  return true;
}

void station::Swap(station* other) {
  if (other == this) return;
  InternalSwap(other);
}
void station::InternalSwap(station* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_.Swap(&other->role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_type_.Swap(&other->device_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_sta_ip_address_.Swap(&other->hashed_sta_ip_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(bssid_, other->bssid_);
  swap(sta_ip_address_, other->sta_ip_address_);
  swap(vlan_, other->vlan_);
  swap(ht_, other->ht_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata station::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void access_point::InitAsDefaultInstance() {
  ::ce::nbapi::_access_point_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_access_point_default_instance_._instance.get_mutable()->ap_ip_address_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_access_point_default_instance_._instance.get_mutable()->managed_by_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_access_point_default_instance_._instance.get_mutable()->ap_location_ = const_cast< ::ce::nbapi::ap_location*>(
      ::ce::nbapi::ap_location::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int access_point::kApEthMacFieldNumber;
const int access_point::kApNameFieldNumber;
const int access_point::kApGroupFieldNumber;
const int access_point::kApModelFieldNumber;
const int access_point::kDeplModeFieldNumber;
const int access_point::kApIpAddressFieldNumber;
const int access_point::kRebootsFieldNumber;
const int access_point::kRebootstrapsFieldNumber;
const int access_point::kManagedByFieldNumber;
const int access_point::kManagedByKeyFieldNumber;
const int access_point::kRadiosFieldNumber;
const int access_point::kIsMasterFieldNumber;
const int access_point::kRebootReasonFieldNumber;
const int access_point::kApLocationFieldNumber;
const int access_point::kIsConductorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

access_point::access_point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_access_point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.access_point)
}
access_point::access_point(const access_point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      radios_(from.radios_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  ap_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_group()) {
    ap_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_group_);
  }
  ap_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_model()) {
    ap_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_model_);
  }
  managed_by_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_managed_by_key()) {
    managed_by_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.managed_by_key_);
  }
  reboot_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reboot_reason()) {
    reboot_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reboot_reason_);
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_ap_ip_address()) {
    ap_ip_address_ = new ::ce::nbapi::ip_address(*from.ap_ip_address_);
  } else {
    ap_ip_address_ = NULL;
  }
  if (from.has_managed_by()) {
    managed_by_ = new ::ce::nbapi::ip_address(*from.managed_by_);
  } else {
    managed_by_ = NULL;
  }
  if (from.has_ap_location()) {
    ap_location_ = new ::ce::nbapi::ap_location(*from.ap_location_);
  } else {
    ap_location_ = NULL;
  }
  ::memcpy(&depl_mode_, &from.depl_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_conductor_) -
    reinterpret_cast<char*>(&depl_mode_)) + sizeof(is_conductor_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.access_point)
}

void access_point::SharedCtor() {
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  managed_by_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reboot_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_conductor_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(is_conductor_));
}

access_point::~access_point() {
  // @@protoc_insertion_point(destructor:ce.nbapi.access_point)
  SharedDtor();
}

void access_point::SharedDtor() {
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  managed_by_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reboot_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete ap_ip_address_;
  if (this != internal_default_instance()) delete managed_by_;
  if (this != internal_default_instance()) delete ap_location_;
}

void access_point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* access_point::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const access_point& access_point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_access_point.base);
  return *internal_default_instance();
}


void access_point::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radios_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ap_group_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ap_model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      managed_by_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      reboot_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ap_ip_address_ != NULL);
      ap_ip_address_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(managed_by_ != NULL);
      managed_by_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(ap_location_ != NULL);
    ap_location_->Clear();
  }
  if (cached_has_bits & 15872u) {
    ::memset(&depl_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_conductor_) -
        reinterpret_cast<char*>(&depl_mode_)) + sizeof(is_conductor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool access_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.access_point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.access_point.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_group().data(), static_cast<int>(this->ap_group().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.access_point.ap_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_model().data(), static_cast<int>(this->ap_model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.access_point.ap_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.access_point.deployment_mode depl_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::access_point_deployment_mode_IsValid(value)) {
            set_depl_mode(static_cast< ::ce::nbapi::access_point_deployment_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address ap_ip_address = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reboots = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reboots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reboots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rebootstraps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_rebootstraps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebootstraps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address managed_by = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string managed_by_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_managed_by_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->managed_by_key().data(), static_cast<int>(this->managed_by_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.access_point.managed_by_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.radio radios = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_radios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_master = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_master();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reboot_reason = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reboot_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reboot_reason().data(), static_cast<int>(this->reboot_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.access_point.reboot_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ap_location ap_location = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_conductor = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_is_conductor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_conductor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.access_point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.access_point)
  return false;
#undef DO_
}

void access_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional string ap_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ap_name(), output);
  }

  // optional string ap_group = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_group().data(), static_cast<int>(this->ap_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ap_group(), output);
  }

  // optional string ap_model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_model().data(), static_cast<int>(this->ap_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ap_model(), output);
  }

  // optional .ce.nbapi.access_point.deployment_mode depl_mode = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->depl_mode(), output);
  }

  // optional .ce.nbapi.ip_address ap_ip_address = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_ap_ip_address(), output);
  }

  // optional uint32 reboots = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reboots(), output);
  }

  // optional uint32 rebootstraps = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rebootstraps(), output);
  }

  // optional .ce.nbapi.ip_address managed_by = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_managed_by(), output);
  }

  // optional string managed_by_key = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managed_by_key().data(), static_cast<int>(this->managed_by_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.managed_by_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->managed_by_key(), output);
  }

  // repeated .ce.nbapi.radio radios = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radios_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->radios(static_cast<int>(i)),
      output);
  }

  // optional bool is_master = 12 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_master(), output);
  }

  // optional string reboot_reason = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reboot_reason().data(), static_cast<int>(this->reboot_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.reboot_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->reboot_reason(), output);
  }

  // optional .ce.nbapi.ap_location ap_location = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_ap_location(), output);
  }

  // optional bool is_conductor = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_conductor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.access_point)
}

::google::protobuf::uint8* access_point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional string ap_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ap_name(), target);
  }

  // optional string ap_group = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_group().data(), static_cast<int>(this->ap_group().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ap_group(), target);
  }

  // optional string ap_model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_model().data(), static_cast<int>(this->ap_model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.ap_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ap_model(), target);
  }

  // optional .ce.nbapi.access_point.deployment_mode depl_mode = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->depl_mode(), target);
  }

  // optional .ce.nbapi.ip_address ap_ip_address = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_ap_ip_address(), deterministic, target);
  }

  // optional uint32 reboots = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reboots(), target);
  }

  // optional uint32 rebootstraps = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rebootstraps(), target);
  }

  // optional .ce.nbapi.ip_address managed_by = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_managed_by(), deterministic, target);
  }

  // optional string managed_by_key = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->managed_by_key().data(), static_cast<int>(this->managed_by_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.managed_by_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->managed_by_key(), target);
  }

  // repeated .ce.nbapi.radio radios = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radios_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->radios(static_cast<int>(i)), deterministic, target);
  }

  // optional bool is_master = 12 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_master(), target);
  }

  // optional string reboot_reason = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reboot_reason().data(), static_cast<int>(this->reboot_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.access_point.reboot_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->reboot_reason(), target);
  }

  // optional .ce.nbapi.ap_location ap_location = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_ap_location(), deterministic, target);
  }

  // optional bool is_conductor = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_conductor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.access_point)
  return target;
}

size_t access_point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.access_point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (has_ap_eth_mac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ap_eth_mac_);
  }
  // repeated .ce.nbapi.radio radios = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->radios_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->radios(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ap_name = 2;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional string ap_group = 3;
    if (has_ap_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_group());
    }

    // optional string ap_model = 4;
    if (has_ap_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_model());
    }

    // optional string managed_by_key = 10;
    if (has_managed_by_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->managed_by_key());
    }

    // optional string reboot_reason = 13;
    if (has_reboot_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reboot_reason());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional .ce.nbapi.ip_address ap_ip_address = 6;
    if (has_ap_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_ip_address_);
    }

    // optional .ce.nbapi.ip_address managed_by = 9;
    if (has_managed_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *managed_by_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .ce.nbapi.ap_location ap_location = 14;
    if (has_ap_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_location_);
    }

    // optional .ce.nbapi.access_point.deployment_mode depl_mode = 5;
    if (has_depl_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->depl_mode());
    }

    // optional uint32 reboots = 7;
    if (has_reboots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reboots());
    }

    // optional uint32 rebootstraps = 8;
    if (has_rebootstraps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebootstraps());
    }

    // optional bool is_master = 12 [deprecated = true];
    if (has_is_master()) {
      total_size += 1 + 1;
    }

    // optional bool is_conductor = 15;
    if (has_is_conductor()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void access_point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.access_point)
  GOOGLE_DCHECK_NE(&from, this);
  const access_point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const access_point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.access_point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.access_point)
    MergeFrom(*source);
  }
}

void access_point::MergeFrom(const access_point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.access_point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radios_.MergeFrom(from.radios_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ap_group();
      ap_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_group_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ap_model();
      ap_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_managed_by_key();
      managed_by_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.managed_by_key_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_reboot_reason();
      reboot_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reboot_reason_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ap_ip_address()->::ce::nbapi::ip_address::MergeFrom(from.ap_ip_address());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_managed_by()->::ce::nbapi::ip_address::MergeFrom(from.managed_by());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ap_location()->::ce::nbapi::ap_location::MergeFrom(from.ap_location());
    }
    if (cached_has_bits & 0x00000200u) {
      depl_mode_ = from.depl_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      reboots_ = from.reboots_;
    }
    if (cached_has_bits & 0x00000800u) {
      rebootstraps_ = from.rebootstraps_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_master_ = from.is_master_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_conductor_ = from.is_conductor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void access_point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void access_point::CopyFrom(const access_point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool access_point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->radios())) return false;
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_ap_ip_address()) {
    if (!this->ap_ip_address_->IsInitialized()) return false;
  }
  if (has_managed_by()) {
    if (!this->managed_by_->IsInitialized()) return false;
  }
  if (has_ap_location()) {
    if (!this->ap_location_->IsInitialized()) return false;
  }
  return true;
}

void access_point::Swap(access_point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void access_point::InternalSwap(access_point* other) {
  using std::swap;
  CastToBase(&radios_)->InternalSwap(CastToBase(&other->radios_));
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ap_group_.Swap(&other->ap_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ap_model_.Swap(&other->ap_model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  managed_by_key_.Swap(&other->managed_by_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reboot_reason_.Swap(&other->reboot_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(ap_ip_address_, other->ap_ip_address_);
  swap(managed_by_, other->managed_by_);
  swap(ap_location_, other->ap_location_);
  swap(depl_mode_, other->depl_mode_);
  swap(reboots_, other->reboots_);
  swap(rebootstraps_, other->rebootstraps_);
  swap(is_master_, other->is_master_);
  swap(is_conductor_, other->is_conductor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata access_point::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void state_access_point::InitAsDefaultInstance() {
  ::ce::nbapi::_state_access_point_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_state_access_point_default_instance_._instance.get_mutable()->ap_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int state_access_point::kApMacFieldNumber;
const int state_access_point::kSerialNumberFieldNumber;
const int state_access_point::kApNameFieldNumber;
const int state_access_point::kModelFieldNumber;
const int state_access_point::kModeFieldNumber;
const int state_access_point::kApIpFieldNumber;
const int state_access_point::kCpuUsageFieldNumber;
const int state_access_point::kMemoryTotalFieldNumber;
const int state_access_point::kMemoryFreeFieldNumber;
const int state_access_point::kIsMasterFieldNumber;
const int state_access_point::kUptimeFieldNumber;
const int state_access_point::kMeshModeFieldNumber;
const int state_access_point::kLedStatusFieldNumber;
const int state_access_point::kExtSsidStateFieldNumber;
const int state_access_point::kServiceTagFieldNumber;
const int state_access_point::kModemStatusFieldNumber;
const int state_access_point::kModemSimpinStatusFieldNumber;
const int state_access_point::kCurrentUplinkInuseFieldNumber;
const int state_access_point::kIsConductorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

state_access_point::state_access_point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_state_access_point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.state_access_point)
}
state_access_point::state_access_point(const state_access_point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mode()) {
    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  service_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_service_tag()) {
    service_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_tag_);
  }
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  if (from.has_ap_ip()) {
    ap_ip_ = new ::ce::nbapi::ip_address(*from.ap_ip_);
  } else {
    ap_ip_ = NULL;
  }
  ::memcpy(&cpu_usage_, &from.cpu_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_conductor_) -
    reinterpret_cast<char*>(&cpu_usage_)) + sizeof(is_conductor_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.state_access_point)
}

void state_access_point::SharedCtor() {
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_conductor_) -
      reinterpret_cast<char*>(&ap_mac_)) + sizeof(is_conductor_));
}

state_access_point::~state_access_point() {
  // @@protoc_insertion_point(destructor:ce.nbapi.state_access_point)
  SharedDtor();
}

void state_access_point::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_mac_;
  if (this != internal_default_instance()) delete ap_ip_;
}

void state_access_point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* state_access_point::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const state_access_point& state_access_point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_state_access_point.base);
  return *internal_default_instance();
}


void state_access_point::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.state_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      service_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ap_mac_ != NULL);
      ap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ap_ip_ != NULL);
      ap_ip_->Clear();
    }
  }
  cpu_usage_ = 0u;
  if (cached_has_bits & 65280u) {
    ::memset(&memory_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modem_status_) -
        reinterpret_cast<char*>(&memory_total_)) + sizeof(modem_status_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&modem_simpin_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_conductor_) -
        reinterpret_cast<char*>(&modem_simpin_status_)) + sizeof(is_conductor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool state_access_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.state_access_point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.state_access_point.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.state_access_point.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.state_access_point.model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), static_cast<int>(this->mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.state_access_point.mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address ap_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cpu_usage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cpu_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 memory_total = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_memory_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 memory_free = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_memory_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_master = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_master();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uptime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_uptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mesh_mode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_mesh_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mesh_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 led_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_led_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &led_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ext_ssid_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_ext_ssid_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_ssid_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_tag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_tag().data(), static_cast<int>(this->service_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.state_access_point.service_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modem_status = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_modem_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modem_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modem_simpin_status = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_modem_simpin_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modem_simpin_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_uplink_inuse = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_current_uplink_inuse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_uplink_inuse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_conductor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_conductor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_conductor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.state_access_point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.state_access_point)
  return false;
#undef DO_
}

void state_access_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.state_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_mac(), output);
  }

  // optional string serial_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  // optional string ap_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ap_name(), output);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string mode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mode(), output);
  }

  // optional .ce.nbapi.ip_address ap_ip = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_ap_ip(), output);
  }

  // optional uint32 cpu_usage = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cpu_usage(), output);
  }

  // optional uint32 memory_total = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->memory_total(), output);
  }

  // optional uint32 memory_free = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->memory_free(), output);
  }

  // optional uint32 is_master = 10 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->is_master(), output);
  }

  // optional uint32 uptime = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uptime(), output);
  }

  // optional uint32 mesh_mode = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mesh_mode(), output);
  }

  // optional uint32 led_status = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->led_status(), output);
  }

  // optional uint32 ext_ssid_state = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ext_ssid_state(), output);
  }

  // optional string service_tag = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_tag().data(), static_cast<int>(this->service_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.service_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->service_tag(), output);
  }

  // optional uint32 modem_status = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->modem_status(), output);
  }

  // optional uint32 modem_simpin_status = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->modem_simpin_status(), output);
  }

  // optional uint32 current_uplink_inuse = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->current_uplink_inuse(), output);
  }

  // optional uint32 is_conductor = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->is_conductor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.state_access_point)
}

::google::protobuf::uint8* state_access_point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.state_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_mac(), deterministic, target);
  }

  // optional string serial_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serial_number(), target);
  }

  // optional string ap_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ap_name(), target);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string mode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mode(), target);
  }

  // optional .ce.nbapi.ip_address ap_ip = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_ap_ip(), deterministic, target);
  }

  // optional uint32 cpu_usage = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cpu_usage(), target);
  }

  // optional uint32 memory_total = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->memory_total(), target);
  }

  // optional uint32 memory_free = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->memory_free(), target);
  }

  // optional uint32 is_master = 10 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->is_master(), target);
  }

  // optional uint32 uptime = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uptime(), target);
  }

  // optional uint32 mesh_mode = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mesh_mode(), target);
  }

  // optional uint32 led_status = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->led_status(), target);
  }

  // optional uint32 ext_ssid_state = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->ext_ssid_state(), target);
  }

  // optional string service_tag = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_tag().data(), static_cast<int>(this->service_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.state_access_point.service_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->service_tag(), target);
  }

  // optional uint32 modem_status = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->modem_status(), target);
  }

  // optional uint32 modem_simpin_status = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->modem_simpin_status(), target);
  }

  // optional uint32 current_uplink_inuse = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->current_uplink_inuse(), target);
  }

  // optional uint32 is_conductor = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->is_conductor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.state_access_point)
  return target;
}

size_t state_access_point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.state_access_point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string ap_name = 3;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional string service_tag = 17;
    if (has_service_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_tag());
    }

    // optional .ce.nbapi.mac_address ap_mac = 1;
    if (has_ap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

    // optional .ce.nbapi.ip_address ap_ip = 6;
    if (has_ap_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_ip_);
    }

    // optional uint32 cpu_usage = 7;
    if (has_cpu_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_usage());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 memory_total = 8;
    if (has_memory_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_total());
    }

    // optional uint32 memory_free = 9;
    if (has_memory_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_free());
    }

    // optional uint32 is_master = 10 [deprecated = true];
    if (has_is_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_master());
    }

    // optional uint32 uptime = 11;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uptime());
    }

    // optional uint32 mesh_mode = 12;
    if (has_mesh_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mesh_mode());
    }

    // optional uint32 led_status = 13;
    if (has_led_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->led_status());
    }

    // optional uint32 ext_ssid_state = 16;
    if (has_ext_ssid_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext_ssid_state());
    }

    // optional uint32 modem_status = 18;
    if (has_modem_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modem_status());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 modem_simpin_status = 19;
    if (has_modem_simpin_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modem_simpin_status());
    }

    // optional uint32 current_uplink_inuse = 20;
    if (has_current_uplink_inuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_uplink_inuse());
    }

    // optional uint32 is_conductor = 21;
    if (has_is_conductor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_conductor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void state_access_point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.state_access_point)
  GOOGLE_DCHECK_NE(&from, this);
  const state_access_point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const state_access_point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.state_access_point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.state_access_point)
    MergeFrom(*source);
  }
}

void state_access_point::MergeFrom(const state_access_point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.state_access_point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_service_tag();
      service_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ap_ip()->::ce::nbapi::ip_address::MergeFrom(from.ap_ip());
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_usage_ = from.cpu_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      memory_total_ = from.memory_total_;
    }
    if (cached_has_bits & 0x00000200u) {
      memory_free_ = from.memory_free_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_master_ = from.is_master_;
    }
    if (cached_has_bits & 0x00000800u) {
      uptime_ = from.uptime_;
    }
    if (cached_has_bits & 0x00001000u) {
      mesh_mode_ = from.mesh_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      led_status_ = from.led_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      ext_ssid_state_ = from.ext_ssid_state_;
    }
    if (cached_has_bits & 0x00008000u) {
      modem_status_ = from.modem_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      modem_simpin_status_ = from.modem_simpin_status_;
    }
    if (cached_has_bits & 0x00020000u) {
      current_uplink_inuse_ = from.current_uplink_inuse_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_conductor_ = from.is_conductor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void state_access_point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.state_access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state_access_point::CopyFrom(const state_access_point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.state_access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_access_point::IsInitialized() const {
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  if (has_ap_ip()) {
    if (!this->ap_ip_->IsInitialized()) return false;
  }
  return true;
}

void state_access_point::Swap(state_access_point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void state_access_point::InternalSwap(state_access_point* other) {
  using std::swap;
  serial_number_.Swap(&other->serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mode_.Swap(&other->mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_tag_.Swap(&other->service_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_mac_, other->ap_mac_);
  swap(ap_ip_, other->ap_ip_);
  swap(cpu_usage_, other->cpu_usage_);
  swap(memory_total_, other->memory_total_);
  swap(memory_free_, other->memory_free_);
  swap(is_master_, other->is_master_);
  swap(uptime_, other->uptime_);
  swap(mesh_mode_, other->mesh_mode_);
  swap(led_status_, other->led_status_);
  swap(ext_ssid_state_, other->ext_ssid_state_);
  swap(modem_status_, other->modem_status_);
  swap(modem_simpin_status_, other->modem_simpin_status_);
  swap(current_uplink_inuse_, other->current_uplink_inuse_);
  swap(is_conductor_, other->is_conductor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata state_access_point::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_modem::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_modem_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_modem::kIapMacFieldNumber;
const int stats_modem::kTxDataBytesFieldNumber;
const int stats_modem::kRxDataBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_modem::stats_modem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_modem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_modem)
}
stats_modem::stats_modem(const stats_modem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  ::memcpy(&tx_data_bytes_, &from.tx_data_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&rx_data_bytes_) -
    reinterpret_cast<char*>(&tx_data_bytes_)) + sizeof(rx_data_bytes_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_modem)
}

void stats_modem::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_data_bytes_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(rx_data_bytes_));
}

stats_modem::~stats_modem() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_modem)
  SharedDtor();
}

void stats_modem::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
}

void stats_modem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_modem::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_modem& stats_modem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_modem.base);
  return *internal_default_instance();
}


void stats_modem::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_modem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iap_mac_ != NULL);
    iap_mac_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&tx_data_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rx_data_bytes_) -
        reinterpret_cast<char*>(&tx_data_bytes_)) + sizeof(rx_data_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_modem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_modem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_data_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_modem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_modem)
  return false;
#undef DO_
}

void stats_modem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_modem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional uint64 tx_data_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tx_data_bytes(), output);
  }

  // optional uint64 rx_data_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rx_data_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_modem)
}

::google::protobuf::uint8* stats_modem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_modem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional uint64 tx_data_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tx_data_bytes(), target);
  }

  // optional uint64 rx_data_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rx_data_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_modem)
  return target;
}

size_t stats_modem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_modem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional uint64 tx_data_bytes = 2;
    if (has_tx_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_bytes());
    }

    // optional uint64 rx_data_bytes = 3;
    if (has_rx_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_data_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_modem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_modem)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_modem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_modem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_modem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_modem)
    MergeFrom(*source);
  }
}

void stats_modem::MergeFrom(const stats_modem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_modem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      tx_data_bytes_ = from.tx_data_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      rx_data_bytes_ = from.rx_data_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_modem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_modem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_modem::CopyFrom(const stats_modem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_modem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_modem::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_modem::Swap(stats_modem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_modem::InternalSwap(stats_modem* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(tx_data_bytes_, other->tx_data_bytes_);
  swap(rx_data_bytes_, other->rx_data_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_modem::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void radio::InitAsDefaultInstance() {
  ::ce::nbapi::_radio_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_radio_default_instance_._instance.get_mutable()->radio_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int radio::kApEthMacFieldNumber;
const int radio::kRadioBssidFieldNumber;
const int radio::kModeFieldNumber;
const int radio::kPhyFieldNumber;
const int radio::kHtFieldNumber;
const int radio::kVirtualAccessPointsFieldNumber;
const int radio::kRadioNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

radio::radio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_radio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.radio)
}
radio::radio(const radio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      virtual_access_points_(from.virtual_access_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_radio_bssid()) {
    radio_bssid_ = new ::ce::nbapi::mac_address(*from.radio_bssid_);
  } else {
    radio_bssid_ = NULL;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&radio_num_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(radio_num_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.radio)
}

void radio::SharedCtor() {
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radio_num_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(radio_num_));
}

radio::~radio() {
  // @@protoc_insertion_point(destructor:ce.nbapi.radio)
  SharedDtor();
}

void radio::SharedDtor() {
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete radio_bssid_;
}

void radio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* radio::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const radio& radio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_radio.base);
  return *internal_default_instance();
}


void radio::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_access_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radio_bssid_ != NULL);
      radio_bssid_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radio_num_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(radio_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool radio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.radio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ce.nbapi.mac_address radio_bssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.radio.radio_mode mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::radio_radio_mode_IsValid(value)) {
            set_mode(static_cast< ::ce::nbapi::radio_radio_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.phy_type phy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::phy_type_IsValid(value)) {
            set_phy(static_cast< ::ce::nbapi::phy_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ht_type ht = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::ht_type_IsValid(value)) {
            set_ht(static_cast< ::ce::nbapi::ht_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.virtual_access_point virtual_access_points = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_virtual_access_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radio_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_radio_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radio_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.radio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.radio)
  return false;
#undef DO_
}

void radio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // required .ce.nbapi.mac_address radio_bssid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_bssid(), output);
  }

  // optional .ce.nbapi.radio.radio_mode mode = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional .ce.nbapi.phy_type phy = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->phy(), output);
  }

  // optional .ce.nbapi.ht_type ht = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ht(), output);
  }

  // repeated .ce.nbapi.virtual_access_point virtual_access_points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_access_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->virtual_access_points(static_cast<int>(i)),
      output);
  }

  // optional uint32 radio_num = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->radio_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.radio)
}

::google::protobuf::uint8* radio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // required .ce.nbapi.mac_address radio_bssid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_bssid(), deterministic, target);
  }

  // optional .ce.nbapi.radio.radio_mode mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // optional .ce.nbapi.phy_type phy = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->phy(), target);
  }

  // optional .ce.nbapi.ht_type ht = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ht(), target);
  }

  // repeated .ce.nbapi.virtual_access_point virtual_access_points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_access_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->virtual_access_points(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 radio_num = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->radio_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.radio)
  return target;
}

size_t radio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.radio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.mac_address radio_bssid = 2;
  if (has_radio_bssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *radio_bssid_);
  }
  // repeated .ce.nbapi.virtual_access_point virtual_access_points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_access_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->virtual_access_points(static_cast<int>(i)));
    }
  }

  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (has_ap_eth_mac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ap_eth_mac_);
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional .ce.nbapi.radio.radio_mode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .ce.nbapi.phy_type phy = 5;
    if (has_phy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phy());
    }

    // optional .ce.nbapi.ht_type ht = 6;
    if (has_ht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ht());
    }

    // optional uint32 radio_num = 8;
    if (has_radio_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radio_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void radio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.radio)
  GOOGLE_DCHECK_NE(&from, this);
  const radio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const radio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.radio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.radio)
    MergeFrom(*source);
  }
}

void radio::MergeFrom(const radio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.radio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_access_points_.MergeFrom(from.virtual_access_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radio_bssid()->::ce::nbapi::mac_address::MergeFrom(from.radio_bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      phy_ = from.phy_;
    }
    if (cached_has_bits & 0x00000010u) {
      ht_ = from.ht_;
    }
    if (cached_has_bits & 0x00000020u) {
      radio_num_ = from.radio_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void radio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void radio::CopyFrom(const radio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool radio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->virtual_access_points())) return false;
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_bssid()) {
    if (!this->radio_bssid_->IsInitialized()) return false;
  }
  return true;
}

void radio::Swap(radio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void radio::InternalSwap(radio* other) {
  using std::swap;
  CastToBase(&virtual_access_points_)->InternalSwap(CastToBase(&other->virtual_access_points_));
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(radio_bssid_, other->radio_bssid_);
  swap(mode_, other->mode_);
  swap(phy_, other->phy_);
  swap(ht_, other->ht_);
  swap(radio_num_, other->radio_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata radio::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void virtual_access_point::InitAsDefaultInstance() {
  ::ce::nbapi::_virtual_access_point_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_virtual_access_point_default_instance_._instance.get_mutable()->radio_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int virtual_access_point::kBssidFieldNumber;
const int virtual_access_point::kSsidFieldNumber;
const int virtual_access_point::kRadioBssidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

virtual_access_point::virtual_access_point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_virtual_access_point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.virtual_access_point)
}
virtual_access_point::virtual_access_point(const virtual_access_point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ssid()) {
    ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_radio_bssid()) {
    radio_bssid_ = new ::ce::nbapi::mac_address(*from.radio_bssid_);
  } else {
    radio_bssid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.virtual_access_point)
}

void virtual_access_point::SharedCtor() {
  ssid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bssid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radio_bssid_) -
      reinterpret_cast<char*>(&bssid_)) + sizeof(radio_bssid_));
}

virtual_access_point::~virtual_access_point() {
  // @@protoc_insertion_point(destructor:ce.nbapi.virtual_access_point)
  SharedDtor();
}

void virtual_access_point::SharedDtor() {
  ssid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete radio_bssid_;
}

void virtual_access_point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* virtual_access_point::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const virtual_access_point& virtual_access_point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_virtual_access_point.base);
  return *internal_default_instance();
}


void virtual_access_point::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.virtual_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ssid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radio_bssid_ != NULL);
      radio_bssid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool virtual_access_point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.virtual_access_point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.mac_address bssid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ssid().data(), static_cast<int>(this->ssid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.virtual_access_point.ssid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_bssid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.virtual_access_point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.virtual_access_point)
  return false;
#undef DO_
}

void virtual_access_point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.virtual_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address bssid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_bssid(), output);
  }

  // optional string ssid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.virtual_access_point.ssid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ssid(), output);
  }

  // optional .ce.nbapi.mac_address radio_bssid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_radio_bssid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.virtual_access_point)
}

::google::protobuf::uint8* virtual_access_point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.virtual_access_point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address bssid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_bssid(), deterministic, target);
  }

  // optional string ssid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ssid().data(), static_cast<int>(this->ssid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.virtual_access_point.ssid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ssid(), target);
  }

  // optional .ce.nbapi.mac_address radio_bssid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_radio_bssid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.virtual_access_point)
  return target;
}

size_t virtual_access_point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.virtual_access_point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.mac_address bssid = 1;
  if (has_bssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bssid_);
  }
  // optional string ssid = 2;
  if (has_ssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ssid());
  }

  // optional .ce.nbapi.mac_address radio_bssid = 3;
  if (has_radio_bssid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *radio_bssid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void virtual_access_point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.virtual_access_point)
  GOOGLE_DCHECK_NE(&from, this);
  const virtual_access_point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const virtual_access_point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.virtual_access_point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.virtual_access_point)
    MergeFrom(*source);
  }
}

void virtual_access_point::MergeFrom(const virtual_access_point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.virtual_access_point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ssid();
      ssid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ssid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radio_bssid()->::ce::nbapi::mac_address::MergeFrom(from.radio_bssid());
    }
  }
}

void virtual_access_point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.virtual_access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void virtual_access_point::CopyFrom(const virtual_access_point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.virtual_access_point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool virtual_access_point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_radio_bssid()) {
    if (!this->radio_bssid_->IsInitialized()) return false;
  }
  return true;
}

void virtual_access_point::Swap(virtual_access_point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void virtual_access_point::InternalSwap(virtual_access_point* other) {
  using std::swap;
  ssid_.Swap(&other->ssid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bssid_, other->bssid_);
  swap(radio_bssid_, other->radio_bssid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata virtual_access_point::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void destination::InitAsDefaultInstance() {
  ::ce::nbapi::_destination_default_instance_._instance.get_mutable()->dest_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int destination::kDestIpFieldNumber;
const int destination::kDestNameFieldNumber;
const int destination::kDestAliasNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

destination::destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_destination.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.destination)
}
destination::destination(const destination& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_name()) {
    dest_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_name_);
  }
  dest_alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_alias_name()) {
    dest_alias_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_alias_name_);
  }
  if (from.has_dest_ip()) {
    dest_ip_ = new ::ce::nbapi::ip_address(*from.dest_ip_);
  } else {
    dest_ip_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.destination)
}

void destination::SharedCtor() {
  dest_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_alias_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ip_ = NULL;
}

destination::~destination() {
  // @@protoc_insertion_point(destructor:ce.nbapi.destination)
  SharedDtor();
}

void destination::SharedDtor() {
  dest_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_alias_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dest_ip_;
}

void destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* destination::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const destination& destination::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_destination.base);
  return *internal_default_instance();
}


void destination::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      dest_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dest_alias_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dest_ip_ != NULL);
      dest_ip_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.destination)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.ip_address dest_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dest_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_name().data(), static_cast<int>(this->dest_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.destination.dest_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_alias_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_alias_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_alias_name().data(), static_cast<int>(this->dest_alias_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.destination.dest_alias_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.destination)
  return false;
#undef DO_
}

void destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address dest_ip = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_dest_ip(), output);
  }

  // optional string dest_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_name().data(), static_cast<int>(this->dest_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.destination.dest_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest_name(), output);
  }

  // optional string dest_alias_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_alias_name().data(), static_cast<int>(this->dest_alias_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.destination.dest_alias_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dest_alias_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.destination)
}

::google::protobuf::uint8* destination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.destination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address dest_ip = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_dest_ip(), deterministic, target);
  }

  // optional string dest_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_name().data(), static_cast<int>(this->dest_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.destination.dest_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_name(), target);
  }

  // optional string dest_alias_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_alias_name().data(), static_cast<int>(this->dest_alias_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.destination.dest_alias_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest_alias_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.destination)
  return target;
}

size_t destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.destination)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string dest_name = 2;
    if (has_dest_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_name());
    }

    // optional string dest_alias_name = 3;
    if (has_dest_alias_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_alias_name());
    }

    // optional .ce.nbapi.ip_address dest_ip = 1;
    if (has_dest_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dest_ip_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void destination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.destination)
  GOOGLE_DCHECK_NE(&from, this);
  const destination* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const destination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.destination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.destination)
    MergeFrom(*source);
  }
}

void destination::MergeFrom(const destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dest_name();
      dest_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest_alias_name();
      dest_alias_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_alias_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dest_ip()->::ce::nbapi::ip_address::MergeFrom(from.dest_ip());
    }
  }
}

void destination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void destination::CopyFrom(const destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool destination::IsInitialized() const {
  if (has_dest_ip()) {
    if (!this->dest_ip_->IsInitialized()) return false;
  }
  return true;
}

void destination::Swap(destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void destination::InternalSwap(destination* other) {
  using std::swap;
  dest_name_.Swap(&other->dest_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_alias_name_.Swap(&other->dest_alias_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dest_ip_, other->dest_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata destination::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void application::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int application::kAppIdFieldNumber;
const int application::kAppNameFieldNumber;
const int application::kAppFamilyFieldNumber;
const int application::kAppLongNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

application::application()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_application.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.application)
}
application::application(const application& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  app_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_family()) {
    app_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_family_);
  }
  app_long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_long_name()) {
    app_long_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_long_name_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.application)
}

void application::SharedCtor() {
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_family_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_long_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

application::~application() {
  // @@protoc_insertion_point(destructor:ce.nbapi.application)
  SharedDtor();
}

void application::SharedDtor() {
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_family_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_long_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void application::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* application::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const application& application::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_application.base);
  return *internal_default_instance();
}


void application::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      app_family_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      app_long_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool application::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.application)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), static_cast<int>(this->app_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.application.app_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_family = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_family().data(), static_cast<int>(this->app_family().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.application.app_family");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_long_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_long_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_long_name().data(), static_cast<int>(this->app_long_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.application.app_long_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.application)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.application)
  return false;
#undef DO_
}

void application::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_name(), output);
  }

  // optional string app_family = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_family().data(), static_cast<int>(this->app_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_family");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_family(), output);
  }

  // optional string app_long_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_long_name().data(), static_cast<int>(this->app_long_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_long_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->app_long_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.application)
}

::google::protobuf::uint8* application::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.application)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string app_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_name(), target);
  }

  // optional string app_family = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_family().data(), static_cast<int>(this->app_family().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_family");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_family(), target);
  }

  // optional string app_long_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_long_name().data(), static_cast<int>(this->app_long_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.application.app_long_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->app_long_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.application)
  return target;
}

size_t application::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.application)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string app_family = 3;
    if (has_app_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_family());
    }

    // optional string app_long_name = 4;
    if (has_app_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_long_name());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void application::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.application)
  GOOGLE_DCHECK_NE(&from, this);
  const application* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const application>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.application)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.application)
    MergeFrom(*source);
  }
}

void application::MergeFrom(const application& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.application)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_app_name();
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_app_family();
      app_family_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_family_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_app_long_name();
      app_long_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_long_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void application::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void application::CopyFrom(const application& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool application::IsInitialized() const {
  return true;
}

void application::Swap(application* other) {
  if (other == this) return;
  InternalSwap(other);
}
void application::InternalSwap(application* other) {
  using std::swap;
  app_name_.Swap(&other->app_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_family_.Swap(&other->app_family_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_long_name_.Swap(&other->app_long_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata application::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void webcc_category::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int webcc_category::kCatIdFieldNumber;
const int webcc_category::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

webcc_category::webcc_category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_webcc_category.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.webcc_category)
}
webcc_category::webcc_category(const webcc_category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  cat_id_ = from.cat_id_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.webcc_category)
}

void webcc_category::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_id_ = 0u;
}

webcc_category::~webcc_category() {
  // @@protoc_insertion_point(destructor:ce.nbapi.webcc_category)
  SharedDtor();
}

void webcc_category::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void webcc_category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* webcc_category::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const webcc_category& webcc_category::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_webcc_category.base);
  return *internal_default_instance();
}


void webcc_category::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.webcc_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    category_.ClearNonDefaultToEmptyNoArena();
  }
  cat_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool webcc_category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.webcc_category)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.webcc_category.category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.webcc_category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.webcc_category)
  return false;
#undef DO_
}

void webcc_category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.webcc_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cat_id(), output);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.webcc_category.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.webcc_category)
}

::google::protobuf::uint8* webcc_category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.webcc_category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cat_id(), target);
  }

  // optional string category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.webcc_category.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.webcc_category)
  return target;
}

size_t webcc_category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.webcc_category)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional uint32 cat_id = 1;
    if (has_cat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void webcc_category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.webcc_category)
  GOOGLE_DCHECK_NE(&from, this);
  const webcc_category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const webcc_category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.webcc_category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.webcc_category)
    MergeFrom(*source);
  }
}

void webcc_category::MergeFrom(const webcc_category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.webcc_category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000002u) {
      cat_id_ = from.cat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void webcc_category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.webcc_category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void webcc_category::CopyFrom(const webcc_category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.webcc_category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool webcc_category::IsInitialized() const {
  return true;
}

void webcc_category::Swap(webcc_category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void webcc_category::InternalSwap(webcc_category* other) {
  using std::swap;
  category_.Swap(&other->category_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cat_id_, other->cat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata webcc_category::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void webcc_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int webcc_info::kWebccMd5FieldNumber;
const int webcc_info::kWebccCatIdFieldNumber;
const int webcc_info::kWebccRepScoreFieldNumber;
const int webcc_info::kWebccUrlPrefixFieldNumber;
const int webcc_info::kWebccNotSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

webcc_info::webcc_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_webcc_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.webcc_info)
}
webcc_info::webcc_info(const webcc_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webcc_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webcc_md5()) {
    webcc_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcc_md5_);
  }
  webcc_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webcc_url_prefix()) {
    webcc_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcc_url_prefix_);
  }
  ::memcpy(&webcc_cat_id_, &from.webcc_cat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&webcc_not_supported_) -
    reinterpret_cast<char*>(&webcc_cat_id_)) + sizeof(webcc_not_supported_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.webcc_info)
}

void webcc_info::SharedCtor() {
  webcc_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webcc_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&webcc_cat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webcc_not_supported_) -
      reinterpret_cast<char*>(&webcc_cat_id_)) + sizeof(webcc_not_supported_));
}

webcc_info::~webcc_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.webcc_info)
  SharedDtor();
}

void webcc_info::SharedDtor() {
  webcc_md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webcc_url_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void webcc_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* webcc_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const webcc_info& webcc_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_webcc_info.base);
  return *internal_default_instance();
}


void webcc_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.webcc_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      webcc_md5_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      webcc_url_prefix_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&webcc_cat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&webcc_not_supported_) -
        reinterpret_cast<char*>(&webcc_cat_id_)) + sizeof(webcc_not_supported_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool webcc_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.webcc_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes webcc_md5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_webcc_md5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webcc_cat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_webcc_cat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webcc_cat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webcc_rep_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_webcc_rep_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webcc_rep_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webcc_url_prefix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webcc_url_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webcc_url_prefix().data(), static_cast<int>(this->webcc_url_prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.webcc_info.webcc_url_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool webcc_not_supported = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_webcc_not_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &webcc_not_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.webcc_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.webcc_info)
  return false;
#undef DO_
}

void webcc_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.webcc_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes webcc_md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->webcc_md5(), output);
  }

  // optional uint32 webcc_cat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webcc_cat_id(), output);
  }

  // optional uint32 webcc_rep_score = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->webcc_rep_score(), output);
  }

  // optional string webcc_url_prefix = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcc_url_prefix().data(), static_cast<int>(this->webcc_url_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.webcc_info.webcc_url_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->webcc_url_prefix(), output);
  }

  // optional bool webcc_not_supported = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->webcc_not_supported(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.webcc_info)
}

::google::protobuf::uint8* webcc_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.webcc_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes webcc_md5 = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->webcc_md5(), target);
  }

  // optional uint32 webcc_cat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webcc_cat_id(), target);
  }

  // optional uint32 webcc_rep_score = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->webcc_rep_score(), target);
  }

  // optional string webcc_url_prefix = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webcc_url_prefix().data(), static_cast<int>(this->webcc_url_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.webcc_info.webcc_url_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->webcc_url_prefix(), target);
  }

  // optional bool webcc_not_supported = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->webcc_not_supported(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.webcc_info)
  return target;
}

size_t webcc_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.webcc_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes webcc_md5 = 1;
    if (has_webcc_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->webcc_md5());
    }

    // optional string webcc_url_prefix = 4;
    if (has_webcc_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webcc_url_prefix());
    }

    // optional uint32 webcc_cat_id = 2;
    if (has_webcc_cat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webcc_cat_id());
    }

    // optional uint32 webcc_rep_score = 3;
    if (has_webcc_rep_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webcc_rep_score());
    }

    // optional bool webcc_not_supported = 5;
    if (has_webcc_not_supported()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void webcc_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.webcc_info)
  GOOGLE_DCHECK_NE(&from, this);
  const webcc_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const webcc_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.webcc_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.webcc_info)
    MergeFrom(*source);
  }
}

void webcc_info::MergeFrom(const webcc_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.webcc_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_webcc_md5();
      webcc_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcc_md5_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_webcc_url_prefix();
      webcc_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webcc_url_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      webcc_cat_id_ = from.webcc_cat_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      webcc_rep_score_ = from.webcc_rep_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      webcc_not_supported_ = from.webcc_not_supported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void webcc_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.webcc_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void webcc_info::CopyFrom(const webcc_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.webcc_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool webcc_info::IsInitialized() const {
  return true;
}

void webcc_info::Swap(webcc_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void webcc_info::InternalSwap(webcc_info* other) {
  using std::swap;
  webcc_md5_.Swap(&other->webcc_md5_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  webcc_url_prefix_.Swap(&other->webcc_url_prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(webcc_cat_id_, other->webcc_cat_id_);
  swap(webcc_rep_score_, other->webcc_rep_score_);
  swap(webcc_not_supported_, other->webcc_not_supported_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata webcc_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void visibility_rec::InitAsDefaultInstance() {
  ::ce::nbapi::_visibility_rec_default_instance_._instance.get_mutable()->client_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_visibility_rec_default_instance_._instance.get_mutable()->dest_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_visibility_rec_default_instance_._instance.get_mutable()->device_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_visibility_rec_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int visibility_rec::kClientIpFieldNumber;
const int visibility_rec::kDestIpFieldNumber;
const int visibility_rec::kIpProtoFieldNumber;
const int visibility_rec::kAppIdFieldNumber;
const int visibility_rec::kTxPktsFieldNumber;
const int visibility_rec::kTxBytesFieldNumber;
const int visibility_rec::kRxPktsFieldNumber;
const int visibility_rec::kRxBytesFieldNumber;
const int visibility_rec::kHashedClientIpFieldNumber;
const int visibility_rec::kDeviceMacFieldNumber;
const int visibility_rec::kHashedDeviceMacFieldNumber;
const int visibility_rec::kAppNameFieldNumber;
const int visibility_rec::kCcCatIdFieldNumber;
const int visibility_rec::kCcRepScoreFieldNumber;
const int visibility_rec::kCcUrlPrefixFieldNumber;
const int visibility_rec::kCcMd5FieldNumber;
const int visibility_rec::kApMacFieldNumber;
const int visibility_rec::kSessionFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

visibility_rec::visibility_rec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_visibility_rec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.visibility_rec)
}
visibility_rec::visibility_rec(const visibility_rec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_client_ip()) {
    hashed_client_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_client_ip_);
  }
  hashed_device_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_device_mac()) {
    hashed_device_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_device_mac_);
  }
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  cc_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cc_url_prefix()) {
    cc_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_url_prefix_);
  }
  cc_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cc_md5()) {
    cc_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_md5_);
  }
  if (from.has_client_ip()) {
    client_ip_ = new ::ce::nbapi::ip_address(*from.client_ip_);
  } else {
    client_ip_ = NULL;
  }
  if (from.has_dest_ip()) {
    dest_ip_ = new ::ce::nbapi::ip_address(*from.dest_ip_);
  } else {
    dest_ip_ = NULL;
  }
  if (from.has_device_mac()) {
    device_mac_ = new ::ce::nbapi::mac_address(*from.device_mac_);
  } else {
    device_mac_ = NULL;
  }
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  ::memcpy(&tx_pkts_, &from.tx_pkts_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_flags_) -
    reinterpret_cast<char*>(&tx_pkts_)) + sizeof(session_flags_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.visibility_rec)
}

void visibility_rec::SharedCtor() {
  hashed_client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_device_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_rep_score_) -
      reinterpret_cast<char*>(&client_ip_)) + sizeof(cc_rep_score_));
  ip_proto_ = 6;
  session_flags_ = 1;
}

visibility_rec::~visibility_rec() {
  // @@protoc_insertion_point(destructor:ce.nbapi.visibility_rec)
  SharedDtor();
}

void visibility_rec::SharedDtor() {
  hashed_client_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_device_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_url_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cc_md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_ip_;
  if (this != internal_default_instance()) delete dest_ip_;
  if (this != internal_default_instance()) delete device_mac_;
  if (this != internal_default_instance()) delete ap_mac_;
}

void visibility_rec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* visibility_rec::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const visibility_rec& visibility_rec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_visibility_rec.base);
  return *internal_default_instance();
}


void visibility_rec::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.visibility_rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      hashed_client_ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hashed_device_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      app_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      cc_url_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      cc_md5_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(client_ip_ != NULL);
      client_ip_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dest_ip_ != NULL);
      dest_ip_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(device_mac_ != NULL);
      device_mac_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(ap_mac_ != NULL);
    ap_mac_->Clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&tx_pkts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cc_rep_score_) -
        reinterpret_cast<char*>(&tx_pkts_)) + sizeof(cc_rep_score_));
  }
  if (cached_has_bits & 196608u) {
    ip_proto_ = 6;
    session_flags_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool visibility_rec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.visibility_rec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.ip_address client_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address dest_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dest_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.visibility_rec.ip_protocol ip_proto = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::visibility_rec_ip_protocol_IsValid(value)) {
            set_ip_proto(static_cast< ::ce::nbapi::visibility_rec_ip_protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_pkts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tx_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_pkts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_rx_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_rx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_client_ip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address device_mac = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_device_mac = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), static_cast<int>(this->app_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.visibility_rec.app_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cc_cat_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_cc_cat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cc_cat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cc_rep_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_cc_rep_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cc_rep_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cc_url_prefix = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cc_url_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cc_url_prefix().data(), static_cast<int>(this->cc_url_prefix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.visibility_rec.cc_url_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes cc_md5 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cc_md5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address ap_mac = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.visibility_rec.IapAppEnforcementStatus session_flags = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::visibility_rec_IapAppEnforcementStatus_IsValid(value)) {
            set_session_flags(static_cast< ::ce::nbapi::visibility_rec_IapAppEnforcementStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.visibility_rec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.visibility_rec)
  return false;
#undef DO_
}

void visibility_rec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.visibility_rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address client_ip = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_client_ip(), output);
  }

  // optional .ce.nbapi.ip_address dest_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dest_ip(), output);
  }

  // optional .ce.nbapi.visibility_rec.ip_protocol ip_proto = 3;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ip_proto(), output);
  }

  // optional uint32 app_id = 4;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->app_id(), output);
  }

  // optional uint64 tx_pkts = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->tx_pkts(), output);
  }

  // optional uint64 tx_bytes = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tx_bytes(), output);
  }

  // optional uint64 rx_pkts = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->rx_pkts(), output);
  }

  // optional uint64 rx_bytes = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->rx_bytes(), output);
  }

  // optional bytes hashed_client_ip = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->hashed_client_ip(), output);
  }

  // optional .ce.nbapi.mac_address device_mac = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_device_mac(), output);
  }

  // optional bytes hashed_device_mac = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->hashed_device_mac(), output);
  }

  // optional string app_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.visibility_rec.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->app_name(), output);
  }

  // optional uint32 cc_cat_id = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cc_cat_id(), output);
  }

  // optional uint32 cc_rep_score = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cc_rep_score(), output);
  }

  // optional string cc_url_prefix = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cc_url_prefix().data(), static_cast<int>(this->cc_url_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.visibility_rec.cc_url_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cc_url_prefix(), output);
  }

  // optional bytes cc_md5 = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->cc_md5(), output);
  }

  // optional .ce.nbapi.mac_address ap_mac = 17;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_ap_mac(), output);
  }

  // optional .ce.nbapi.visibility_rec.IapAppEnforcementStatus session_flags = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->session_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.visibility_rec)
}

::google::protobuf::uint8* visibility_rec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.visibility_rec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address client_ip = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_client_ip(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address dest_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dest_ip(), deterministic, target);
  }

  // optional .ce.nbapi.visibility_rec.ip_protocol ip_proto = 3;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ip_proto(), target);
  }

  // optional uint32 app_id = 4;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->app_id(), target);
  }

  // optional uint64 tx_pkts = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->tx_pkts(), target);
  }

  // optional uint64 tx_bytes = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tx_bytes(), target);
  }

  // optional uint64 rx_pkts = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->rx_pkts(), target);
  }

  // optional uint64 rx_bytes = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->rx_bytes(), target);
  }

  // optional bytes hashed_client_ip = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->hashed_client_ip(), target);
  }

  // optional .ce.nbapi.mac_address device_mac = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_device_mac(), deterministic, target);
  }

  // optional bytes hashed_device_mac = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->hashed_device_mac(), target);
  }

  // optional string app_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), static_cast<int>(this->app_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.visibility_rec.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->app_name(), target);
  }

  // optional uint32 cc_cat_id = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cc_cat_id(), target);
  }

  // optional uint32 cc_rep_score = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cc_rep_score(), target);
  }

  // optional string cc_url_prefix = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cc_url_prefix().data(), static_cast<int>(this->cc_url_prefix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.visibility_rec.cc_url_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cc_url_prefix(), target);
  }

  // optional bytes cc_md5 = 16;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->cc_md5(), target);
  }

  // optional .ce.nbapi.mac_address ap_mac = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_ap_mac(), deterministic, target);
  }

  // optional .ce.nbapi.visibility_rec.IapAppEnforcementStatus session_flags = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->session_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.visibility_rec)
  return target;
}

size_t visibility_rec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.visibility_rec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes hashed_client_ip = 9;
    if (has_hashed_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_client_ip());
    }

    // optional bytes hashed_device_mac = 11;
    if (has_hashed_device_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_device_mac());
    }

    // optional string app_name = 12;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string cc_url_prefix = 15;
    if (has_cc_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cc_url_prefix());
    }

    // optional bytes cc_md5 = 16;
    if (has_cc_md5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cc_md5());
    }

    // optional .ce.nbapi.ip_address client_ip = 1;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_ip_);
    }

    // optional .ce.nbapi.ip_address dest_ip = 2;
    if (has_dest_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dest_ip_);
    }

    // optional .ce.nbapi.mac_address device_mac = 10;
    if (has_device_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_mac_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ce.nbapi.mac_address ap_mac = 17;
    if (has_ap_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

    // optional uint64 tx_pkts = 5;
    if (has_tx_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_pkts());
    }

    // optional uint64 tx_bytes = 6;
    if (has_tx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_bytes());
    }

    // optional uint64 rx_pkts = 7;
    if (has_rx_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_pkts());
    }

    // optional uint64 rx_bytes = 8;
    if (has_rx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_bytes());
    }

    // optional uint32 app_id = 4;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 cc_cat_id = 13;
    if (has_cc_cat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cc_cat_id());
    }

    // optional uint32 cc_rep_score = 14;
    if (has_cc_rep_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cc_rep_score());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional .ce.nbapi.visibility_rec.ip_protocol ip_proto = 3;
    if (has_ip_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ip_proto());
    }

    // optional .ce.nbapi.visibility_rec.IapAppEnforcementStatus session_flags = 18;
    if (has_session_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void visibility_rec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.visibility_rec)
  GOOGLE_DCHECK_NE(&from, this);
  const visibility_rec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const visibility_rec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.visibility_rec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.visibility_rec)
    MergeFrom(*source);
  }
}

void visibility_rec::MergeFrom(const visibility_rec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.visibility_rec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_client_ip();
      hashed_client_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_client_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hashed_device_mac();
      hashed_device_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_device_mac_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_app_name();
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_cc_url_prefix();
      cc_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_url_prefix_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_cc_md5();
      cc_md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cc_md5_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_client_ip()->::ce::nbapi::ip_address::MergeFrom(from.client_ip());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dest_ip()->::ce::nbapi::ip_address::MergeFrom(from.dest_ip());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_device_mac()->::ce::nbapi::mac_address::MergeFrom(from.device_mac());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
    if (cached_has_bits & 0x00000200u) {
      tx_pkts_ = from.tx_pkts_;
    }
    if (cached_has_bits & 0x00000400u) {
      tx_bytes_ = from.tx_bytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      rx_pkts_ = from.rx_pkts_;
    }
    if (cached_has_bits & 0x00001000u) {
      rx_bytes_ = from.rx_bytes_;
    }
    if (cached_has_bits & 0x00002000u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      cc_cat_id_ = from.cc_cat_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      cc_rep_score_ = from.cc_rep_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      ip_proto_ = from.ip_proto_;
    }
    if (cached_has_bits & 0x00020000u) {
      session_flags_ = from.session_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void visibility_rec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.visibility_rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void visibility_rec::CopyFrom(const visibility_rec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.visibility_rec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool visibility_rec::IsInitialized() const {
  if (has_client_ip()) {
    if (!this->client_ip_->IsInitialized()) return false;
  }
  if (has_dest_ip()) {
    if (!this->dest_ip_->IsInitialized()) return false;
  }
  if (has_device_mac()) {
    if (!this->device_mac_->IsInitialized()) return false;
  }
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  return true;
}

void visibility_rec::Swap(visibility_rec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void visibility_rec::InternalSwap(visibility_rec* other) {
  using std::swap;
  hashed_client_ip_.Swap(&other->hashed_client_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_device_mac_.Swap(&other->hashed_device_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_name_.Swap(&other->app_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cc_url_prefix_.Swap(&other->cc_url_prefix_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cc_md5_.Swap(&other->cc_md5_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_ip_, other->client_ip_);
  swap(dest_ip_, other->dest_ip_);
  swap(device_mac_, other->device_mac_);
  swap(ap_mac_, other->ap_mac_);
  swap(tx_pkts_, other->tx_pkts_);
  swap(tx_bytes_, other->tx_bytes_);
  swap(rx_pkts_, other->rx_pkts_);
  swap(rx_bytes_, other->rx_bytes_);
  swap(app_id_, other->app_id_);
  swap(cc_cat_id_, other->cc_cat_id_);
  swap(cc_rep_score_, other->cc_rep_score_);
  swap(ip_proto_, other->ip_proto_);
  swap(session_flags_, other->session_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata visibility_rec::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void campus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int campus::kCampusIdFieldNumber;
const int campus::kCampusNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

campus::campus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_campus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.campus)
}
campus::campus(const campus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_campus_id()) {
    campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
  }
  campus_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_campus_name()) {
    campus_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.campus)
}

void campus::SharedCtor() {
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campus_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

campus::~campus() {
  // @@protoc_insertion_point(destructor:ce.nbapi.campus)
  SharedDtor();
}

void campus::SharedDtor() {
  campus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campus_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void campus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* campus::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const campus& campus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_campus.base);
  return *internal_default_instance();
}


void campus::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.campus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      campus_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      campus_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool campus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.campus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes campus_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_campus_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string campus_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->campus_name().data(), static_cast<int>(this->campus_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.campus.campus_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.campus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.campus)
  return false;
#undef DO_
}

void campus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.campus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes campus_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->campus_id(), output);
  }

  // optional string campus_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campus_name().data(), static_cast<int>(this->campus_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.campus.campus_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->campus_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.campus)
}

::google::protobuf::uint8* campus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.campus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes campus_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->campus_id(), target);
  }

  // optional string campus_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->campus_name().data(), static_cast<int>(this->campus_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.campus.campus_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->campus_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.campus)
  return target;
}

size_t campus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.campus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes campus_id = 1;
    if (has_campus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->campus_id());
    }

    // optional string campus_name = 2;
    if (has_campus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campus_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void campus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.campus)
  GOOGLE_DCHECK_NE(&from, this);
  const campus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const campus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.campus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.campus)
    MergeFrom(*source);
  }
}

void campus::MergeFrom(const campus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.campus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_campus_id();
      campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_campus_name();
      campus_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_name_);
    }
  }
}

void campus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.campus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void campus::CopyFrom(const campus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.campus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool campus::IsInitialized() const {
  return true;
}

void campus::Swap(campus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void campus::InternalSwap(campus* other) {
  using std::swap;
  campus_id_.Swap(&other->campus_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  campus_name_.Swap(&other->campus_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata campus::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void building::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int building::kBuildingIdFieldNumber;
const int building::kBuildingNameFieldNumber;
const int building::kCampusIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

building::building()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_building.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.building)
}
building::building(const building& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_building_id()) {
    building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
  }
  building_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_building_name()) {
    building_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_name_);
  }
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_campus_id()) {
    campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.building)
}

void building::SharedCtor() {
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

building::~building() {
  // @@protoc_insertion_point(destructor:ce.nbapi.building)
  SharedDtor();
}

void building::SharedDtor() {
  building_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  campus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* building::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const building& building::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_building.base);
  return *internal_default_instance();
}


void building::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      building_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      building_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      campus_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.building)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes building_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_building_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string building_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_building_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->building_name().data(), static_cast<int>(this->building_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.building.building_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes campus_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_campus_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.building)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.building)
  return false;
#undef DO_
}

void building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes building_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->building_id(), output);
  }

  // optional string building_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->building_name().data(), static_cast<int>(this->building_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.building.building_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->building_name(), output);
  }

  // optional bytes campus_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->campus_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.building)
}

::google::protobuf::uint8* building::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes building_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->building_id(), target);
  }

  // optional string building_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->building_name().data(), static_cast<int>(this->building_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.building.building_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->building_name(), target);
  }

  // optional bytes campus_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->campus_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.building)
  return target;
}

size_t building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.building)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes building_id = 1;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->building_id());
    }

    // optional string building_name = 2;
    if (has_building_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->building_name());
    }

    // optional bytes campus_id = 3;
    if (has_campus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->campus_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void building::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.building)
  GOOGLE_DCHECK_NE(&from, this);
  const building* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const building>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.building)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.building)
    MergeFrom(*source);
  }
}

void building::MergeFrom(const building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_building_id();
      building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_building_name();
      building_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_campus_id();
      campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
    }
  }
}

void building::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void building::CopyFrom(const building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool building::IsInitialized() const {
  return true;
}

void building::Swap(building* other) {
  if (other == this) return;
  InternalSwap(other);
}
void building::InternalSwap(building* other) {
  using std::swap;
  building_id_.Swap(&other->building_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  building_name_.Swap(&other->building_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  campus_id_.Swap(&other->campus_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata building::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void floor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int floor::kFloorIdFieldNumber;
const int floor::kFloorNameFieldNumber;
const int floor::kFloorLatitudeFieldNumber;
const int floor::kFloorLongitudeFieldNumber;
const int floor::kFloorImgPathFieldNumber;
const int floor::kFloorImgWidthFieldNumber;
const int floor::kFloorImgLengthFieldNumber;
const int floor::kBuildingIdFieldNumber;
const int floor::kFloorLevelFieldNumber;
const int floor::kUnitsFieldNumber;
const int floor::kGridSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

floor::floor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_floor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.floor)
}
floor::floor(const floor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_id()) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  floor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_name()) {
    floor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_name_);
  }
  floor_img_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_img_path()) {
    floor_img_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_img_path_);
  }
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_building_id()) {
    building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
  }
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_units()) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  ::memcpy(&floor_latitude_, &from.floor_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&grid_size_) -
    reinterpret_cast<char*>(&floor_latitude_)) + sizeof(grid_size_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.floor)
}

void floor::SharedCtor() {
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_img_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&floor_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grid_size_) -
      reinterpret_cast<char*>(&floor_latitude_)) + sizeof(grid_size_));
}

floor::~floor() {
  // @@protoc_insertion_point(destructor:ce.nbapi.floor)
  SharedDtor();
}

void floor::SharedDtor() {
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_img_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void floor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* floor::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const floor& floor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_floor.base);
  return *internal_default_instance();
}


void floor::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.floor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      floor_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      floor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      floor_img_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      building_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      units_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&floor_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&floor_img_width_) -
        reinterpret_cast<char*>(&floor_latitude_)) + sizeof(floor_img_width_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&floor_img_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grid_size_) -
        reinterpret_cast<char*>(&floor_img_length_)) + sizeof(grid_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool floor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.floor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes floor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_floor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string floor_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->floor_name().data(), static_cast<int>(this->floor_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.floor.floor_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floor_latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_floor_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floor_longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_floor_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string floor_img_path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floor_img_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->floor_img_path().data(), static_cast<int>(this->floor_img_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.floor.floor_img_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floor_img_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_floor_img_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_img_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floor_img_length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_floor_img_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_img_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes building_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_building_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float floor_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_floor_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string units = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.floor.units");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float grid_size = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_grid_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &grid_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.floor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.floor)
  return false;
#undef DO_
}

void floor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.floor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes floor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->floor_id(), output);
  }

  // optional string floor_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->floor_name().data(), static_cast<int>(this->floor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.floor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->floor_name(), output);
  }

  // optional float floor_latitude = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->floor_latitude(), output);
  }

  // optional float floor_longitude = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->floor_longitude(), output);
  }

  // optional string floor_img_path = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->floor_img_path().data(), static_cast<int>(this->floor_img_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.floor_img_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->floor_img_path(), output);
  }

  // optional float floor_img_width = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->floor_img_width(), output);
  }

  // optional float floor_img_length = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->floor_img_length(), output);
  }

  // optional bytes building_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->building_id(), output);
  }

  // optional float floor_level = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->floor_level(), output);
  }

  // optional string units = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->units(), output);
  }

  // optional float grid_size = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->grid_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.floor)
}

::google::protobuf::uint8* floor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.floor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes floor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->floor_id(), target);
  }

  // optional string floor_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->floor_name().data(), static_cast<int>(this->floor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.floor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->floor_name(), target);
  }

  // optional float floor_latitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->floor_latitude(), target);
  }

  // optional float floor_longitude = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->floor_longitude(), target);
  }

  // optional string floor_img_path = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->floor_img_path().data(), static_cast<int>(this->floor_img_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.floor_img_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->floor_img_path(), target);
  }

  // optional float floor_img_width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->floor_img_width(), target);
  }

  // optional float floor_img_length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->floor_img_length(), target);
  }

  // optional bytes building_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->building_id(), target);
  }

  // optional float floor_level = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->floor_level(), target);
  }

  // optional string units = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.floor.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->units(), target);
  }

  // optional float grid_size = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->grid_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.floor)
  return target;
}

size_t floor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.floor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes floor_id = 1;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->floor_id());
    }

    // optional string floor_name = 2;
    if (has_floor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->floor_name());
    }

    // optional string floor_img_path = 5;
    if (has_floor_img_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->floor_img_path());
    }

    // optional bytes building_id = 8;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->building_id());
    }

    // optional string units = 10;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional float floor_latitude = 3;
    if (has_floor_latitude()) {
      total_size += 1 + 4;
    }

    // optional float floor_longitude = 4;
    if (has_floor_longitude()) {
      total_size += 1 + 4;
    }

    // optional float floor_img_width = 6;
    if (has_floor_img_width()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float floor_img_length = 7;
    if (has_floor_img_length()) {
      total_size += 1 + 4;
    }

    // optional float floor_level = 9;
    if (has_floor_level()) {
      total_size += 1 + 4;
    }

    // optional float grid_size = 11;
    if (has_grid_size()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void floor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.floor)
  GOOGLE_DCHECK_NE(&from, this);
  const floor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const floor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.floor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.floor)
    MergeFrom(*source);
  }
}

void floor::MergeFrom(const floor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.floor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_floor_id();
      floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_floor_name();
      floor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_floor_img_path();
      floor_img_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_img_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_building_id();
      building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_units();
      units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
    }
    if (cached_has_bits & 0x00000020u) {
      floor_latitude_ = from.floor_latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      floor_longitude_ = from.floor_longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      floor_img_width_ = from.floor_img_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      floor_img_length_ = from.floor_img_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      floor_level_ = from.floor_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_size_ = from.grid_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void floor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.floor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void floor::CopyFrom(const floor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.floor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool floor::IsInitialized() const {
  return true;
}

void floor::Swap(floor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void floor::InternalSwap(floor* other) {
  using std::swap;
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_name_.Swap(&other->floor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_img_path_.Swap(&other->floor_img_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  building_id_.Swap(&other->building_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  units_.Swap(&other->units_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(floor_latitude_, other->floor_latitude_);
  swap(floor_longitude_, other->floor_longitude_);
  swap(floor_img_width_, other->floor_img_width_);
  swap(floor_img_length_, other->floor_img_length_);
  swap(floor_level_, other->floor_level_);
  swap(grid_size_, other->grid_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata floor::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int point::kXFieldNumber;
const int point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

point::point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.point)
}
point::point(const point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.point)
}

void point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

point::~point() {
  // @@protoc_insertion_point(destructor:ce.nbapi.point)
  SharedDtor();
}

void point::SharedDtor() {
}

void point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* point::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const point& point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_point.base);
  return *internal_default_instance();
}


void point::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.point)
  return false;
#undef DO_
}

void point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.point)
}

::google::protobuf::uint8* point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.point)
  return target;
}

size_t point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.point)
  GOOGLE_DCHECK_NE(&from, this);
  const point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.point)
    MergeFrom(*source);
  }
}

void point::MergeFrom(const point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void point::CopyFrom(const point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool point::IsInitialized() const {
  return true;
}

void point::Swap(point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void point::InternalSwap(point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata point::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void geofence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int geofence::kFloorIdFieldNumber;
const int geofence::kGeofenceIdFieldNumber;
const int geofence::kGeofenceNameFieldNumber;
const int geofence::kTypeFieldNumber;
const int geofence::kPointListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

geofence::geofence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_geofence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.geofence)
}
geofence::geofence(const geofence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_list_(from.point_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_id()) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geofence_id()) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  geofence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geofence_name()) {
    geofence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.geofence)
}

void geofence::SharedCtor() {
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

geofence::~geofence() {
  // @@protoc_insertion_point(destructor:ce.nbapi.geofence)
  SharedDtor();
}

void geofence::SharedDtor() {
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void geofence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* geofence::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const geofence& geofence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_geofence.base);
  return *internal_default_instance();
}


void geofence::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.geofence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      floor_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      geofence_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      geofence_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool geofence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.geofence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes floor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_floor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes geofence_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_geofence_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string geofence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.geofence.geofence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.geofence.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.point point_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.geofence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.geofence)
  return false;
#undef DO_
}

void geofence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.geofence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes floor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->floor_id(), output);
  }

  // optional bytes geofence_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->geofence_id(), output);
  }

  // optional string geofence_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence.geofence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->geofence_name(), output);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // repeated .ce.nbapi.point point_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->point_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.geofence)
}

::google::protobuf::uint8* geofence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.geofence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes floor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->floor_id(), target);
  }

  // optional bytes geofence_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->geofence_id(), target);
  }

  // optional string geofence_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence.geofence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->geofence_name(), target);
  }

  // optional string type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // repeated .ce.nbapi.point point_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->point_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.geofence)
  return target;
}

size_t geofence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.geofence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.point point_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->point_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes floor_id = 1;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->floor_id());
    }

    // optional bytes geofence_id = 2;
    if (has_geofence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->geofence_id());
    }

    // optional string geofence_name = 3;
    if (has_geofence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geofence_name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void geofence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.geofence)
  GOOGLE_DCHECK_NE(&from, this);
  const geofence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const geofence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.geofence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.geofence)
    MergeFrom(*source);
  }
}

void geofence::MergeFrom(const geofence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.geofence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_list_.MergeFrom(from.point_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_floor_id();
      floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_geofence_id();
      geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_geofence_name();
      geofence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
}

void geofence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.geofence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void geofence::CopyFrom(const geofence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.geofence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool geofence::IsInitialized() const {
  return true;
}

void geofence::Swap(geofence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void geofence::InternalSwap(geofence* other) {
  using std::swap;
  CastToBase(&point_list_)->InternalSwap(CastToBase(&other->point_list_));
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geofence_name_.Swap(&other->geofence_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata geofence::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void geofence_notify_Access_point_info::InitAsDefaultInstance() {
  ::ce::nbapi::_geofence_notify_Access_point_info_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_geofence_notify_Access_point_info_default_instance_._instance.get_mutable()->radio_bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int geofence_notify_Access_point_info::kApMacFieldNumber;
const int geofence_notify_Access_point_info::kApNameFieldNumber;
const int geofence_notify_Access_point_info::kRadioBssidFieldNumber;
const int geofence_notify_Access_point_info::kRssiValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

geofence_notify_Access_point_info::geofence_notify_Access_point_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_geofence_notify_Access_point_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.geofence_notify.Access_point_info)
}
geofence_notify_Access_point_info::geofence_notify_Access_point_info(const geofence_notify_Access_point_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  if (from.has_radio_bssid()) {
    radio_bssid_ = new ::ce::nbapi::mac_address(*from.radio_bssid_);
  } else {
    radio_bssid_ = NULL;
  }
  rssi_val_ = from.rssi_val_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.geofence_notify.Access_point_info)
}

void geofence_notify_Access_point_info::SharedCtor() {
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_val_) -
      reinterpret_cast<char*>(&ap_mac_)) + sizeof(rssi_val_));
}

geofence_notify_Access_point_info::~geofence_notify_Access_point_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.geofence_notify.Access_point_info)
  SharedDtor();
}

void geofence_notify_Access_point_info::SharedDtor() {
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_mac_;
  if (this != internal_default_instance()) delete radio_bssid_;
}

void geofence_notify_Access_point_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* geofence_notify_Access_point_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const geofence_notify_Access_point_info& geofence_notify_Access_point_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_geofence_notify_Access_point_info.base);
  return *internal_default_instance();
}


void geofence_notify_Access_point_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.geofence_notify.Access_point_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ap_mac_ != NULL);
      ap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radio_bssid_ != NULL);
      radio_bssid_->Clear();
    }
  }
  rssi_val_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool geofence_notify_Access_point_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.geofence_notify.Access_point_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_mac = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.geofence_notify.Access_point_info.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_bssid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rssi_val = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.geofence_notify.Access_point_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.geofence_notify.Access_point_info)
  return false;
#undef DO_
}

void geofence_notify_Access_point_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.geofence_notify.Access_point_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ap_mac(), output);
  }

  // optional string ap_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence_notify.Access_point_info.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ap_name(), output);
  }

  // optional .ce.nbapi.mac_address radio_bssid = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_radio_bssid(), output);
  }

  // optional uint32 rssi_val = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rssi_val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.geofence_notify.Access_point_info)
}

::google::protobuf::uint8* geofence_notify_Access_point_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.geofence_notify.Access_point_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ap_mac(), deterministic, target);
  }

  // optional string ap_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence_notify.Access_point_info.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ap_name(), target);
  }

  // optional .ce.nbapi.mac_address radio_bssid = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_radio_bssid(), deterministic, target);
  }

  // optional uint32 rssi_val = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rssi_val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.geofence_notify.Access_point_info)
  return target;
}

size_t geofence_notify_Access_point_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.geofence_notify.Access_point_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string ap_name = 9;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional .ce.nbapi.mac_address ap_mac = 8;
    if (has_ap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

    // optional .ce.nbapi.mac_address radio_bssid = 10;
    if (has_radio_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_bssid_);
    }

    // optional uint32 rssi_val = 11;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rssi_val());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void geofence_notify_Access_point_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.geofence_notify.Access_point_info)
  GOOGLE_DCHECK_NE(&from, this);
  const geofence_notify_Access_point_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const geofence_notify_Access_point_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.geofence_notify.Access_point_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.geofence_notify.Access_point_info)
    MergeFrom(*source);
  }
}

void geofence_notify_Access_point_info::MergeFrom(const geofence_notify_Access_point_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.geofence_notify.Access_point_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radio_bssid()->::ce::nbapi::mac_address::MergeFrom(from.radio_bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      rssi_val_ = from.rssi_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void geofence_notify_Access_point_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.geofence_notify.Access_point_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void geofence_notify_Access_point_info::CopyFrom(const geofence_notify_Access_point_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.geofence_notify.Access_point_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool geofence_notify_Access_point_info::IsInitialized() const {
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  if (has_radio_bssid()) {
    if (!this->radio_bssid_->IsInitialized()) return false;
  }
  return true;
}

void geofence_notify_Access_point_info::Swap(geofence_notify_Access_point_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void geofence_notify_Access_point_info::InternalSwap(geofence_notify_Access_point_info* other) {
  using std::swap;
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_mac_, other->ap_mac_);
  swap(radio_bssid_, other->radio_bssid_);
  swap(rssi_val_, other->rssi_val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata geofence_notify_Access_point_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void geofence_notify::InitAsDefaultInstance() {
  ::ce::nbapi::_geofence_notify_default_instance_._instance.get_mutable()->sta_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int geofence_notify::kGeofenceEventFieldNumber;
const int geofence_notify::kGeofenceIdFieldNumber;
const int geofence_notify::kGeofenceNameFieldNumber;
const int geofence_notify::kStaMacFieldNumber;
const int geofence_notify::kAssociatedFieldNumber;
const int geofence_notify::kDwellTimeFieldNumber;
const int geofence_notify::kAccessPointInfoFieldNumber;
const int geofence_notify::kHashedStaMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

geofence_notify::geofence_notify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_geofence_notify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.geofence_notify)
}
geofence_notify::geofence_notify(const geofence_notify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      access_point_info_(from.access_point_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geofence_id()) {
    geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
  }
  geofence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_geofence_name()) {
    geofence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_name_);
  }
  hashed_sta_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_mac()) {
    hashed_sta_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_mac_);
  }
  if (from.has_sta_mac()) {
    sta_mac_ = new ::ce::nbapi::mac_address(*from.sta_mac_);
  } else {
    sta_mac_ = NULL;
  }
  ::memcpy(&geofence_event_, &from.geofence_event_,
    static_cast<size_t>(reinterpret_cast<char*>(&dwell_time_) -
    reinterpret_cast<char*>(&geofence_event_)) + sizeof(dwell_time_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.geofence_notify)
}

void geofence_notify::SharedCtor() {
  geofence_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dwell_time_) -
      reinterpret_cast<char*>(&sta_mac_)) + sizeof(dwell_time_));
}

geofence_notify::~geofence_notify() {
  // @@protoc_insertion_point(destructor:ce.nbapi.geofence_notify)
  SharedDtor();
}

void geofence_notify::SharedDtor() {
  geofence_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geofence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_mac_;
}

void geofence_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* geofence_notify::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const geofence_notify& geofence_notify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_geofence_notify.base);
  return *internal_default_instance();
}


void geofence_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.geofence_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_point_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      geofence_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      geofence_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hashed_sta_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sta_mac_ != NULL);
      sta_mac_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&geofence_event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dwell_time_) -
        reinterpret_cast<char*>(&geofence_event_)) + sizeof(dwell_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool geofence_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.geofence_notify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.geofence_notify.zone_event geofence_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::geofence_notify_zone_event_IsValid(value)) {
            set_geofence_event(static_cast< ::ce::nbapi::geofence_notify_zone_event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes geofence_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_geofence_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string geofence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geofence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.geofence_notify.geofence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address sta_mac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool associated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_associated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &associated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dwell_time = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dwell_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwell_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Access_point_info = 7 { ... };
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(59u /* 59 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(7, input, add_access_point_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_mac = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.geofence_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.geofence_notify)
  return false;
#undef DO_
}

void geofence_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.geofence_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.geofence_notify.zone_event geofence_event = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->geofence_event(), output);
  }

  // optional bytes geofence_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->geofence_id(), output);
  }

  // optional string geofence_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence_notify.geofence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->geofence_name(), output);
  }

  // optional .ce.nbapi.mac_address sta_mac = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sta_mac(), output);
  }

  // optional bool associated = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->associated(), output);
  }

  // optional uint32 dwell_time = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dwell_time(), output);
  }

  // repeated group Access_point_info = 7 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      7,
      this->access_point_info(static_cast<int>(i)),
      output);
  }

  // optional bytes hashed_sta_mac = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->hashed_sta_mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.geofence_notify)
}

::google::protobuf::uint8* geofence_notify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.geofence_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.geofence_notify.zone_event geofence_event = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->geofence_event(), target);
  }

  // optional bytes geofence_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->geofence_id(), target);
  }

  // optional string geofence_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geofence_name().data(), static_cast<int>(this->geofence_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.geofence_notify.geofence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->geofence_name(), target);
  }

  // optional .ce.nbapi.mac_address sta_mac = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sta_mac(), deterministic, target);
  }

  // optional bool associated = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->associated(), target);
  }

  // optional uint32 dwell_time = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dwell_time(), target);
  }

  // repeated group Access_point_info = 7 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        7, this->access_point_info(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes hashed_sta_mac = 30;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->hashed_sta_mac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.geofence_notify)
  return target;
}

size_t geofence_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.geofence_notify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated group Access_point_info = 7 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->access_point_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->access_point_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes geofence_id = 2;
    if (has_geofence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->geofence_id());
    }

    // optional string geofence_name = 3;
    if (has_geofence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geofence_name());
    }

    // optional bytes hashed_sta_mac = 30;
    if (has_hashed_sta_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_mac());
    }

    // optional .ce.nbapi.mac_address sta_mac = 4;
    if (has_sta_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_mac_);
    }

    // optional .ce.nbapi.geofence_notify.zone_event geofence_event = 1;
    if (has_geofence_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->geofence_event());
    }

    // optional bool associated = 5;
    if (has_associated()) {
      total_size += 1 + 1;
    }

    // optional uint32 dwell_time = 6 [default = 0];
    if (has_dwell_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwell_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void geofence_notify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.geofence_notify)
  GOOGLE_DCHECK_NE(&from, this);
  const geofence_notify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const geofence_notify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.geofence_notify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.geofence_notify)
    MergeFrom(*source);
  }
}

void geofence_notify::MergeFrom(const geofence_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.geofence_notify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  access_point_info_.MergeFrom(from.access_point_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_geofence_id();
      geofence_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_geofence_name();
      geofence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geofence_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hashed_sta_mac();
      hashed_sta_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_mac_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sta_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      geofence_event_ = from.geofence_event_;
    }
    if (cached_has_bits & 0x00000020u) {
      associated_ = from.associated_;
    }
    if (cached_has_bits & 0x00000040u) {
      dwell_time_ = from.dwell_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void geofence_notify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.geofence_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void geofence_notify::CopyFrom(const geofence_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.geofence_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool geofence_notify::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->access_point_info())) return false;
  if (has_sta_mac()) {
    if (!this->sta_mac_->IsInitialized()) return false;
  }
  return true;
}

void geofence_notify::Swap(geofence_notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void geofence_notify::InternalSwap(geofence_notify* other) {
  using std::swap;
  CastToBase(&access_point_info_)->InternalSwap(CastToBase(&other->access_point_info_));
  geofence_id_.Swap(&other->geofence_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  geofence_name_.Swap(&other->geofence_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_sta_mac_.Swap(&other->hashed_sta_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_mac_, other->sta_mac_);
  swap(geofence_event_, other->geofence_event_);
  swap(associated_, other->associated_);
  swap(dwell_time_, other->dwell_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata geofence_notify::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_radio::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_radio_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_radio_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_radio::kApEthMacFieldNumber;
const int stats_radio::kRadioNumberFieldNumber;
const int stats_radio::kChannelFieldNumber;
const int stats_radio::kPhyFieldNumber;
const int stats_radio::kModeFieldNumber;
const int stats_radio::kNoiseFloorFieldNumber;
const int stats_radio::kTxPowerFieldNumber;
const int stats_radio::kChannelUtilizationFieldNumber;
const int stats_radio::kRxChannelUtilizationFieldNumber;
const int stats_radio::kTxChannelUtilizationFieldNumber;
const int stats_radio::kTxReceivedFieldNumber;
const int stats_radio::kTxTransmittedFieldNumber;
const int stats_radio::kTxDroppedFieldNumber;
const int stats_radio::kTxDataReceivedFieldNumber;
const int stats_radio::kTxDataTransmittedFieldNumber;
const int stats_radio::kTxDataRetriedFieldNumber;
const int stats_radio::kRxFramesFieldNumber;
const int stats_radio::kRxRetriedFieldNumber;
const int stats_radio::kRxDataFramesFieldNumber;
const int stats_radio::kRxDataRetriedFieldNumber;
const int stats_radio::kRxFrameErrorsFieldNumber;
const int stats_radio::kTrafficStatsFieldNumber;
const int stats_radio::kPrioStatsFieldNumber;
const int stats_radio::kRateStatsFieldNumber;
const int stats_radio::kActualEirpFieldNumber;
const int stats_radio::kRadioMacFieldNumber;
const int stats_radio::kTxDataBytesFieldNumber;
const int stats_radio::kRxDataBytesFieldNumber;
const int stats_radio::kRadioBandFieldNumber;
const int stats_radio::kChannelBusy64FieldNumber;
const int stats_radio::kStaNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_radio::stats_radio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_radio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_radio)
}
stats_radio::stats_radio(const stats_radio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      traffic_stats_(from.traffic_stats_),
      prio_stats_(from.prio_stats_),
      rate_stats_(from.rate_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&radio_number_, &from.radio_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sta_number_) -
    reinterpret_cast<char*>(&radio_number_)) + sizeof(sta_number_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_radio)
}

void stats_radio::SharedCtor() {
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sta_number_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(sta_number_));
}

stats_radio::~stats_radio() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_radio)
  SharedDtor();
}

void stats_radio::SharedDtor() {
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
}

void stats_radio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_radio::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_radio& stats_radio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_radio.base);
  return *internal_default_instance();
}


void stats_radio::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_stats_.Clear();
  prio_stats_.Clear();
  rate_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&radio_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_power_) -
        reinterpret_cast<char*>(&radio_number_)) + sizeof(tx_power_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&channel_utilization_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_data_transmitted_) -
        reinterpret_cast<char*>(&channel_utilization_)) + sizeof(tx_data_transmitted_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&tx_data_retried_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&actual_eirp_) -
        reinterpret_cast<char*>(&tx_data_retried_)) + sizeof(actual_eirp_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&radio_band_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sta_number_) -
        reinterpret_cast<char*>(&radio_band_)) + sizeof(sta_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_radio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_radio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radio_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_radio_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radio_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.phy_type phy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::phy_type_IsValid(value)) {
            set_phy(static_cast< ::ce::nbapi::phy_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_radio.radio_mode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::stats_radio_radio_mode_IsValid(value)) {
            set_mode(static_cast< ::ce::nbapi::stats_radio_radio_mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 noise_floor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_noise_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noise_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_power = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tx_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_utilization = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_channel_utilization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_utilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_channel_utilization = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_rx_channel_utilization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_channel_utilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_channel_utilization = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_tx_channel_utilization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_channel_utilization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_received = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_tx_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_transmitted = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_tx_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_dropped = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_tx_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_received = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_tx_data_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_transmitted = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_tx_data_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_retried = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_tx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frames = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_rx_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_retried = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_rx_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_frames = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_rx_data_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_retried = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_rx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frame_errors = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_rx_frame_errors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frame_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_prio_stats prio_stats = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prio_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_rate_stats rate_stats = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rate_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actual_eirp = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_actual_eirp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actual_eirp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_bytes = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_tx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_data_bytes = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_rx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radio_band = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_radio_band();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radio_band_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_busy_64 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_channel_busy_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_busy_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sta_number = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_sta_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sta_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_radio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_radio)
  return false;
#undef DO_
}

void stats_radio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radio_number(), output);
  }

  // optional uint32 channel = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  // optional .ce.nbapi.phy_type phy = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->phy(), output);
  }

  // optional .ce.nbapi.stats_radio.radio_mode mode = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // optional uint32 noise_floor = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->noise_floor(), output);
  }

  // optional uint32 tx_power = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tx_power(), output);
  }

  // optional uint32 channel_utilization = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel_utilization(), output);
  }

  // optional uint32 rx_channel_utilization = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rx_channel_utilization(), output);
  }

  // optional uint32 tx_channel_utilization = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tx_channel_utilization(), output);
  }

  // optional uint32 tx_received = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tx_received(), output);
  }

  // optional uint32 tx_transmitted = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tx_transmitted(), output);
  }

  // optional uint32 tx_dropped = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tx_dropped(), output);
  }

  // optional uint32 tx_data_received = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tx_data_received(), output);
  }

  // optional uint32 tx_data_transmitted = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->tx_data_transmitted(), output);
  }

  // optional uint32 tx_data_retried = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tx_data_retried(), output);
  }

  // optional uint32 rx_frames = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rx_frames(), output);
  }

  // optional uint32 rx_retried = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rx_retried(), output);
  }

  // optional uint32 rx_data_frames = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->rx_data_frames(), output);
  }

  // optional uint32 rx_data_retried = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->rx_data_retried(), output);
  }

  // optional uint32 rx_frame_errors = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->rx_frame_errors(), output);
  }

  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->traffic_stats(static_cast<int>(i)),
      output);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->prio_stats(static_cast<int>(i)),
      output);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->rate_stats(static_cast<int>(i)),
      output);
  }

  // optional uint32 actual_eirp = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->actual_eirp(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_radio_mac(), output);
  }

  // optional uint64 tx_data_bytes = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->tx_data_bytes(), output);
  }

  // optional uint64 rx_data_bytes = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->rx_data_bytes(), output);
  }

  // optional uint32 radio_band = 30;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->radio_band(), output);
  }

  // optional uint32 channel_busy_64 = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->channel_busy_64(), output);
  }

  // optional uint32 sta_number = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->sta_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_radio)
}

::google::protobuf::uint8* stats_radio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radio_number(), target);
  }

  // optional uint32 channel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }

  // optional .ce.nbapi.phy_type phy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->phy(), target);
  }

  // optional .ce.nbapi.stats_radio.radio_mode mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // optional uint32 noise_floor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->noise_floor(), target);
  }

  // optional uint32 tx_power = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tx_power(), target);
  }

  // optional uint32 channel_utilization = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel_utilization(), target);
  }

  // optional uint32 rx_channel_utilization = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rx_channel_utilization(), target);
  }

  // optional uint32 tx_channel_utilization = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tx_channel_utilization(), target);
  }

  // optional uint32 tx_received = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tx_received(), target);
  }

  // optional uint32 tx_transmitted = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tx_transmitted(), target);
  }

  // optional uint32 tx_dropped = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tx_dropped(), target);
  }

  // optional uint32 tx_data_received = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tx_data_received(), target);
  }

  // optional uint32 tx_data_transmitted = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->tx_data_transmitted(), target);
  }

  // optional uint32 tx_data_retried = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tx_data_retried(), target);
  }

  // optional uint32 rx_frames = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rx_frames(), target);
  }

  // optional uint32 rx_retried = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rx_retried(), target);
  }

  // optional uint32 rx_data_frames = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->rx_data_frames(), target);
  }

  // optional uint32 rx_data_retried = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->rx_data_retried(), target);
  }

  // optional uint32 rx_frame_errors = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->rx_frame_errors(), target);
  }

  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->traffic_stats(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->prio_stats(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->rate_stats(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 actual_eirp = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->actual_eirp(), target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_radio_mac(), deterministic, target);
  }

  // optional uint64 tx_data_bytes = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->tx_data_bytes(), target);
  }

  // optional uint64 rx_data_bytes = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->rx_data_bytes(), target);
  }

  // optional uint32 radio_band = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->radio_band(), target);
  }

  // optional uint32 channel_busy_64 = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->channel_busy_64(), target);
  }

  // optional uint32 sta_number = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->sta_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_radio)
  return target;
}

size_t stats_radio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_radio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_stats(static_cast<int>(i)));
    }
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->prio_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prio_stats(static_cast<int>(i)));
    }
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->rate_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rate_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address ap_eth_mac = 1;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 27;
    if (has_radio_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional uint32 radio_number = 2;
    if (has_radio_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radio_number());
    }

    // optional uint32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .ce.nbapi.phy_type phy = 4;
    if (has_phy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phy());
    }

    // optional .ce.nbapi.stats_radio.radio_mode mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 noise_floor = 7;
    if (has_noise_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noise_floor());
    }

    // optional uint32 tx_power = 8;
    if (has_tx_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_power());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 channel_utilization = 9;
    if (has_channel_utilization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_utilization());
    }

    // optional uint32 rx_channel_utilization = 10;
    if (has_rx_channel_utilization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_channel_utilization());
    }

    // optional uint32 tx_channel_utilization = 11;
    if (has_tx_channel_utilization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_channel_utilization());
    }

    // optional uint32 tx_received = 12;
    if (has_tx_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_received());
    }

    // optional uint32 tx_transmitted = 13;
    if (has_tx_transmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_transmitted());
    }

    // optional uint32 tx_dropped = 14;
    if (has_tx_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_dropped());
    }

    // optional uint32 tx_data_received = 15;
    if (has_tx_data_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_received());
    }

    // optional uint32 tx_data_transmitted = 16;
    if (has_tx_data_transmitted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_transmitted());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 tx_data_retried = 17;
    if (has_tx_data_retried()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_retried());
    }

    // optional uint32 rx_frames = 18;
    if (has_rx_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frames());
    }

    // optional uint32 rx_retried = 19;
    if (has_rx_retried()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_retried());
    }

    // optional uint32 rx_data_frames = 20;
    if (has_rx_data_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_frames());
    }

    // optional uint32 rx_data_retried = 21;
    if (has_rx_data_retried()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_retried());
    }

    // optional uint32 rx_frame_errors = 22;
    if (has_rx_frame_errors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frame_errors());
    }

    // optional uint64 tx_data_bytes = 28;
    if (has_tx_data_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_bytes());
    }

    // optional uint32 actual_eirp = 26;
    if (has_actual_eirp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actual_eirp());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional uint32 radio_band = 30;
    if (has_radio_band()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radio_band());
    }

    // optional uint64 rx_data_bytes = 29;
    if (has_rx_data_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_data_bytes());
    }

    // optional uint32 channel_busy_64 = 31;
    if (has_channel_busy_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_busy_64());
    }

    // optional uint32 sta_number = 32;
    if (has_sta_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sta_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_radio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_radio)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_radio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_radio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_radio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_radio)
    MergeFrom(*source);
  }
}

void stats_radio::MergeFrom(const stats_radio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_radio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_stats_.MergeFrom(from.traffic_stats_);
  prio_stats_.MergeFrom(from.prio_stats_);
  rate_stats_.MergeFrom(from.rate_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      radio_number_ = from.radio_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000010u) {
      phy_ = from.phy_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      noise_floor_ = from.noise_floor_;
    }
    if (cached_has_bits & 0x00000080u) {
      tx_power_ = from.tx_power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      channel_utilization_ = from.channel_utilization_;
    }
    if (cached_has_bits & 0x00000200u) {
      rx_channel_utilization_ = from.rx_channel_utilization_;
    }
    if (cached_has_bits & 0x00000400u) {
      tx_channel_utilization_ = from.tx_channel_utilization_;
    }
    if (cached_has_bits & 0x00000800u) {
      tx_received_ = from.tx_received_;
    }
    if (cached_has_bits & 0x00001000u) {
      tx_transmitted_ = from.tx_transmitted_;
    }
    if (cached_has_bits & 0x00002000u) {
      tx_dropped_ = from.tx_dropped_;
    }
    if (cached_has_bits & 0x00004000u) {
      tx_data_received_ = from.tx_data_received_;
    }
    if (cached_has_bits & 0x00008000u) {
      tx_data_transmitted_ = from.tx_data_transmitted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      tx_data_retried_ = from.tx_data_retried_;
    }
    if (cached_has_bits & 0x00020000u) {
      rx_frames_ = from.rx_frames_;
    }
    if (cached_has_bits & 0x00040000u) {
      rx_retried_ = from.rx_retried_;
    }
    if (cached_has_bits & 0x00080000u) {
      rx_data_frames_ = from.rx_data_frames_;
    }
    if (cached_has_bits & 0x00100000u) {
      rx_data_retried_ = from.rx_data_retried_;
    }
    if (cached_has_bits & 0x00200000u) {
      rx_frame_errors_ = from.rx_frame_errors_;
    }
    if (cached_has_bits & 0x00400000u) {
      tx_data_bytes_ = from.tx_data_bytes_;
    }
    if (cached_has_bits & 0x00800000u) {
      actual_eirp_ = from.actual_eirp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      radio_band_ = from.radio_band_;
    }
    if (cached_has_bits & 0x02000000u) {
      rx_data_bytes_ = from.rx_data_bytes_;
    }
    if (cached_has_bits & 0x04000000u) {
      channel_busy_64_ = from.channel_busy_64_;
    }
    if (cached_has_bits & 0x08000000u) {
      sta_number_ = from.sta_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_radio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_radio::CopyFrom(const stats_radio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_radio::IsInitialized() const {
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_radio::Swap(stats_radio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_radio::InternalSwap(stats_radio* other) {
  using std::swap;
  CastToBase(&traffic_stats_)->InternalSwap(CastToBase(&other->traffic_stats_));
  CastToBase(&prio_stats_)->InternalSwap(CastToBase(&other->prio_stats_));
  CastToBase(&rate_stats_)->InternalSwap(CastToBase(&other->rate_stats_));
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(radio_number_, other->radio_number_);
  swap(channel_, other->channel_);
  swap(phy_, other->phy_);
  swap(mode_, other->mode_);
  swap(noise_floor_, other->noise_floor_);
  swap(tx_power_, other->tx_power_);
  swap(channel_utilization_, other->channel_utilization_);
  swap(rx_channel_utilization_, other->rx_channel_utilization_);
  swap(tx_channel_utilization_, other->tx_channel_utilization_);
  swap(tx_received_, other->tx_received_);
  swap(tx_transmitted_, other->tx_transmitted_);
  swap(tx_dropped_, other->tx_dropped_);
  swap(tx_data_received_, other->tx_data_received_);
  swap(tx_data_transmitted_, other->tx_data_transmitted_);
  swap(tx_data_retried_, other->tx_data_retried_);
  swap(rx_frames_, other->rx_frames_);
  swap(rx_retried_, other->rx_retried_);
  swap(rx_data_frames_, other->rx_data_frames_);
  swap(rx_data_retried_, other->rx_data_retried_);
  swap(rx_frame_errors_, other->rx_frame_errors_);
  swap(tx_data_bytes_, other->tx_data_bytes_);
  swap(actual_eirp_, other->actual_eirp_);
  swap(radio_band_, other->radio_band_);
  swap(rx_data_bytes_, other->rx_data_bytes_);
  swap(channel_busy_64_, other->channel_busy_64_);
  swap(sta_number_, other->sta_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_radio::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_vap::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_vap_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_vap_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_vap::kApEthMacFieldNumber;
const int stats_vap::kBssidFieldNumber;
const int stats_vap::kTxReceivedFieldNumber;
const int stats_vap::kTxTransmittedFieldNumber;
const int stats_vap::kTxDroppedFieldNumber;
const int stats_vap::kTxDataReceivedFieldNumber;
const int stats_vap::kTxDataTransmittedFieldNumber;
const int stats_vap::kTxDataRetriedFieldNumber;
const int stats_vap::kRxFramesFieldNumber;
const int stats_vap::kRxRetriedFieldNumber;
const int stats_vap::kRxDataFramesFieldNumber;
const int stats_vap::kRxDataRetriedFieldNumber;
const int stats_vap::kTrafficStatsFieldNumber;
const int stats_vap::kPrioStatsFieldNumber;
const int stats_vap::kRateStatsFieldNumber;
const int stats_vap::kStaNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_vap::stats_vap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_vap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_vap)
}
stats_vap::stats_vap(const stats_vap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      prio_stats_(from.prio_stats_),
      rate_stats_(from.rate_stats_),
      traffic_stats_(from.traffic_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  ::memcpy(&tx_received_, &from.tx_received_,
    static_cast<size_t>(reinterpret_cast<char*>(&rx_retried_) -
    reinterpret_cast<char*>(&tx_received_)) + sizeof(rx_retried_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_vap)
}

void stats_vap::SharedCtor() {
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_retried_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(rx_retried_));
}

stats_vap::~stats_vap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_vap)
  SharedDtor();
}

void stats_vap::SharedDtor() {
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete bssid_;
}

void stats_vap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_vap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_vap& stats_vap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_vap.base);
  return *internal_default_instance();
}


void stats_vap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_vap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prio_stats_.Clear();
  rate_stats_.Clear();
  traffic_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&tx_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_data_retried_) -
        reinterpret_cast<char*>(&tx_received_)) + sizeof(tx_data_retried_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&rx_data_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rx_retried_) -
        reinterpret_cast<char*>(&rx_data_frames_)) + sizeof(rx_retried_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_vap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_vap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tx_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_transmitted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tx_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_dropped = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tx_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_received = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tx_data_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_transmitted = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_tx_data_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_retried = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_frames = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_rx_data_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_retried = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_rx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prio_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rate_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sta_number = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_sta_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sta_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_frames = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_rx_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_retried = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_rx_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_vap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_vap)
  return false;
#undef DO_
}

void stats_vap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_vap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bssid(), output);
  }

  // optional uint32 tx_received = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_received(), output);
  }

  // optional uint32 tx_transmitted = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tx_transmitted(), output);
  }

  // optional uint32 tx_dropped = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_dropped(), output);
  }

  // optional uint32 tx_data_received = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tx_data_received(), output);
  }

  // optional uint32 tx_data_transmitted = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tx_data_transmitted(), output);
  }

  // optional uint32 tx_data_retried = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tx_data_retried(), output);
  }

  // optional uint32 rx_data_frames = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rx_data_frames(), output);
  }

  // optional uint32 rx_data_retried = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rx_data_retried(), output);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->prio_stats(static_cast<int>(i)),
      output);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->rate_stats(static_cast<int>(i)),
      output);
  }

  // optional uint32 sta_number = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sta_number(), output);
  }

  // optional uint32 rx_frames = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rx_frames(), output);
  }

  // optional uint32 rx_retried = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rx_retried(), output);
  }

  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->traffic_stats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_vap)
}

::google::protobuf::uint8* stats_vap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_vap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 tx_received = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_received(), target);
  }

  // optional uint32 tx_transmitted = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tx_transmitted(), target);
  }

  // optional uint32 tx_dropped = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_dropped(), target);
  }

  // optional uint32 tx_data_received = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tx_data_received(), target);
  }

  // optional uint32 tx_data_transmitted = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tx_data_transmitted(), target);
  }

  // optional uint32 tx_data_retried = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tx_data_retried(), target);
  }

  // optional uint32 rx_data_frames = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rx_data_frames(), target);
  }

  // optional uint32 rx_data_retried = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rx_data_retried(), target);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->prio_stats(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->rate_stats(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 sta_number = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sta_number(), target);
  }

  // optional uint32 rx_frames = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rx_frames(), target);
  }

  // optional uint32 rx_retried = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rx_retried(), target);
  }

  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->traffic_stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_vap)
  return target;
}

size_t stats_vap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_vap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->prio_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prio_stats(static_cast<int>(i)));
    }
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->rate_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rate_stats(static_cast<int>(i)));
    }
  }

  // repeated .ce.nbapi.data_traffic_type_stats traffic_stats = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_stats_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address ap_eth_mac = 1;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 2;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional uint32 tx_received = 5;
    if (has_tx_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_received());
    }

    // optional uint32 tx_transmitted = 6;
    if (has_tx_transmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_transmitted());
    }

    // optional uint32 tx_dropped = 7;
    if (has_tx_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_dropped());
    }

    // optional uint32 tx_data_received = 8;
    if (has_tx_data_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_received());
    }

    // optional uint32 tx_data_transmitted = 9;
    if (has_tx_data_transmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_transmitted());
    }

    // optional uint32 tx_data_retried = 10;
    if (has_tx_data_retried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_retried());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 rx_data_frames = 11;
    if (has_rx_data_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_frames());
    }

    // optional uint32 rx_data_retried = 12;
    if (has_rx_data_retried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_retried());
    }

    // optional uint32 sta_number = 15;
    if (has_sta_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sta_number());
    }

    // optional uint32 rx_frames = 18;
    if (has_rx_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_frames());
    }

    // optional uint32 rx_retried = 19;
    if (has_rx_retried()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_retried());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_vap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_vap)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_vap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_vap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_vap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_vap)
    MergeFrom(*source);
  }
}

void stats_vap::MergeFrom(const stats_vap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_vap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prio_stats_.MergeFrom(from.prio_stats_);
  rate_stats_.MergeFrom(from.rate_stats_);
  traffic_stats_.MergeFrom(from.traffic_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      tx_received_ = from.tx_received_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_transmitted_ = from.tx_transmitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      tx_dropped_ = from.tx_dropped_;
    }
    if (cached_has_bits & 0x00000020u) {
      tx_data_received_ = from.tx_data_received_;
    }
    if (cached_has_bits & 0x00000040u) {
      tx_data_transmitted_ = from.tx_data_transmitted_;
    }
    if (cached_has_bits & 0x00000080u) {
      tx_data_retried_ = from.tx_data_retried_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      rx_data_frames_ = from.rx_data_frames_;
    }
    if (cached_has_bits & 0x00000200u) {
      rx_data_retried_ = from.rx_data_retried_;
    }
    if (cached_has_bits & 0x00000400u) {
      sta_number_ = from.sta_number_;
    }
    if (cached_has_bits & 0x00000800u) {
      rx_frames_ = from.rx_frames_;
    }
    if (cached_has_bits & 0x00001000u) {
      rx_retried_ = from.rx_retried_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_vap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_vap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_vap::CopyFrom(const stats_vap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_vap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_vap::IsInitialized() const {
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  return true;
}

void stats_vap::Swap(stats_vap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_vap::InternalSwap(stats_vap* other) {
  using std::swap;
  CastToBase(&prio_stats_)->InternalSwap(CastToBase(&other->prio_stats_));
  CastToBase(&rate_stats_)->InternalSwap(CastToBase(&other->rate_stats_));
  CastToBase(&traffic_stats_)->InternalSwap(CastToBase(&other->traffic_stats_));
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(bssid_, other->bssid_);
  swap(tx_received_, other->tx_received_);
  swap(tx_transmitted_, other->tx_transmitted_);
  swap(tx_dropped_, other->tx_dropped_);
  swap(tx_data_received_, other->tx_data_received_);
  swap(tx_data_transmitted_, other->tx_data_transmitted_);
  swap(tx_data_retried_, other->tx_data_retried_);
  swap(rx_data_frames_, other->rx_data_frames_);
  swap(rx_data_retried_, other->rx_data_retried_);
  swap(sta_number_, other->sta_number_);
  swap(rx_frames_, other->rx_frames_);
  swap(rx_retried_, other->rx_retried_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_vap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_station::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_station_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_station_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_station_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_station::kStaEthMacFieldNumber;
const int stats_station::kApEthMacFieldNumber;
const int stats_station::kBssidFieldNumber;
const int stats_station::kSnrFieldNumber;
const int stats_station::kTxReceivedFieldNumber;
const int stats_station::kTxTransmittedFieldNumber;
const int stats_station::kTxDroppedFieldNumber;
const int stats_station::kTxDataReceivedFieldNumber;
const int stats_station::kTxDataTransmittedFieldNumber;
const int stats_station::kTxDataRetriedFieldNumber;
const int stats_station::kRxDataReceivedFieldNumber;
const int stats_station::kRxDataRetriedFieldNumber;
const int stats_station::kPrioStatsFieldNumber;
const int stats_station::kRateStatsFieldNumber;
const int stats_station::kSpeedFieldNumber;
const int stats_station::kRxRateFieldNumber;
const int stats_station::kTxRateFieldNumber;
const int stats_station::kRxDataBytesFieldNumber;
const int stats_station::kTxDataBytesFieldNumber;
const int stats_station::kSsidUpFieldNumber;
const int stats_station::kHashedStaEthMacFieldNumber;
const int stats_station::kMaxTxRateFieldNumber;
const int stats_station::kTxDataBytesTransmittedFieldNumber;
const int stats_station::kTxTimeDataFieldNumber;
const int stats_station::kRxTimeDataFieldNumber;
const int stats_station::kStaClientHealthFieldNumber;
const int stats_station::kRxRetriesFieldNumber;
const int stats_station::kTxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_station::stats_station()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_station.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_station)
}
stats_station::stats_station(const stats_station& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      prio_stats_(from.prio_stats_),
      rate_stats_(from.rate_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  ::memcpy(&snr_, &from.snr_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_retries_) -
    reinterpret_cast<char*>(&snr_)) + sizeof(tx_retries_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_station)
}

void stats_station::SharedCtor() {
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_retries_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(tx_retries_));
}

stats_station::~stats_station() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_station)
  SharedDtor();
}

void stats_station::SharedDtor() {
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete ap_eth_mac_;
  if (this != internal_default_instance()) delete bssid_;
}

void stats_station::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_station::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_station& stats_station::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_station.base);
  return *internal_default_instance();
}


void stats_station::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prio_stats_.Clear();
  rate_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&snr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_dropped_) -
        reinterpret_cast<char*>(&snr_)) + sizeof(tx_dropped_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&tx_data_received_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_rate_) -
        reinterpret_cast<char*>(&tx_data_received_)) + sizeof(tx_rate_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&rx_data_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sta_client_health_) -
        reinterpret_cast<char*>(&rx_data_bytes_)) + sizeof(sta_client_health_));
  }
  if (cached_has_bits & 50331648u) {
    ::memset(&rx_retries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_retries_) -
        reinterpret_cast<char*>(&rx_retries_)) + sizeof(tx_retries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_station::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_station)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address ap_eth_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 snr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tx_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_transmitted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tx_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_dropped = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tx_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_received = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_tx_data_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_transmitted = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_tx_data_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_data_retried = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_received = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_rx_data_received();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_data_retried = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_rx_data_retried();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_data_retried_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prio_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rate_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_rx_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_tx_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_data_bytes = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_rx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_bytes = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_tx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ssid_up = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_ssid_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssid_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_tx_rate = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_max_tx_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_tx_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_bytes_transmitted = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_tx_data_bytes_transmitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_bytes_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_time_data = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_tx_time_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_time_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_time_data = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_rx_time_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_time_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sta_client_health = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_sta_client_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sta_client_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_retries = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_rx_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_retries = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_tx_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_station)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_station)
  return false;
#undef DO_
}

void stats_station::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address ap_eth_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ap_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bssid(), output);
  }

  // optional uint32 snr = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->snr(), output);
  }

  // optional uint32 tx_received = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_received(), output);
  }

  // optional uint32 tx_transmitted = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tx_transmitted(), output);
  }

  // optional uint32 tx_dropped = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_dropped(), output);
  }

  // optional uint32 tx_data_received = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tx_data_received(), output);
  }

  // optional uint32 tx_data_transmitted = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tx_data_transmitted(), output);
  }

  // optional uint32 tx_data_retried = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tx_data_retried(), output);
  }

  // optional uint32 rx_data_received = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rx_data_received(), output);
  }

  // optional uint32 rx_data_retried = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rx_data_retried(), output);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->prio_stats(static_cast<int>(i)),
      output);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->rate_stats(static_cast<int>(i)),
      output);
  }

  // optional uint32 speed = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->speed(), output);
  }

  // optional uint64 rx_rate = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->rx_rate(), output);
  }

  // optional uint64 tx_rate = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->tx_rate(), output);
  }

  // optional uint64 rx_data_bytes = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->rx_data_bytes(), output);
  }

  // optional uint64 tx_data_bytes = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->tx_data_bytes(), output);
  }

  // optional uint32 ssid_up = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ssid_up(), output);
  }

  // optional bytes hashed_sta_eth_mac = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->hashed_sta_eth_mac(), output);
  }

  // optional uint64 max_tx_rate = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->max_tx_rate(), output);
  }

  // optional uint64 tx_data_bytes_transmitted = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->tx_data_bytes_transmitted(), output);
  }

  // optional uint32 tx_time_data = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tx_time_data(), output);
  }

  // optional uint32 rx_time_data = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->rx_time_data(), output);
  }

  // optional uint32 sta_client_health = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->sta_client_health(), output);
  }

  // optional uint32 rx_retries = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->rx_retries(), output);
  }

  // optional uint32 tx_retries = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->tx_retries(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_station)
}

::google::protobuf::uint8* stats_station::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address ap_eth_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 snr = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->snr(), target);
  }

  // optional uint32 tx_received = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_received(), target);
  }

  // optional uint32 tx_transmitted = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tx_transmitted(), target);
  }

  // optional uint32 tx_dropped = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_dropped(), target);
  }

  // optional uint32 tx_data_received = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tx_data_received(), target);
  }

  // optional uint32 tx_data_transmitted = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tx_data_transmitted(), target);
  }

  // optional uint32 tx_data_retried = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tx_data_retried(), target);
  }

  // optional uint32 rx_data_received = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rx_data_received(), target);
  }

  // optional uint32 rx_data_retried = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rx_data_retried(), target);
  }

  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prio_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->prio_stats(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->rate_stats(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 speed = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->speed(), target);
  }

  // optional uint64 rx_rate = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->rx_rate(), target);
  }

  // optional uint64 tx_rate = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->tx_rate(), target);
  }

  // optional uint64 rx_data_bytes = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->rx_data_bytes(), target);
  }

  // optional uint64 tx_data_bytes = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->tx_data_bytes(), target);
  }

  // optional uint32 ssid_up = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ssid_up(), target);
  }

  // optional bytes hashed_sta_eth_mac = 22;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->hashed_sta_eth_mac(), target);
  }

  // optional uint64 max_tx_rate = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->max_tx_rate(), target);
  }

  // optional uint64 tx_data_bytes_transmitted = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->tx_data_bytes_transmitted(), target);
  }

  // optional uint32 tx_time_data = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tx_time_data(), target);
  }

  // optional uint32 rx_time_data = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->rx_time_data(), target);
  }

  // optional uint32 sta_client_health = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->sta_client_health(), target);
  }

  // optional uint32 rx_retries = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->rx_retries(), target);
  }

  // optional uint32 tx_retries = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->tx_retries(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_station)
  return target;
}

size_t stats_station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_station)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.data_prio_stats prio_stats = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->prio_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prio_stats(static_cast<int>(i)));
    }
  }

  // repeated .ce.nbapi.data_rate_stats rate_stats = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->rate_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rate_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes hashed_sta_eth_mac = 22;
    if (has_hashed_sta_eth_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address ap_eth_mac = 2;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 3;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional uint32 snr = 4;
    if (has_snr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snr());
    }

    // optional uint32 tx_received = 5;
    if (has_tx_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_received());
    }

    // optional uint32 tx_transmitted = 6;
    if (has_tx_transmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_transmitted());
    }

    // optional uint32 tx_dropped = 7;
    if (has_tx_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_dropped());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 tx_data_received = 8;
    if (has_tx_data_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_received());
    }

    // optional uint32 tx_data_transmitted = 9;
    if (has_tx_data_transmitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_transmitted());
    }

    // optional uint32 tx_data_retried = 10;
    if (has_tx_data_retried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_data_retried());
    }

    // optional uint32 rx_data_received = 11;
    if (has_rx_data_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_received());
    }

    // optional uint32 rx_data_retried = 12;
    if (has_rx_data_retried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_data_retried());
    }

    // optional uint32 speed = 15;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional uint64 rx_rate = 16;
    if (has_rx_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_rate());
    }

    // optional uint64 tx_rate = 17;
    if (has_tx_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_rate());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 rx_data_bytes = 18;
    if (has_rx_data_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_data_bytes());
    }

    // optional uint64 tx_data_bytes = 19;
    if (has_tx_data_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_bytes());
    }

    // optional uint32 ssid_up = 20;
    if (has_ssid_up()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssid_up());
    }

    // optional uint32 tx_time_data = 25;
    if (has_tx_time_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_time_data());
    }

    // optional uint64 max_tx_rate = 23;
    if (has_max_tx_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_tx_rate());
    }

    // optional uint64 tx_data_bytes_transmitted = 24;
    if (has_tx_data_bytes_transmitted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_bytes_transmitted());
    }

    // optional uint32 rx_time_data = 26;
    if (has_rx_time_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_time_data());
    }

    // optional uint32 sta_client_health = 27;
    if (has_sta_client_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sta_client_health());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional uint32 rx_retries = 28;
    if (has_rx_retries()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_retries());
    }

    // optional uint32 tx_retries = 29;
    if (has_tx_retries()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_retries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_station::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_station)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_station* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_station>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_station)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_station)
    MergeFrom(*source);
  }
}

void stats_station::MergeFrom(const stats_station& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_station)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prio_stats_.MergeFrom(from.prio_stats_);
  rate_stats_.MergeFrom(from.rate_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000010u) {
      snr_ = from.snr_;
    }
    if (cached_has_bits & 0x00000020u) {
      tx_received_ = from.tx_received_;
    }
    if (cached_has_bits & 0x00000040u) {
      tx_transmitted_ = from.tx_transmitted_;
    }
    if (cached_has_bits & 0x00000080u) {
      tx_dropped_ = from.tx_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tx_data_received_ = from.tx_data_received_;
    }
    if (cached_has_bits & 0x00000200u) {
      tx_data_transmitted_ = from.tx_data_transmitted_;
    }
    if (cached_has_bits & 0x00000400u) {
      tx_data_retried_ = from.tx_data_retried_;
    }
    if (cached_has_bits & 0x00000800u) {
      rx_data_received_ = from.rx_data_received_;
    }
    if (cached_has_bits & 0x00001000u) {
      rx_data_retried_ = from.rx_data_retried_;
    }
    if (cached_has_bits & 0x00002000u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00004000u) {
      rx_rate_ = from.rx_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      tx_rate_ = from.tx_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      rx_data_bytes_ = from.rx_data_bytes_;
    }
    if (cached_has_bits & 0x00020000u) {
      tx_data_bytes_ = from.tx_data_bytes_;
    }
    if (cached_has_bits & 0x00040000u) {
      ssid_up_ = from.ssid_up_;
    }
    if (cached_has_bits & 0x00080000u) {
      tx_time_data_ = from.tx_time_data_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_tx_rate_ = from.max_tx_rate_;
    }
    if (cached_has_bits & 0x00200000u) {
      tx_data_bytes_transmitted_ = from.tx_data_bytes_transmitted_;
    }
    if (cached_has_bits & 0x00400000u) {
      rx_time_data_ = from.rx_time_data_;
    }
    if (cached_has_bits & 0x00800000u) {
      sta_client_health_ = from.sta_client_health_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      rx_retries_ = from.rx_retries_;
    }
    if (cached_has_bits & 0x02000000u) {
      tx_retries_ = from.tx_retries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_station::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_station::CopyFrom(const stats_station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_station::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  return true;
}

void stats_station::Swap(stats_station* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_station::InternalSwap(stats_station* other) {
  using std::swap;
  CastToBase(&prio_stats_)->InternalSwap(CastToBase(&other->prio_stats_));
  CastToBase(&rate_stats_)->InternalSwap(CastToBase(&other->rate_stats_));
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(bssid_, other->bssid_);
  swap(snr_, other->snr_);
  swap(tx_received_, other->tx_received_);
  swap(tx_transmitted_, other->tx_transmitted_);
  swap(tx_dropped_, other->tx_dropped_);
  swap(tx_data_received_, other->tx_data_received_);
  swap(tx_data_transmitted_, other->tx_data_transmitted_);
  swap(tx_data_retried_, other->tx_data_retried_);
  swap(rx_data_received_, other->rx_data_received_);
  swap(rx_data_retried_, other->rx_data_retried_);
  swap(speed_, other->speed_);
  swap(rx_rate_, other->rx_rate_);
  swap(tx_rate_, other->tx_rate_);
  swap(rx_data_bytes_, other->rx_data_bytes_);
  swap(tx_data_bytes_, other->tx_data_bytes_);
  swap(ssid_up_, other->ssid_up_);
  swap(tx_time_data_, other->tx_time_data_);
  swap(max_tx_rate_, other->max_tx_rate_);
  swap(tx_data_bytes_transmitted_, other->tx_data_bytes_transmitted_);
  swap(rx_time_data_, other->rx_time_data_);
  swap(sta_client_health_, other->sta_client_health_);
  swap(rx_retries_, other->rx_retries_);
  swap(tx_retries_, other->tx_retries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_station::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void state_station::InitAsDefaultInstance() {
  ::ce::nbapi::_state_station_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_state_station_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int state_station::kStaEthMacFieldNumber;
const int state_station::kApEthMacFieldNumber;
const int state_station::kSnrFieldNumber;
const int state_station::kRxTriesFieldNumber;
const int state_station::kTxTriesFieldNumber;
const int state_station::kPhyTypeFieldNumber;
const int state_station::kSecurityTypeFieldNumber;
const int state_station::kHashedStaEthMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

state_station::state_station()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_state_station.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.state_station)
}
state_station::state_station(const state_station& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  ::memcpy(&snr_, &from.snr_,
    static_cast<size_t>(reinterpret_cast<char*>(&security_type_) -
    reinterpret_cast<char*>(&snr_)) + sizeof(security_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.state_station)
}

void state_station::SharedCtor() {
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_type_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(security_type_));
}

state_station::~state_station() {
  // @@protoc_insertion_point(destructor:ce.nbapi.state_station)
  SharedDtor();
}

void state_station::SharedDtor() {
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete ap_eth_mac_;
}

void state_station::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* state_station::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const state_station& state_station::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_state_station.base);
  return *internal_default_instance();
}


void state_station::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.state_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&snr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&security_type_) -
        reinterpret_cast<char*>(&snr_)) + sizeof(security_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool state_station::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.state_station)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address ap_eth_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 snr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rx_tries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rx_tries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_tries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_tries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tx_tries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_tries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.phy_type phy_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::phy_type_IsValid(value)) {
            set_phy_type(static_cast< ::ce::nbapi::phy_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 security_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_security_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &security_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.state_station)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.state_station)
  return false;
#undef DO_
}

void state_station::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.state_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address ap_eth_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ap_eth_mac(), output);
  }

  // optional uint32 snr = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->snr(), output);
  }

  // optional uint32 rx_tries = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rx_tries(), output);
  }

  // optional uint32 tx_tries = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_tries(), output);
  }

  // optional .ce.nbapi.phy_type phy_type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->phy_type(), output);
  }

  // optional uint32 security_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->security_type(), output);
  }

  // optional bytes hashed_sta_eth_mac = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->hashed_sta_eth_mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.state_station)
}

::google::protobuf::uint8* state_station::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.state_station)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address ap_eth_mac = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional uint32 snr = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->snr(), target);
  }

  // optional uint32 rx_tries = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rx_tries(), target);
  }

  // optional uint32 tx_tries = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_tries(), target);
  }

  // optional .ce.nbapi.phy_type phy_type = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->phy_type(), target);
  }

  // optional uint32 security_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->security_type(), target);
  }

  // optional bytes hashed_sta_eth_mac = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->hashed_sta_eth_mac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.state_station)
  return target;
}

size_t state_station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.state_station)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes hashed_sta_eth_mac = 8;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address ap_eth_mac = 2;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional uint32 snr = 3;
    if (has_snr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snr());
    }

    // optional uint32 rx_tries = 4;
    if (has_rx_tries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rx_tries());
    }

    // optional uint32 tx_tries = 5;
    if (has_tx_tries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_tries());
    }

    // optional .ce.nbapi.phy_type phy_type = 6;
    if (has_phy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phy_type());
    }

    // optional uint32 security_type = 7;
    if (has_security_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->security_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void state_station::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.state_station)
  GOOGLE_DCHECK_NE(&from, this);
  const state_station* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const state_station>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.state_station)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.state_station)
    MergeFrom(*source);
  }
}

void state_station::MergeFrom(const state_station& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.state_station)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      snr_ = from.snr_;
    }
    if (cached_has_bits & 0x00000010u) {
      rx_tries_ = from.rx_tries_;
    }
    if (cached_has_bits & 0x00000020u) {
      tx_tries_ = from.tx_tries_;
    }
    if (cached_has_bits & 0x00000040u) {
      phy_type_ = from.phy_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      security_type_ = from.security_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void state_station::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.state_station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void state_station::CopyFrom(const state_station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.state_station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_station::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  return true;
}

void state_station::Swap(state_station* other) {
  if (other == this) return;
  InternalSwap(other);
}
void state_station::InternalSwap(state_station* other) {
  using std::swap;
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(snr_, other->snr_);
  swap(rx_tries_, other->rx_tries_);
  swap(tx_tries_, other->tx_tries_);
  swap(phy_type_, other->phy_type_);
  swap(security_type_, other->security_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata state_station::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void uplink_bandwidth::InitAsDefaultInstance() {
  ::ce::nbapi::_uplink_bandwidth_default_instance_._instance.get_mutable()->server_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_uplink_bandwidth_default_instance_._instance.get_mutable()->local_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_uplink_bandwidth_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int uplink_bandwidth::kServerIpFieldNumber;
const int uplink_bandwidth::kServerPortFieldNumber;
const int uplink_bandwidth::kLocalIpFieldNumber;
const int uplink_bandwidth::kLocalPortFieldNumber;
const int uplink_bandwidth::kApMacFieldNumber;
const int uplink_bandwidth::kApNameFieldNumber;
const int uplink_bandwidth::kTimestampFieldNumber;
const int uplink_bandwidth::kProtocolFieldNumber;
const int uplink_bandwidth::kIntervalFieldNumber;
const int uplink_bandwidth::kUpstreamBytesFieldNumber;
const int uplink_bandwidth::kUpstreamBandwidthFieldNumber;
const int uplink_bandwidth::kUpstreamRetriesFieldNumber;
const int uplink_bandwidth::kDownstreamBytesFieldNumber;
const int uplink_bandwidth::kDownstreamBandwidthFieldNumber;
const int uplink_bandwidth::kDownstreamRetriesFieldNumber;
const int uplink_bandwidth::kUpstreamDatagramsFieldNumber;
const int uplink_bandwidth::kDownstreamDatagramsFieldNumber;
const int uplink_bandwidth::kUpstreamJitterFieldNumber;
const int uplink_bandwidth::kDownstreamJitterFieldNumber;
const int uplink_bandwidth::kUpstreamLostPacketsFieldNumber;
const int uplink_bandwidth::kDownstreamLostPacketsFieldNumber;
const int uplink_bandwidth::kHashedApEthMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

uplink_bandwidth::uplink_bandwidth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_uplink_bandwidth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.uplink_bandwidth)
}
uplink_bandwidth::uplink_bandwidth(const uplink_bandwidth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  upstream_jitter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upstream_jitter()) {
    upstream_jitter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_jitter_);
  }
  downstream_jitter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_downstream_jitter()) {
    downstream_jitter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downstream_jitter_);
  }
  hashed_ap_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_ap_eth_mac()) {
    hashed_ap_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_ap_eth_mac_);
  }
  if (from.has_server_ip()) {
    server_ip_ = new ::ce::nbapi::ip_address(*from.server_ip_);
  } else {
    server_ip_ = NULL;
  }
  if (from.has_local_ip()) {
    local_ip_ = new ::ce::nbapi::ip_address(*from.local_ip_);
  } else {
    local_ip_ = NULL;
  }
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  ::memcpy(&server_port_, &from.server_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&downstream_lost_packets_) -
    reinterpret_cast<char*>(&server_port_)) + sizeof(downstream_lost_packets_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.uplink_bandwidth)
}

void uplink_bandwidth::SharedCtor() {
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upstream_jitter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downstream_jitter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_ap_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downstream_lost_packets_) -
      reinterpret_cast<char*>(&server_ip_)) + sizeof(downstream_lost_packets_));
}

uplink_bandwidth::~uplink_bandwidth() {
  // @@protoc_insertion_point(destructor:ce.nbapi.uplink_bandwidth)
  SharedDtor();
}

void uplink_bandwidth::SharedDtor() {
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upstream_jitter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downstream_jitter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_ap_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_ip_;
  if (this != internal_default_instance()) delete local_ip_;
  if (this != internal_default_instance()) delete ap_mac_;
}

void uplink_bandwidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* uplink_bandwidth::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const uplink_bandwidth& uplink_bandwidth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_uplink_bandwidth.base);
  return *internal_default_instance();
}


void uplink_bandwidth::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.uplink_bandwidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      upstream_jitter_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      downstream_jitter_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      hashed_ap_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(server_ip_ != NULL);
      server_ip_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(local_ip_ != NULL);
      local_ip_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ap_mac_ != NULL);
      ap_mac_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&server_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&downstream_bytes_) -
        reinterpret_cast<char*>(&server_port_)) + sizeof(downstream_bytes_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&downstream_bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&downstream_lost_packets_) -
        reinterpret_cast<char*>(&downstream_bandwidth_)) + sizeof(downstream_lost_packets_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool uplink_bandwidth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.uplink_bandwidth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.ip_address server_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address local_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 local_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_local_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address ap_mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_bandwidth.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string protocol = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_bandwidth.protocol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 interval = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upstream_bytes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_upstream_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upstream_bandwidth = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_upstream_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upstream_retries = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_upstream_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 downstream_bytes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_downstream_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downstream_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 downstream_bandwidth = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_downstream_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downstream_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 downstream_retries = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_downstream_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downstream_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upstream_datagrams = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_upstream_datagrams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_datagrams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 downstream_datagrams = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_downstream_datagrams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downstream_datagrams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string upstream_jitter = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upstream_jitter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upstream_jitter().data(), static_cast<int>(this->upstream_jitter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_bandwidth.upstream_jitter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string downstream_jitter = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downstream_jitter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downstream_jitter().data(), static_cast<int>(this->downstream_jitter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_bandwidth.downstream_jitter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upstream_lost_packets = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_upstream_lost_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_lost_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 downstream_lost_packets = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_downstream_lost_packets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downstream_lost_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_ap_eth_mac = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.uplink_bandwidth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.uplink_bandwidth)
  return false;
#undef DO_
}

void uplink_bandwidth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.uplink_bandwidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address server_ip = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server_ip(), output);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // optional .ce.nbapi.ip_address local_ip = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_local_ip(), output);
  }

  // optional uint32 local_port = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->local_port(), output);
  }

  // optional .ce.nbapi.mac_address ap_mac = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ap_mac(), output);
  }

  // optional string ap_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ap_name(), output);
  }

  // optional uint64 timestamp = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  // optional string protocol = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->protocol(), output);
  }

  // optional uint32 interval = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->interval(), output);
  }

  // optional uint32 upstream_bytes = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->upstream_bytes(), output);
  }

  // optional uint32 upstream_bandwidth = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->upstream_bandwidth(), output);
  }

  // optional uint32 upstream_retries = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->upstream_retries(), output);
  }

  // optional uint32 downstream_bytes = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->downstream_bytes(), output);
  }

  // optional uint32 downstream_bandwidth = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->downstream_bandwidth(), output);
  }

  // optional uint32 downstream_retries = 15;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->downstream_retries(), output);
  }

  // optional uint32 upstream_datagrams = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->upstream_datagrams(), output);
  }

  // optional uint32 downstream_datagrams = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->downstream_datagrams(), output);
  }

  // optional string upstream_jitter = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upstream_jitter().data(), static_cast<int>(this->upstream_jitter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.upstream_jitter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->upstream_jitter(), output);
  }

  // optional string downstream_jitter = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downstream_jitter().data(), static_cast<int>(this->downstream_jitter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.downstream_jitter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->downstream_jitter(), output);
  }

  // optional uint32 upstream_lost_packets = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->upstream_lost_packets(), output);
  }

  // optional uint32 downstream_lost_packets = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->downstream_lost_packets(), output);
  }

  // optional bytes hashed_ap_eth_mac = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->hashed_ap_eth_mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.uplink_bandwidth)
}

::google::protobuf::uint8* uplink_bandwidth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.uplink_bandwidth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address server_ip = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server_ip(), deterministic, target);
  }

  // optional uint32 server_port = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_port(), target);
  }

  // optional .ce.nbapi.ip_address local_ip = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_local_ip(), deterministic, target);
  }

  // optional uint32 local_port = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->local_port(), target);
  }

  // optional .ce.nbapi.mac_address ap_mac = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ap_mac(), deterministic, target);
  }

  // optional string ap_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ap_name(), target);
  }

  // optional uint64 timestamp = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  // optional string protocol = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->protocol(), target);
  }

  // optional uint32 interval = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->interval(), target);
  }

  // optional uint32 upstream_bytes = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->upstream_bytes(), target);
  }

  // optional uint32 upstream_bandwidth = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->upstream_bandwidth(), target);
  }

  // optional uint32 upstream_retries = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->upstream_retries(), target);
  }

  // optional uint32 downstream_bytes = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->downstream_bytes(), target);
  }

  // optional uint32 downstream_bandwidth = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->downstream_bandwidth(), target);
  }

  // optional uint32 downstream_retries = 15;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->downstream_retries(), target);
  }

  // optional uint32 upstream_datagrams = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->upstream_datagrams(), target);
  }

  // optional uint32 downstream_datagrams = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->downstream_datagrams(), target);
  }

  // optional string upstream_jitter = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upstream_jitter().data(), static_cast<int>(this->upstream_jitter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.upstream_jitter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->upstream_jitter(), target);
  }

  // optional string downstream_jitter = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downstream_jitter().data(), static_cast<int>(this->downstream_jitter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_bandwidth.downstream_jitter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->downstream_jitter(), target);
  }

  // optional uint32 upstream_lost_packets = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->upstream_lost_packets(), target);
  }

  // optional uint32 downstream_lost_packets = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->downstream_lost_packets(), target);
  }

  // optional bytes hashed_ap_eth_mac = 22;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->hashed_ap_eth_mac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.uplink_bandwidth)
  return target;
}

size_t uplink_bandwidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.uplink_bandwidth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ap_name = 6;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional string protocol = 8;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string upstream_jitter = 18;
    if (has_upstream_jitter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upstream_jitter());
    }

    // optional string downstream_jitter = 19;
    if (has_downstream_jitter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downstream_jitter());
    }

    // optional bytes hashed_ap_eth_mac = 22;
    if (has_hashed_ap_eth_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_ap_eth_mac());
    }

    // optional .ce.nbapi.ip_address server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_ip_);
    }

    // optional .ce.nbapi.ip_address local_ip = 3;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *local_ip_);
    }

    // optional .ce.nbapi.mac_address ap_mac = 5;
    if (has_ap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 local_port = 4;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_port());
    }

    // optional uint64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 interval = 9;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // optional uint32 upstream_bytes = 10;
    if (has_upstream_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_bytes());
    }

    // optional uint32 upstream_bandwidth = 11;
    if (has_upstream_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_bandwidth());
    }

    // optional uint32 upstream_retries = 12;
    if (has_upstream_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_retries());
    }

    // optional uint32 downstream_bytes = 13;
    if (has_downstream_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downstream_bytes());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 downstream_bandwidth = 14;
    if (has_downstream_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downstream_bandwidth());
    }

    // optional uint32 downstream_retries = 15;
    if (has_downstream_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downstream_retries());
    }

    // optional uint32 upstream_datagrams = 16;
    if (has_upstream_datagrams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_datagrams());
    }

    // optional uint32 downstream_datagrams = 17;
    if (has_downstream_datagrams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downstream_datagrams());
    }

    // optional uint32 upstream_lost_packets = 20;
    if (has_upstream_lost_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_lost_packets());
    }

    // optional uint32 downstream_lost_packets = 21;
    if (has_downstream_lost_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downstream_lost_packets());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uplink_bandwidth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.uplink_bandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  const uplink_bandwidth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const uplink_bandwidth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.uplink_bandwidth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.uplink_bandwidth)
    MergeFrom(*source);
  }
}

void uplink_bandwidth::MergeFrom(const uplink_bandwidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.uplink_bandwidth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_upstream_jitter();
      upstream_jitter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upstream_jitter_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_downstream_jitter();
      downstream_jitter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.downstream_jitter_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_hashed_ap_eth_mac();
      hashed_ap_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_ap_eth_mac_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_server_ip()->::ce::nbapi::ip_address::MergeFrom(from.server_ip());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_local_ip()->::ce::nbapi::ip_address::MergeFrom(from.local_ip());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000200u) {
      local_port_ = from.local_port_;
    }
    if (cached_has_bits & 0x00000400u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      interval_ = from.interval_;
    }
    if (cached_has_bits & 0x00001000u) {
      upstream_bytes_ = from.upstream_bytes_;
    }
    if (cached_has_bits & 0x00002000u) {
      upstream_bandwidth_ = from.upstream_bandwidth_;
    }
    if (cached_has_bits & 0x00004000u) {
      upstream_retries_ = from.upstream_retries_;
    }
    if (cached_has_bits & 0x00008000u) {
      downstream_bytes_ = from.downstream_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      downstream_bandwidth_ = from.downstream_bandwidth_;
    }
    if (cached_has_bits & 0x00020000u) {
      downstream_retries_ = from.downstream_retries_;
    }
    if (cached_has_bits & 0x00040000u) {
      upstream_datagrams_ = from.upstream_datagrams_;
    }
    if (cached_has_bits & 0x00080000u) {
      downstream_datagrams_ = from.downstream_datagrams_;
    }
    if (cached_has_bits & 0x00100000u) {
      upstream_lost_packets_ = from.upstream_lost_packets_;
    }
    if (cached_has_bits & 0x00200000u) {
      downstream_lost_packets_ = from.downstream_lost_packets_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void uplink_bandwidth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.uplink_bandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uplink_bandwidth::CopyFrom(const uplink_bandwidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.uplink_bandwidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uplink_bandwidth::IsInitialized() const {
  if (has_server_ip()) {
    if (!this->server_ip_->IsInitialized()) return false;
  }
  if (has_local_ip()) {
    if (!this->local_ip_->IsInitialized()) return false;
  }
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  return true;
}

void uplink_bandwidth::Swap(uplink_bandwidth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void uplink_bandwidth::InternalSwap(uplink_bandwidth* other) {
  using std::swap;
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  upstream_jitter_.Swap(&other->upstream_jitter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  downstream_jitter_.Swap(&other->downstream_jitter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_ap_eth_mac_.Swap(&other->hashed_ap_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_ip_, other->server_ip_);
  swap(local_ip_, other->local_ip_);
  swap(ap_mac_, other->ap_mac_);
  swap(server_port_, other->server_port_);
  swap(local_port_, other->local_port_);
  swap(timestamp_, other->timestamp_);
  swap(interval_, other->interval_);
  swap(upstream_bytes_, other->upstream_bytes_);
  swap(upstream_bandwidth_, other->upstream_bandwidth_);
  swap(upstream_retries_, other->upstream_retries_);
  swap(downstream_bytes_, other->downstream_bytes_);
  swap(downstream_bandwidth_, other->downstream_bandwidth_);
  swap(downstream_retries_, other->downstream_retries_);
  swap(upstream_datagrams_, other->upstream_datagrams_);
  swap(downstream_datagrams_, other->downstream_datagrams_);
  swap(upstream_lost_packets_, other->upstream_lost_packets_);
  swap(downstream_lost_packets_, other->downstream_lost_packets_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata uplink_bandwidth::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void uplink_info::InitAsDefaultInstance() {
  ::ce::nbapi::_uplink_info_default_instance_._instance.get_mutable()->device_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_uplink_info_default_instance_._instance.get_mutable()->peer_tunnel_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_uplink_info_default_instance_._instance.get_mutable()->tunnel_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int uplink_info::kDeviceMacFieldNumber;
const int uplink_info::kLinkIdFieldNumber;
const int uplink_info::kDescFieldNumber;
const int uplink_info::kLinkStatusFieldNumber;
const int uplink_info::kVlanIdFieldNumber;
const int uplink_info::kPortTunnelDescFieldNumber;
const int uplink_info::kLinkPrioFieldNumber;
const int uplink_info::kWanStatusFieldNumber;
const int uplink_info::kCryptoTypeFieldNumber;
const int uplink_info::kTunnelActiveStatusFieldNumber;
const int uplink_info::kTunnelUptimeFieldNumber;
const int uplink_info::kPeerTunnelIpFieldNumber;
const int uplink_info::kTunnelIpFieldNumber;
const int uplink_info::kTunnelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

uplink_info::uplink_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_uplink_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.uplink_info)
}
uplink_info::uplink_info(const uplink_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc()) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  port_tunnel_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_port_tunnel_desc()) {
    port_tunnel_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_tunnel_desc_);
  }
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tunnel_name()) {
    tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
  }
  if (from.has_device_mac()) {
    device_mac_ = new ::ce::nbapi::mac_address(*from.device_mac_);
  } else {
    device_mac_ = NULL;
  }
  if (from.has_peer_tunnel_ip()) {
    peer_tunnel_ip_ = new ::ce::nbapi::ip_address(*from.peer_tunnel_ip_);
  } else {
    peer_tunnel_ip_ = NULL;
  }
  if (from.has_tunnel_ip()) {
    tunnel_ip_ = new ::ce::nbapi::ip_address(*from.tunnel_ip_);
  } else {
    tunnel_ip_ = NULL;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tunnel_active_status_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(tunnel_active_status_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.uplink_info)
}

void uplink_info::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_tunnel_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tunnel_active_status_) -
      reinterpret_cast<char*>(&device_mac_)) + sizeof(tunnel_active_status_));
}

uplink_info::~uplink_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.uplink_info)
  SharedDtor();
}

void uplink_info::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_tunnel_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tunnel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_mac_;
  if (this != internal_default_instance()) delete peer_tunnel_ip_;
  if (this != internal_default_instance()) delete tunnel_ip_;
}

void uplink_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* uplink_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const uplink_info& uplink_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_uplink_info.base);
  return *internal_default_instance();
}


void uplink_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.uplink_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      port_tunnel_desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      tunnel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(device_mac_ != NULL);
      device_mac_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(peer_tunnel_ip_ != NULL);
      peer_tunnel_ip_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tunnel_ip_ != NULL);
      tunnel_ip_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&link_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vlan_id_) -
        reinterpret_cast<char*>(&link_id_)) + sizeof(vlan_id_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&link_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tunnel_active_status_) -
        reinterpret_cast<char*>(&link_status_)) + sizeof(tunnel_active_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool uplink_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.uplink_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address device_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 link_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_info.desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 link_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_link_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 vlan_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_vlan_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vlan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string port_tunnel_desc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_tunnel_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port_tunnel_desc().data(), static_cast<int>(this->port_tunnel_desc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_info.port_tunnel_desc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 link_prio = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_link_prio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wan_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_wan_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wan_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crypto_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_crypto_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crypto_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tunnel_active_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tunnel_active_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tunnel_active_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tunnel_uptime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_tunnel_uptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tunnel_uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address peer_tunnel_ip = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_tunnel_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address tunnel_ip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tunnel_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tunnel_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tunnel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.uplink_info.tunnel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.uplink_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.uplink_info)
  return false;
#undef DO_
}

void uplink_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.uplink_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_device_mac(), output);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->link_id(), output);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // optional uint32 link_status = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->link_status(), output);
  }

  // optional uint64 vlan_id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->vlan_id(), output);
  }

  // optional string port_tunnel_desc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port_tunnel_desc().data(), static_cast<int>(this->port_tunnel_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.port_tunnel_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->port_tunnel_desc(), output);
  }

  // optional uint32 link_prio = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->link_prio(), output);
  }

  // optional uint32 wan_status = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->wan_status(), output);
  }

  // optional uint32 crypto_type = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crypto_type(), output);
  }

  // optional uint32 tunnel_active_status = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tunnel_active_status(), output);
  }

  // optional uint64 tunnel_uptime = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->tunnel_uptime(), output);
  }

  // optional .ce.nbapi.ip_address peer_tunnel_ip = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_peer_tunnel_ip(), output);
  }

  // optional .ce.nbapi.ip_address tunnel_ip = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_tunnel_ip(), output);
  }

  // optional string tunnel_name = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.tunnel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tunnel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.uplink_info)
}

::google::protobuf::uint8* uplink_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.uplink_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_device_mac(), deterministic, target);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->link_id(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint32 link_status = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->link_status(), target);
  }

  // optional uint64 vlan_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->vlan_id(), target);
  }

  // optional string port_tunnel_desc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port_tunnel_desc().data(), static_cast<int>(this->port_tunnel_desc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.port_tunnel_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->port_tunnel_desc(), target);
  }

  // optional uint32 link_prio = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->link_prio(), target);
  }

  // optional uint32 wan_status = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->wan_status(), target);
  }

  // optional uint32 crypto_type = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crypto_type(), target);
  }

  // optional uint32 tunnel_active_status = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tunnel_active_status(), target);
  }

  // optional uint64 tunnel_uptime = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->tunnel_uptime(), target);
  }

  // optional .ce.nbapi.ip_address peer_tunnel_ip = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_peer_tunnel_ip(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address tunnel_ip = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_tunnel_ip(), deterministic, target);
  }

  // optional string tunnel_name = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.uplink_info.tunnel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tunnel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.uplink_info)
  return target;
}

size_t uplink_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.uplink_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string port_tunnel_desc = 6;
    if (has_port_tunnel_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port_tunnel_desc());
    }

    // optional string tunnel_name = 14;
    if (has_tunnel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tunnel_name());
    }

    // optional .ce.nbapi.mac_address device_mac = 1;
    if (has_device_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_mac_);
    }

    // optional .ce.nbapi.ip_address peer_tunnel_ip = 12;
    if (has_peer_tunnel_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *peer_tunnel_ip_);
    }

    // optional .ce.nbapi.ip_address tunnel_ip = 13;
    if (has_tunnel_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tunnel_ip_);
    }

    // optional uint64 link_id = 2;
    if (has_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link_id());
    }

    // optional uint64 vlan_id = 5;
    if (has_vlan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vlan_id());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 link_status = 4;
    if (has_link_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_status());
    }

    // optional uint32 link_prio = 7;
    if (has_link_prio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_prio());
    }

    // optional uint32 wan_status = 8;
    if (has_wan_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wan_status());
    }

    // optional uint32 crypto_type = 9;
    if (has_crypto_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crypto_type());
    }

    // optional uint64 tunnel_uptime = 11;
    if (has_tunnel_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tunnel_uptime());
    }

    // optional uint32 tunnel_active_status = 10;
    if (has_tunnel_active_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tunnel_active_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uplink_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.uplink_info)
  GOOGLE_DCHECK_NE(&from, this);
  const uplink_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const uplink_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.uplink_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.uplink_info)
    MergeFrom(*source);
  }
}

void uplink_info::MergeFrom(const uplink_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.uplink_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_port_tunnel_desc();
      port_tunnel_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_tunnel_desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tunnel_name();
      tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_device_mac()->::ce::nbapi::mac_address::MergeFrom(from.device_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_peer_tunnel_ip()->::ce::nbapi::ip_address::MergeFrom(from.peer_tunnel_ip());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tunnel_ip()->::ce::nbapi::ip_address::MergeFrom(from.tunnel_ip());
    }
    if (cached_has_bits & 0x00000040u) {
      link_id_ = from.link_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      vlan_id_ = from.vlan_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      link_status_ = from.link_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      link_prio_ = from.link_prio_;
    }
    if (cached_has_bits & 0x00000400u) {
      wan_status_ = from.wan_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      crypto_type_ = from.crypto_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      tunnel_uptime_ = from.tunnel_uptime_;
    }
    if (cached_has_bits & 0x00002000u) {
      tunnel_active_status_ = from.tunnel_active_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void uplink_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.uplink_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uplink_info::CopyFrom(const uplink_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.uplink_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uplink_info::IsInitialized() const {
  if (has_device_mac()) {
    if (!this->device_mac_->IsInitialized()) return false;
  }
  if (has_peer_tunnel_ip()) {
    if (!this->peer_tunnel_ip_->IsInitialized()) return false;
  }
  if (has_tunnel_ip()) {
    if (!this->tunnel_ip_->IsInitialized()) return false;
  }
  return true;
}

void uplink_info::Swap(uplink_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void uplink_info::InternalSwap(uplink_info* other) {
  using std::swap;
  desc_.Swap(&other->desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_tunnel_desc_.Swap(&other->port_tunnel_desc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tunnel_name_.Swap(&other->tunnel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_mac_, other->device_mac_);
  swap(peer_tunnel_ip_, other->peer_tunnel_ip_);
  swap(tunnel_ip_, other->tunnel_ip_);
  swap(link_id_, other->link_id_);
  swap(vlan_id_, other->vlan_id_);
  swap(link_status_, other->link_status_);
  swap(link_prio_, other->link_prio_);
  swap(wan_status_, other->wan_status_);
  swap(crypto_type_, other->crypto_type_);
  swap(tunnel_uptime_, other->tunnel_uptime_);
  swap(tunnel_active_status_, other->tunnel_active_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata uplink_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_uplink::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_uplink_default_instance_._instance.get_mutable()->device_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_uplink::kDeviceMacFieldNumber;
const int stats_uplink::kLinkIdFieldNumber;
const int stats_uplink::kRxPktsFieldNumber;
const int stats_uplink::kTxPktsFieldNumber;
const int stats_uplink::kRxBytesFieldNumber;
const int stats_uplink::kTxBytesFieldNumber;
const int stats_uplink::kVlanIdFieldNumber;
const int stats_uplink::kTunnelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_uplink::stats_uplink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_uplink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_uplink)
}
stats_uplink::stats_uplink(const stats_uplink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tunnel_name()) {
    tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
  }
  if (from.has_device_mac()) {
    device_mac_ = new ::ce::nbapi::mac_address(*from.device_mac_);
  } else {
    device_mac_ = NULL;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vlan_id_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(vlan_id_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_uplink)
}

void stats_uplink::SharedCtor() {
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vlan_id_) -
      reinterpret_cast<char*>(&device_mac_)) + sizeof(vlan_id_));
}

stats_uplink::~stats_uplink() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_uplink)
  SharedDtor();
}

void stats_uplink::SharedDtor() {
  tunnel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_mac_;
}

void stats_uplink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_uplink::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_uplink& stats_uplink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_uplink.base);
  return *internal_default_instance();
}


void stats_uplink::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tunnel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_mac_ != NULL);
      device_mac_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&link_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vlan_id_) -
        reinterpret_cast<char*>(&link_id_)) + sizeof(vlan_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_uplink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_uplink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address device_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 link_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_pkts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rx_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_pkts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tx_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vlan_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_vlan_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tunnel_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tunnel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.stats_uplink.tunnel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_uplink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_uplink)
  return false;
#undef DO_
}

void stats_uplink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_device_mac(), output);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->link_id(), output);
  }

  // optional uint64 rx_pkts = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rx_pkts(), output);
  }

  // optional uint64 tx_pkts = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tx_pkts(), output);
  }

  // optional uint64 rx_bytes = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rx_bytes(), output);
  }

  // optional uint64 tx_bytes = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tx_bytes(), output);
  }

  // optional uint32 vlan_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vlan_id(), output);
  }

  // optional string tunnel_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.stats_uplink.tunnel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tunnel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_uplink)
}

::google::protobuf::uint8* stats_uplink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_device_mac(), deterministic, target);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->link_id(), target);
  }

  // optional uint64 rx_pkts = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rx_pkts(), target);
  }

  // optional uint64 tx_pkts = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tx_pkts(), target);
  }

  // optional uint64 rx_bytes = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rx_bytes(), target);
  }

  // optional uint64 tx_bytes = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tx_bytes(), target);
  }

  // optional uint32 vlan_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vlan_id(), target);
  }

  // optional string tunnel_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.stats_uplink.tunnel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tunnel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_uplink)
  return target;
}

size_t stats_uplink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_uplink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string tunnel_name = 8;
    if (has_tunnel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tunnel_name());
    }

    // optional .ce.nbapi.mac_address device_mac = 1;
    if (has_device_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_mac_);
    }

    // optional uint64 link_id = 2;
    if (has_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link_id());
    }

    // optional uint64 rx_pkts = 3;
    if (has_rx_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_pkts());
    }

    // optional uint64 tx_pkts = 4;
    if (has_tx_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_pkts());
    }

    // optional uint64 rx_bytes = 5;
    if (has_rx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_bytes());
    }

    // optional uint64 tx_bytes = 6;
    if (has_tx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_bytes());
    }

    // optional uint32 vlan_id = 7;
    if (has_vlan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlan_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_uplink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_uplink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_uplink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_uplink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_uplink)
    MergeFrom(*source);
  }
}

void stats_uplink::MergeFrom(const stats_uplink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tunnel_name();
      tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_mac()->::ce::nbapi::mac_address::MergeFrom(from.device_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      link_id_ = from.link_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      rx_pkts_ = from.rx_pkts_;
    }
    if (cached_has_bits & 0x00000010u) {
      tx_pkts_ = from.tx_pkts_;
    }
    if (cached_has_bits & 0x00000020u) {
      rx_bytes_ = from.rx_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      tx_bytes_ = from.tx_bytes_;
    }
    if (cached_has_bits & 0x00000080u) {
      vlan_id_ = from.vlan_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_uplink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_uplink::CopyFrom(const stats_uplink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_uplink::IsInitialized() const {
  if (has_device_mac()) {
    if (!this->device_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_uplink::Swap(stats_uplink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_uplink::InternalSwap(stats_uplink* other) {
  using std::swap;
  tunnel_name_.Swap(&other->tunnel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_mac_, other->device_mac_);
  swap(link_id_, other->link_id_);
  swap(rx_pkts_, other->rx_pkts_);
  swap(tx_pkts_, other->tx_pkts_);
  swap(rx_bytes_, other->rx_bytes_);
  swap(tx_bytes_, other->tx_bytes_);
  swap(vlan_id_, other->vlan_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_uplink::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void wan_comp_uplink::InitAsDefaultInstance() {
  ::ce::nbapi::_wan_comp_uplink_default_instance_._instance.get_mutable()->boc_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wan_comp_uplink::kBocMacFieldNumber;
const int wan_comp_uplink::kLinkIdFieldNumber;
const int wan_comp_uplink::kTotCompBytesFieldNumber;
const int wan_comp_uplink::kTotUncompBytesFieldNumber;
const int wan_comp_uplink::kTotCompSavingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wan_comp_uplink::wan_comp_uplink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_wan_comp_uplink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.wan_comp_uplink)
}
wan_comp_uplink::wan_comp_uplink(const wan_comp_uplink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_boc_mac()) {
    boc_mac_ = new ::ce::nbapi::mac_address(*from.boc_mac_);
  } else {
    boc_mac_ = NULL;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tot_comp_savings_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(tot_comp_savings_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.wan_comp_uplink)
}

void wan_comp_uplink::SharedCtor() {
  ::memset(&boc_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tot_comp_savings_) -
      reinterpret_cast<char*>(&boc_mac_)) + sizeof(tot_comp_savings_));
}

wan_comp_uplink::~wan_comp_uplink() {
  // @@protoc_insertion_point(destructor:ce.nbapi.wan_comp_uplink)
  SharedDtor();
}

void wan_comp_uplink::SharedDtor() {
  if (this != internal_default_instance()) delete boc_mac_;
}

void wan_comp_uplink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* wan_comp_uplink::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const wan_comp_uplink& wan_comp_uplink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_wan_comp_uplink.base);
  return *internal_default_instance();
}


void wan_comp_uplink::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.wan_comp_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(boc_mac_ != NULL);
    boc_mac_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&link_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tot_comp_savings_) -
        reinterpret_cast<char*>(&link_id_)) + sizeof(tot_comp_savings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool wan_comp_uplink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.wan_comp_uplink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address boc_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boc_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 link_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tot_comp_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tot_comp_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_comp_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tot_uncomp_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tot_uncomp_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_uncomp_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tot_comp_savings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tot_comp_savings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_comp_savings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.wan_comp_uplink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.wan_comp_uplink)
  return false;
#undef DO_
}

void wan_comp_uplink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.wan_comp_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address boc_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_boc_mac(), output);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->link_id(), output);
  }

  // optional uint64 tot_comp_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tot_comp_bytes(), output);
  }

  // optional uint64 tot_uncomp_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tot_uncomp_bytes(), output);
  }

  // optional uint64 tot_comp_savings = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->tot_comp_savings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.wan_comp_uplink)
}

::google::protobuf::uint8* wan_comp_uplink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.wan_comp_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address boc_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_boc_mac(), deterministic, target);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->link_id(), target);
  }

  // optional uint64 tot_comp_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tot_comp_bytes(), target);
  }

  // optional uint64 tot_uncomp_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tot_uncomp_bytes(), target);
  }

  // optional uint64 tot_comp_savings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->tot_comp_savings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.wan_comp_uplink)
  return target;
}

size_t wan_comp_uplink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.wan_comp_uplink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .ce.nbapi.mac_address boc_mac = 1;
    if (has_boc_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *boc_mac_);
    }

    // optional uint64 link_id = 2;
    if (has_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link_id());
    }

    // optional uint64 tot_comp_bytes = 3;
    if (has_tot_comp_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_comp_bytes());
    }

    // optional uint64 tot_uncomp_bytes = 4;
    if (has_tot_uncomp_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_uncomp_bytes());
    }

    // optional uint64 tot_comp_savings = 5;
    if (has_tot_comp_savings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_comp_savings());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void wan_comp_uplink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.wan_comp_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  const wan_comp_uplink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const wan_comp_uplink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.wan_comp_uplink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.wan_comp_uplink)
    MergeFrom(*source);
  }
}

void wan_comp_uplink::MergeFrom(const wan_comp_uplink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.wan_comp_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_boc_mac()->::ce::nbapi::mac_address::MergeFrom(from.boc_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      link_id_ = from.link_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tot_comp_bytes_ = from.tot_comp_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      tot_uncomp_bytes_ = from.tot_uncomp_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      tot_comp_savings_ = from.tot_comp_savings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void wan_comp_uplink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.wan_comp_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wan_comp_uplink::CopyFrom(const wan_comp_uplink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.wan_comp_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wan_comp_uplink::IsInitialized() const {
  if (has_boc_mac()) {
    if (!this->boc_mac_->IsInitialized()) return false;
  }
  return true;
}

void wan_comp_uplink::Swap(wan_comp_uplink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wan_comp_uplink::InternalSwap(wan_comp_uplink* other) {
  using std::swap;
  swap(boc_mac_, other->boc_mac_);
  swap(link_id_, other->link_id_);
  swap(tot_comp_bytes_, other->tot_comp_bytes_);
  swap(tot_uncomp_bytes_, other->tot_uncomp_bytes_);
  swap(tot_comp_savings_, other->tot_comp_savings_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata wan_comp_uplink::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_ip_probe_uplink::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_ip_probe_uplink_default_instance_._instance.get_mutable()->device_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_ip_probe_uplink_default_instance_._instance.get_mutable()->probe_ip_addr_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_ip_probe_uplink::kDeviceMacFieldNumber;
const int stats_ip_probe_uplink::kLinkIdFieldNumber;
const int stats_ip_probe_uplink::kProbeIpAddrFieldNumber;
const int stats_ip_probe_uplink::kVlanIdFieldNumber;
const int stats_ip_probe_uplink::kAvgRttFieldNumber;
const int stats_ip_probe_uplink::kMaxRttFieldNumber;
const int stats_ip_probe_uplink::kMinRttFieldNumber;
const int stats_ip_probe_uplink::kAvgJitterFieldNumber;
const int stats_ip_probe_uplink::kMaxJitterFieldNumber;
const int stats_ip_probe_uplink::kMinJitterFieldNumber;
const int stats_ip_probe_uplink::kMosQualityFieldNumber;
const int stats_ip_probe_uplink::kProbeStatusFieldNumber;
const int stats_ip_probe_uplink::kIpProbePktLossPctFieldNumber;
const int stats_ip_probe_uplink::kTunnelNameFieldNumber;
const int stats_ip_probe_uplink::kSdAvgLatencyFieldNumber;
const int stats_ip_probe_uplink::kDsAvgLatencyFieldNumber;
const int stats_ip_probe_uplink::kSdAvgJitterFieldNumber;
const int stats_ip_probe_uplink::kDsAvgJitterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_ip_probe_uplink::stats_ip_probe_uplink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_ip_probe_uplink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_ip_probe_uplink)
}
stats_ip_probe_uplink::stats_ip_probe_uplink(const stats_ip_probe_uplink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tunnel_name()) {
    tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
  }
  if (from.has_device_mac()) {
    device_mac_ = new ::ce::nbapi::mac_address(*from.device_mac_);
  } else {
    device_mac_ = NULL;
  }
  if (from.has_probe_ip_addr()) {
    probe_ip_addr_ = new ::ce::nbapi::ip_address(*from.probe_ip_addr_);
  } else {
    probe_ip_addr_ = NULL;
  }
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ip_probe_pkt_loss_pct_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(ip_probe_pkt_loss_pct_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_ip_probe_uplink)
}

void stats_ip_probe_uplink::SharedCtor() {
  tunnel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ip_probe_pkt_loss_pct_) -
      reinterpret_cast<char*>(&device_mac_)) + sizeof(ip_probe_pkt_loss_pct_));
}

stats_ip_probe_uplink::~stats_ip_probe_uplink() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_ip_probe_uplink)
  SharedDtor();
}

void stats_ip_probe_uplink::SharedDtor() {
  tunnel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_mac_;
  if (this != internal_default_instance()) delete probe_ip_addr_;
}

void stats_ip_probe_uplink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_ip_probe_uplink::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_ip_probe_uplink& stats_ip_probe_uplink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_ip_probe_uplink.base);
  return *internal_default_instance();
}


void stats_ip_probe_uplink::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_ip_probe_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      tunnel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_mac_ != NULL);
      device_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(probe_ip_addr_ != NULL);
      probe_ip_addr_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&link_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_jitter_) -
        reinterpret_cast<char*>(&link_id_)) + sizeof(avg_jitter_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&vlan_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sd_avg_jitter_) -
        reinterpret_cast<char*>(&vlan_id_)) + sizeof(sd_avg_jitter_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&ds_avg_jitter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ip_probe_pkt_loss_pct_) -
        reinterpret_cast<char*>(&ds_avg_jitter_)) + sizeof(ip_probe_pkt_loss_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_ip_probe_uplink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_ip_probe_uplink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address device_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 link_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_link_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &link_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address probe_ip_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probe_ip_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vlan_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vlan_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 avg_rtt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_avg_rtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avg_rtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_rtt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_max_rtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_rtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_rtt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_min_rtt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_rtt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 avg_jitter = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_avg_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avg_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_jitter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_max_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 min_jitter = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_min_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 mos_quality = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_mos_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mos_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 probe_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_probe_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probe_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip_probe_pkt_loss_pct = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_ip_probe_pkt_loss_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_probe_pkt_loss_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tunnel_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tunnel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.stats_ip_probe_uplink.tunnel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sd_avg_latency = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_sd_avg_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sd_avg_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ds_avg_latency = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_ds_avg_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ds_avg_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sd_avg_jitter = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_sd_avg_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sd_avg_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ds_avg_jitter = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_ds_avg_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ds_avg_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_ip_probe_uplink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_ip_probe_uplink)
  return false;
#undef DO_
}

void stats_ip_probe_uplink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_ip_probe_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_device_mac(), output);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->link_id(), output);
  }

  // optional .ce.nbapi.ip_address probe_ip_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_probe_ip_addr(), output);
  }

  // optional uint32 vlan_id = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vlan_id(), output);
  }

  // optional uint64 avg_rtt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->avg_rtt(), output);
  }

  // optional uint64 max_rtt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->max_rtt(), output);
  }

  // optional uint64 min_rtt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->min_rtt(), output);
  }

  // optional uint64 avg_jitter = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->avg_jitter(), output);
  }

  // optional uint64 max_jitter = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->max_jitter(), output);
  }

  // optional uint64 min_jitter = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->min_jitter(), output);
  }

  // optional uint64 mos_quality = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mos_quality(), output);
  }

  // optional uint32 probe_status = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->probe_status(), output);
  }

  // optional uint32 ip_probe_pkt_loss_pct = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ip_probe_pkt_loss_pct(), output);
  }

  // optional string tunnel_name = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.stats_ip_probe_uplink.tunnel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tunnel_name(), output);
  }

  // optional uint64 sd_avg_latency = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->sd_avg_latency(), output);
  }

  // optional uint64 ds_avg_latency = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->ds_avg_latency(), output);
  }

  // optional uint64 sd_avg_jitter = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->sd_avg_jitter(), output);
  }

  // optional uint64 ds_avg_jitter = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->ds_avg_jitter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_ip_probe_uplink)
}

::google::protobuf::uint8* stats_ip_probe_uplink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_ip_probe_uplink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address device_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_device_mac(), deterministic, target);
  }

  // optional uint64 link_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->link_id(), target);
  }

  // optional .ce.nbapi.ip_address probe_ip_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_probe_ip_addr(), deterministic, target);
  }

  // optional uint32 vlan_id = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vlan_id(), target);
  }

  // optional uint64 avg_rtt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->avg_rtt(), target);
  }

  // optional uint64 max_rtt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_rtt(), target);
  }

  // optional uint64 min_rtt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->min_rtt(), target);
  }

  // optional uint64 avg_jitter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->avg_jitter(), target);
  }

  // optional uint64 max_jitter = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->max_jitter(), target);
  }

  // optional uint64 min_jitter = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->min_jitter(), target);
  }

  // optional uint64 mos_quality = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mos_quality(), target);
  }

  // optional uint32 probe_status = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->probe_status(), target);
  }

  // optional uint32 ip_probe_pkt_loss_pct = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ip_probe_pkt_loss_pct(), target);
  }

  // optional string tunnel_name = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tunnel_name().data(), static_cast<int>(this->tunnel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.stats_ip_probe_uplink.tunnel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tunnel_name(), target);
  }

  // optional uint64 sd_avg_latency = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->sd_avg_latency(), target);
  }

  // optional uint64 ds_avg_latency = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->ds_avg_latency(), target);
  }

  // optional uint64 sd_avg_jitter = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->sd_avg_jitter(), target);
  }

  // optional uint64 ds_avg_jitter = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->ds_avg_jitter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_ip_probe_uplink)
  return target;
}

size_t stats_ip_probe_uplink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_ip_probe_uplink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string tunnel_name = 14;
    if (has_tunnel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tunnel_name());
    }

    // optional .ce.nbapi.mac_address device_mac = 1;
    if (has_device_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_mac_);
    }

    // optional .ce.nbapi.ip_address probe_ip_addr = 3;
    if (has_probe_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *probe_ip_addr_);
    }

    // optional uint64 link_id = 2;
    if (has_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->link_id());
    }

    // optional uint64 avg_rtt = 5;
    if (has_avg_rtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->avg_rtt());
    }

    // optional uint64 max_rtt = 6;
    if (has_max_rtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_rtt());
    }

    // optional uint64 min_rtt = 7;
    if (has_min_rtt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_rtt());
    }

    // optional uint64 avg_jitter = 8;
    if (has_avg_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->avg_jitter());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 vlan_id = 4;
    if (has_vlan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlan_id());
    }

    // optional uint32 probe_status = 12;
    if (has_probe_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probe_status());
    }

    // optional uint64 max_jitter = 9;
    if (has_max_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_jitter());
    }

    // optional uint64 min_jitter = 10;
    if (has_min_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_jitter());
    }

    // optional uint64 mos_quality = 11;
    if (has_mos_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mos_quality());
    }

    // optional uint64 sd_avg_latency = 15;
    if (has_sd_avg_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sd_avg_latency());
    }

    // optional uint64 ds_avg_latency = 16;
    if (has_ds_avg_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ds_avg_latency());
    }

    // optional uint64 sd_avg_jitter = 17;
    if (has_sd_avg_jitter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sd_avg_jitter());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint64 ds_avg_jitter = 18;
    if (has_ds_avg_jitter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ds_avg_jitter());
    }

    // optional uint32 ip_probe_pkt_loss_pct = 13;
    if (has_ip_probe_pkt_loss_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_probe_pkt_loss_pct());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_ip_probe_uplink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_ip_probe_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_ip_probe_uplink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_ip_probe_uplink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_ip_probe_uplink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_ip_probe_uplink)
    MergeFrom(*source);
  }
}

void stats_ip_probe_uplink::MergeFrom(const stats_ip_probe_uplink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_ip_probe_uplink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tunnel_name();
      tunnel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tunnel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device_mac()->::ce::nbapi::mac_address::MergeFrom(from.device_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_probe_ip_addr()->::ce::nbapi::ip_address::MergeFrom(from.probe_ip_addr());
    }
    if (cached_has_bits & 0x00000008u) {
      link_id_ = from.link_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_rtt_ = from.avg_rtt_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_rtt_ = from.max_rtt_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_rtt_ = from.min_rtt_;
    }
    if (cached_has_bits & 0x00000080u) {
      avg_jitter_ = from.avg_jitter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      vlan_id_ = from.vlan_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      probe_status_ = from.probe_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_jitter_ = from.max_jitter_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_jitter_ = from.min_jitter_;
    }
    if (cached_has_bits & 0x00001000u) {
      mos_quality_ = from.mos_quality_;
    }
    if (cached_has_bits & 0x00002000u) {
      sd_avg_latency_ = from.sd_avg_latency_;
    }
    if (cached_has_bits & 0x00004000u) {
      ds_avg_latency_ = from.ds_avg_latency_;
    }
    if (cached_has_bits & 0x00008000u) {
      sd_avg_jitter_ = from.sd_avg_jitter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      ds_avg_jitter_ = from.ds_avg_jitter_;
    }
    if (cached_has_bits & 0x00020000u) {
      ip_probe_pkt_loss_pct_ = from.ip_probe_pkt_loss_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_ip_probe_uplink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_ip_probe_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_ip_probe_uplink::CopyFrom(const stats_ip_probe_uplink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_ip_probe_uplink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_ip_probe_uplink::IsInitialized() const {
  if (has_device_mac()) {
    if (!this->device_mac_->IsInitialized()) return false;
  }
  if (has_probe_ip_addr()) {
    if (!this->probe_ip_addr_->IsInitialized()) return false;
  }
  return true;
}

void stats_ip_probe_uplink::Swap(stats_ip_probe_uplink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_ip_probe_uplink::InternalSwap(stats_ip_probe_uplink* other) {
  using std::swap;
  tunnel_name_.Swap(&other->tunnel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_mac_, other->device_mac_);
  swap(probe_ip_addr_, other->probe_ip_addr_);
  swap(link_id_, other->link_id_);
  swap(avg_rtt_, other->avg_rtt_);
  swap(max_rtt_, other->max_rtt_);
  swap(min_rtt_, other->min_rtt_);
  swap(avg_jitter_, other->avg_jitter_);
  swap(vlan_id_, other->vlan_id_);
  swap(probe_status_, other->probe_status_);
  swap(max_jitter_, other->max_jitter_);
  swap(min_jitter_, other->min_jitter_);
  swap(mos_quality_, other->mos_quality_);
  swap(sd_avg_latency_, other->sd_avg_latency_);
  swap(ds_avg_latency_, other->ds_avg_latency_);
  swap(sd_avg_jitter_, other->sd_avg_jitter_);
  swap(ds_avg_jitter_, other->ds_avg_jitter_);
  swap(ip_probe_pkt_loss_pct_, other->ip_probe_pkt_loss_pct_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_ip_probe_uplink::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_tunnel::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_tunnel_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_tunnel::kTunnelIndexFieldNumber;
const int stats_tunnel::kTxDataPktsFieldNumber;
const int stats_tunnel::kRxDataPktsFieldNumber;
const int stats_tunnel::kTxDataBytesFieldNumber;
const int stats_tunnel::kRxDataBytesFieldNumber;
const int stats_tunnel::kIapMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_tunnel::stats_tunnel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_tunnel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_tunnel)
}
stats_tunnel::stats_tunnel(const stats_tunnel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  ::memcpy(&tx_data_pkts_, &from.tx_data_pkts_,
    static_cast<size_t>(reinterpret_cast<char*>(&tunnel_index_) -
    reinterpret_cast<char*>(&tx_data_pkts_)) + sizeof(tunnel_index_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_tunnel)
}

void stats_tunnel::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tunnel_index_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(tunnel_index_));
}

stats_tunnel::~stats_tunnel() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_tunnel)
  SharedDtor();
}

void stats_tunnel::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
}

void stats_tunnel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_tunnel::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_tunnel& stats_tunnel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_tunnel.base);
  return *internal_default_instance();
}


void stats_tunnel::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_tunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iap_mac_ != NULL);
    iap_mac_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&tx_data_pkts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tunnel_index_) -
        reinterpret_cast<char*>(&tx_data_pkts_)) + sizeof(tunnel_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_tunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_tunnel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tunnel_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tunnel_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tunnel_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_pkts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tx_data_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_data_pkts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rx_data_pkts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_data_pkts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tx_data_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_data_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_rx_data_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_data_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address iap_mac = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_tunnel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_tunnel)
  return false;
#undef DO_
}

void stats_tunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_tunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tunnel_index = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tunnel_index(), output);
  }

  // optional uint64 tx_data_pkts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tx_data_pkts(), output);
  }

  // optional uint64 rx_data_pkts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rx_data_pkts(), output);
  }

  // optional uint64 tx_data_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->tx_data_bytes(), output);
  }

  // optional uint64 rx_data_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rx_data_bytes(), output);
  }

  // optional .ce.nbapi.mac_address iap_mac = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_iap_mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_tunnel)
}

::google::protobuf::uint8* stats_tunnel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_tunnel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tunnel_index = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tunnel_index(), target);
  }

  // optional uint64 tx_data_pkts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tx_data_pkts(), target);
  }

  // optional uint64 rx_data_pkts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rx_data_pkts(), target);
  }

  // optional uint64 tx_data_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->tx_data_bytes(), target);
  }

  // optional uint64 rx_data_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rx_data_bytes(), target);
  }

  // optional .ce.nbapi.mac_address iap_mac = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_iap_mac(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_tunnel)
  return target;
}

size_t stats_tunnel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_tunnel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .ce.nbapi.mac_address iap_mac = 6;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional uint64 tx_data_pkts = 2;
    if (has_tx_data_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_pkts());
    }

    // optional uint64 rx_data_pkts = 3;
    if (has_rx_data_pkts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_data_pkts());
    }

    // optional uint64 tx_data_bytes = 4;
    if (has_tx_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_data_bytes());
    }

    // optional uint64 rx_data_bytes = 5;
    if (has_rx_data_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_data_bytes());
    }

    // optional uint32 tunnel_index = 1;
    if (has_tunnel_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tunnel_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_tunnel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_tunnel)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_tunnel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_tunnel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_tunnel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_tunnel)
    MergeFrom(*source);
  }
}

void stats_tunnel::MergeFrom(const stats_tunnel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_tunnel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      tx_data_pkts_ = from.tx_data_pkts_;
    }
    if (cached_has_bits & 0x00000004u) {
      rx_data_pkts_ = from.rx_data_pkts_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_data_bytes_ = from.tx_data_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      rx_data_bytes_ = from.rx_data_bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      tunnel_index_ = from.tunnel_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_tunnel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_tunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_tunnel::CopyFrom(const stats_tunnel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_tunnel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_tunnel::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_tunnel::Swap(stats_tunnel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_tunnel::InternalSwap(stats_tunnel* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(tx_data_pkts_, other->tx_data_pkts_);
  swap(rx_data_pkts_, other->rx_data_pkts_);
  swap(tx_data_bytes_, other->tx_data_bytes_);
  swap(rx_data_bytes_, other->rx_data_bytes_);
  swap(tunnel_index_, other->tunnel_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_tunnel::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bytes_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bytes_info::kTxBytesFieldNumber;
const int bytes_info::kRxBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bytes_info::bytes_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_bytes_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.bytes_info)
}
bytes_info::bytes_info(const bytes_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tx_bytes_, &from.tx_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&rx_bytes_) -
    reinterpret_cast<char*>(&tx_bytes_)) + sizeof(rx_bytes_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.bytes_info)
}

void bytes_info::SharedCtor() {
  ::memset(&tx_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rx_bytes_) -
      reinterpret_cast<char*>(&tx_bytes_)) + sizeof(rx_bytes_));
}

bytes_info::~bytes_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.bytes_info)
  SharedDtor();
}

void bytes_info::SharedDtor() {
}

void bytes_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bytes_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bytes_info& bytes_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_bytes_info.base);
  return *internal_default_instance();
}


void bytes_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&tx_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rx_bytes_) -
        reinterpret_cast<char*>(&tx_bytes_)) + sizeof(rx_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bytes_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.bytes_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tx_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rx_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.bytes_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.bytes_info)
  return false;
#undef DO_
}

void bytes_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tx_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tx_bytes(), output);
  }

  // optional uint64 rx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rx_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.bytes_info)
}

::google::protobuf::uint8* bytes_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tx_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tx_bytes(), target);
  }

  // optional uint64 rx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rx_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.bytes_info)
  return target;
}

size_t bytes_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.bytes_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 tx_bytes = 1;
    if (has_tx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tx_bytes());
    }

    // optional uint64 rx_bytes = 2;
    if (has_rx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rx_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bytes_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.bytes_info)
  GOOGLE_DCHECK_NE(&from, this);
  const bytes_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bytes_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.bytes_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.bytes_info)
    MergeFrom(*source);
  }
}

void bytes_info::MergeFrom(const bytes_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.bytes_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tx_bytes_ = from.tx_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      rx_bytes_ = from.rx_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bytes_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.bytes_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bytes_info::CopyFrom(const bytes_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.bytes_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bytes_info::IsInitialized() const {
  return true;
}

void bytes_info::Swap(bytes_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bytes_info::InternalSwap(bytes_info* other) {
  using std::swap;
  swap(tx_bytes_, other->tx_bytes_);
  swap(rx_bytes_, other->rx_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bytes_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void iap_bytes_info::InitAsDefaultInstance() {
  ::ce::nbapi::_iap_bytes_info_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::bytes_info*>(
      ::ce::nbapi::bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int iap_bytes_info::kSessionFlagsFieldNumber;
const int iap_bytes_info::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

iap_bytes_info::iap_bytes_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_iap_bytes_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.iap_bytes_info)
}
iap_bytes_info::iap_bytes_info(const iap_bytes_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  session_flags_ = from.session_flags_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.iap_bytes_info)
}

void iap_bytes_info::SharedCtor() {
  bytes_info_ = NULL;
  session_flags_ = 1;
}

iap_bytes_info::~iap_bytes_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.iap_bytes_info)
  SharedDtor();
}

void iap_bytes_info::SharedDtor() {
  if (this != internal_default_instance()) delete bytes_info_;
}

void iap_bytes_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* iap_bytes_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const iap_bytes_info& iap_bytes_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_iap_bytes_info.base);
  return *internal_default_instance();
}


void iap_bytes_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.iap_bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
    session_flags_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool iap_bytes_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.iap_bytes_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.iap_enforcement_status session_flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::iap_enforcement_status_IsValid(value)) {
            set_session_flags(static_cast< ::ce::nbapi::iap_enforcement_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.bytes_info bytes_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.iap_bytes_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.iap_bytes_info)
  return false;
#undef DO_
}

void iap_bytes_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.iap_bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.iap_enforcement_status session_flags = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->session_flags(), output);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.iap_bytes_info)
}

::google::protobuf::uint8* iap_bytes_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.iap_bytes_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.iap_enforcement_status session_flags = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->session_flags(), target);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.iap_bytes_info)
  return target;
}

size_t iap_bytes_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.iap_bytes_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ce.nbapi.bytes_info bytes_info = 2;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

    // optional .ce.nbapi.iap_enforcement_status session_flags = 1;
    if (has_session_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iap_bytes_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.iap_bytes_info)
  GOOGLE_DCHECK_NE(&from, this);
  const iap_bytes_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const iap_bytes_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.iap_bytes_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.iap_bytes_info)
    MergeFrom(*source);
  }
}

void iap_bytes_info::MergeFrom(const iap_bytes_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.iap_bytes_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bytes_info()->::ce::nbapi::bytes_info::MergeFrom(from.bytes_info());
    }
    if (cached_has_bits & 0x00000002u) {
      session_flags_ = from.session_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void iap_bytes_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.iap_bytes_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iap_bytes_info::CopyFrom(const iap_bytes_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.iap_bytes_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iap_bytes_info::IsInitialized() const {
  return true;
}

void iap_bytes_info::Swap(iap_bytes_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void iap_bytes_info::InternalSwap(iap_bytes_info* other) {
  using std::swap;
  swap(bytes_info_, other->bytes_info_);
  swap(session_flags_, other->session_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata iap_bytes_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_role_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_role_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_role_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::bytes_info*>(
      ::ce::nbapi::bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_role_iap::kIapMacFieldNumber;
const int stats_role_iap::kUserRoleFieldNumber;
const int stats_role_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_role_iap::stats_role_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_role_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_role_iap)
}
stats_role_iap::stats_role_iap(const stats_role_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_role()) {
    user_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_role_);
  }
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_role_iap)
}

void stats_role_iap::SharedCtor() {
  user_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_info_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(bytes_info_));
}

stats_role_iap::~stats_role_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_role_iap)
  SharedDtor();
}

void stats_role_iap::SharedDtor() {
  user_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void stats_role_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_role_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_role_iap& stats_role_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_role_iap.base);
  return *internal_default_instance();
}


void stats_role_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_role_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      user_role_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_role_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_role_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_role = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_role_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_role_iap)
  return false;
#undef DO_
}

void stats_role_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_role_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional bytes user_role = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_role(), output);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_role_iap)
}

::google::protobuf::uint8* stats_role_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_role_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional bytes user_role = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_role(), target);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_role_iap)
  return target;
}

size_t stats_role_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_role_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes user_role = 2;
    if (has_user_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_role());
    }

    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_role_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_role_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_role_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_role_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_role_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_role_iap)
    MergeFrom(*source);
  }
}

void stats_role_iap::MergeFrom(const stats_role_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_role_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_role();
      user_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_role_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bytes_info()->::ce::nbapi::bytes_info::MergeFrom(from.bytes_info());
    }
  }
}

void stats_role_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_role_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_role_iap::CopyFrom(const stats_role_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_role_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_role_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_role_iap::Swap(stats_role_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_role_iap::InternalSwap(stats_role_iap* other) {
  using std::swap;
  user_role_.Swap(&other->user_role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_role_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_vlan_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_vlan_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_vlan_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::bytes_info*>(
      ::ce::nbapi::bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_vlan_iap::kIapMacFieldNumber;
const int stats_vlan_iap::kVlanFieldNumber;
const int stats_vlan_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_vlan_iap::stats_vlan_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_vlan_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_vlan_iap)
}
stats_vlan_iap::stats_vlan_iap(const stats_vlan_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  vlan_ = from.vlan_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_vlan_iap)
}

void stats_vlan_iap::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vlan_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(vlan_));
}

stats_vlan_iap::~stats_vlan_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_vlan_iap)
  SharedDtor();
}

void stats_vlan_iap::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void stats_vlan_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_vlan_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_vlan_iap& stats_vlan_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_vlan_iap.base);
  return *internal_default_instance();
}


void stats_vlan_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_vlan_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  vlan_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_vlan_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_vlan_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vlan = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_vlan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_vlan_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_vlan_iap)
  return false;
#undef DO_
}

void stats_vlan_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_vlan_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional uint32 vlan = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vlan(), output);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_vlan_iap)
}

::google::protobuf::uint8* stats_vlan_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_vlan_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional uint32 vlan = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vlan(), target);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_vlan_iap)
  return target;
}

size_t stats_vlan_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_vlan_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

    // optional uint32 vlan = 2;
    if (has_vlan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlan());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_vlan_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_vlan_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_vlan_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_vlan_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_vlan_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_vlan_iap)
    MergeFrom(*source);
  }
}

void stats_vlan_iap::MergeFrom(const stats_vlan_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_vlan_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_info()->::ce::nbapi::bytes_info::MergeFrom(from.bytes_info());
    }
    if (cached_has_bits & 0x00000004u) {
      vlan_ = from.vlan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stats_vlan_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_vlan_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_vlan_iap::CopyFrom(const stats_vlan_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_vlan_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_vlan_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_vlan_iap::Swap(stats_vlan_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_vlan_iap::InternalSwap(stats_vlan_iap* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(vlan_, other->vlan_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_vlan_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_ssid_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_ssid_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_ssid_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::bytes_info*>(
      ::ce::nbapi::bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_ssid_iap::kIapMacFieldNumber;
const int stats_ssid_iap::kEssidFieldNumber;
const int stats_ssid_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_ssid_iap::stats_ssid_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_ssid_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_ssid_iap)
}
stats_ssid_iap::stats_ssid_iap(const stats_ssid_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  essid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_essid()) {
    essid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essid_);
  }
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_ssid_iap)
}

void stats_ssid_iap::SharedCtor() {
  essid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_info_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(bytes_info_));
}

stats_ssid_iap::~stats_ssid_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_ssid_iap)
  SharedDtor();
}

void stats_ssid_iap::SharedDtor() {
  essid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void stats_ssid_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_ssid_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_ssid_iap& stats_ssid_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_ssid_iap.base);
  return *internal_default_instance();
}


void stats_ssid_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_ssid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      essid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_ssid_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_ssid_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes essid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_essid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_ssid_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_ssid_iap)
  return false;
#undef DO_
}

void stats_ssid_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_ssid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional bytes essid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->essid(), output);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_ssid_iap)
}

::google::protobuf::uint8* stats_ssid_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_ssid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional bytes essid = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->essid(), target);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_ssid_iap)
  return target;
}

size_t stats_ssid_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_ssid_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes essid = 2;
    if (has_essid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->essid());
    }

    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_ssid_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_ssid_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_ssid_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_ssid_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_ssid_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_ssid_iap)
    MergeFrom(*source);
  }
}

void stats_ssid_iap::MergeFrom(const stats_ssid_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_ssid_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_essid();
      essid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bytes_info()->::ce::nbapi::bytes_info::MergeFrom(from.bytes_info());
    }
  }
}

void stats_ssid_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_ssid_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_ssid_iap::CopyFrom(const stats_ssid_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_ssid_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_ssid_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_ssid_iap::Swap(stats_ssid_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_ssid_iap::InternalSwap(stats_ssid_iap* other) {
  using std::swap;
  essid_.Swap(&other->essid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_ssid_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void stats_port::InitAsDefaultInstance() {
  ::ce::nbapi::_stats_port_default_instance_._instance.get_mutable()->port_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_stats_port_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::bytes_info*>(
      ::ce::nbapi::bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int stats_port::kPortMacFieldNumber;
const int stats_port::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

stats_port::stats_port()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_stats_port.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.stats_port)
}
stats_port::stats_port(const stats_port& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_port_mac()) {
    port_mac_ = new ::ce::nbapi::mac_address(*from.port_mac_);
  } else {
    port_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.stats_port)
}

void stats_port::SharedCtor() {
  ::memset(&port_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_info_) -
      reinterpret_cast<char*>(&port_mac_)) + sizeof(bytes_info_));
}

stats_port::~stats_port() {
  // @@protoc_insertion_point(destructor:ce.nbapi.stats_port)
  SharedDtor();
}

void stats_port::SharedDtor() {
  if (this != internal_default_instance()) delete port_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void stats_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* stats_port::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const stats_port& stats_port::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_stats_port.base);
  return *internal_default_instance();
}


void stats_port::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.stats_port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(port_mac_ != NULL);
      port_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool stats_port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.stats_port)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address port_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_port_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.bytes_info bytes_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.stats_port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.stats_port)
  return false;
#undef DO_
}

void stats_port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.stats_port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address port_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_port_mac(), output);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.stats_port)
}

::google::protobuf::uint8* stats_port::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.stats_port)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address port_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_port_mac(), deterministic, target);
  }

  // optional .ce.nbapi.bytes_info bytes_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.stats_port)
  return target;
}

size_t stats_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.stats_port)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ce.nbapi.mac_address port_mac = 1;
    if (has_port_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *port_mac_);
    }

    // optional .ce.nbapi.bytes_info bytes_info = 2;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stats_port::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.stats_port)
  GOOGLE_DCHECK_NE(&from, this);
  const stats_port* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const stats_port>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.stats_port)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.stats_port)
    MergeFrom(*source);
  }
}

void stats_port::MergeFrom(const stats_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.stats_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_port_mac()->::ce::nbapi::mac_address::MergeFrom(from.port_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_info()->::ce::nbapi::bytes_info::MergeFrom(from.bytes_info());
    }
  }
}

void stats_port::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.stats_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stats_port::CopyFrom(const stats_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.stats_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stats_port::IsInitialized() const {
  if (has_port_mac()) {
    if (!this->port_mac_->IsInitialized()) return false;
  }
  return true;
}

void stats_port::Swap(stats_port* other) {
  if (other == this) return;
  InternalSwap(other);
}
void stats_port::InternalSwap(stats_port* other) {
  using std::swap;
  swap(port_mac_, other->port_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata stats_port::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void summary_webcat_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_summary_webcat_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_summary_webcat_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::iap_bytes_info*>(
      ::ce::nbapi::iap_bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int summary_webcat_iap::kIapMacFieldNumber;
const int summary_webcat_iap::kWebcatIdFieldNumber;
const int summary_webcat_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

summary_webcat_iap::summary_webcat_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_summary_webcat_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.summary_webcat_iap)
}
summary_webcat_iap::summary_webcat_iap(const summary_webcat_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::iap_bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  webcat_id_ = from.webcat_id_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.summary_webcat_iap)
}

void summary_webcat_iap::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webcat_id_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(webcat_id_));
}

summary_webcat_iap::~summary_webcat_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.summary_webcat_iap)
  SharedDtor();
}

void summary_webcat_iap::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void summary_webcat_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* summary_webcat_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const summary_webcat_iap& summary_webcat_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_summary_webcat_iap.base);
  return *internal_default_instance();
}


void summary_webcat_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.summary_webcat_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  webcat_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool summary_webcat_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.summary_webcat_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webcat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_webcat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webcat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.summary_webcat_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.summary_webcat_iap)
  return false;
#undef DO_
}

void summary_webcat_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.summary_webcat_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional uint32 webcat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webcat_id(), output);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.summary_webcat_iap)
}

::google::protobuf::uint8* summary_webcat_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.summary_webcat_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional uint32 webcat_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webcat_id(), target);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.summary_webcat_iap)
  return target;
}

size_t summary_webcat_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.summary_webcat_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

    // optional uint32 webcat_id = 2;
    if (has_webcat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webcat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void summary_webcat_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.summary_webcat_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const summary_webcat_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const summary_webcat_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.summary_webcat_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.summary_webcat_iap)
    MergeFrom(*source);
  }
}

void summary_webcat_iap::MergeFrom(const summary_webcat_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.summary_webcat_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_info()->::ce::nbapi::iap_bytes_info::MergeFrom(from.bytes_info());
    }
    if (cached_has_bits & 0x00000004u) {
      webcat_id_ = from.webcat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void summary_webcat_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.summary_webcat_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void summary_webcat_iap::CopyFrom(const summary_webcat_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.summary_webcat_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool summary_webcat_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void summary_webcat_iap::Swap(summary_webcat_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void summary_webcat_iap::InternalSwap(summary_webcat_iap* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(webcat_id_, other->webcat_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata summary_webcat_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void summary_appid_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_summary_appid_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_summary_appid_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::iap_bytes_info*>(
      ::ce::nbapi::iap_bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int summary_appid_iap::kIapMacFieldNumber;
const int summary_appid_iap::kAppIdFieldNumber;
const int summary_appid_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

summary_appid_iap::summary_appid_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_summary_appid_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.summary_appid_iap)
}
summary_appid_iap::summary_appid_iap(const summary_appid_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::iap_bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.summary_appid_iap)
}

void summary_appid_iap::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(app_id_));
}

summary_appid_iap::~summary_appid_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.summary_appid_iap)
  SharedDtor();
}

void summary_appid_iap::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void summary_appid_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* summary_appid_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const summary_appid_iap& summary_appid_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_summary_appid_iap.base);
  return *internal_default_instance();
}


void summary_appid_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.summary_appid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool summary_appid_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.summary_appid_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.summary_appid_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.summary_appid_iap)
  return false;
#undef DO_
}

void summary_appid_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.summary_appid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.summary_appid_iap)
}

::google::protobuf::uint8* summary_appid_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.summary_appid_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.summary_appid_iap)
  return target;
}

size_t summary_appid_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.summary_appid_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void summary_appid_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.summary_appid_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const summary_appid_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const summary_appid_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.summary_appid_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.summary_appid_iap)
    MergeFrom(*source);
  }
}

void summary_appid_iap::MergeFrom(const summary_appid_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.summary_appid_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_info()->::ce::nbapi::iap_bytes_info::MergeFrom(from.bytes_info());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void summary_appid_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.summary_appid_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void summary_appid_iap::CopyFrom(const summary_appid_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.summary_appid_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool summary_appid_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void summary_appid_iap::Swap(summary_appid_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void summary_appid_iap::InternalSwap(summary_appid_iap* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata summary_appid_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void summary_webrep_iap::InitAsDefaultInstance() {
  ::ce::nbapi::_summary_webrep_iap_default_instance_._instance.get_mutable()->iap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_summary_webrep_iap_default_instance_._instance.get_mutable()->bytes_info_ = const_cast< ::ce::nbapi::iap_bytes_info*>(
      ::ce::nbapi::iap_bytes_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int summary_webrep_iap::kIapMacFieldNumber;
const int summary_webrep_iap::kWebrepIdFieldNumber;
const int summary_webrep_iap::kBytesInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

summary_webrep_iap::summary_webrep_iap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_summary_webrep_iap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.summary_webrep_iap)
}
summary_webrep_iap::summary_webrep_iap(const summary_webrep_iap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iap_mac()) {
    iap_mac_ = new ::ce::nbapi::mac_address(*from.iap_mac_);
  } else {
    iap_mac_ = NULL;
  }
  if (from.has_bytes_info()) {
    bytes_info_ = new ::ce::nbapi::iap_bytes_info(*from.bytes_info_);
  } else {
    bytes_info_ = NULL;
  }
  webrep_id_ = from.webrep_id_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.summary_webrep_iap)
}

void summary_webrep_iap::SharedCtor() {
  ::memset(&iap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&webrep_id_) -
      reinterpret_cast<char*>(&iap_mac_)) + sizeof(webrep_id_));
}

summary_webrep_iap::~summary_webrep_iap() {
  // @@protoc_insertion_point(destructor:ce.nbapi.summary_webrep_iap)
  SharedDtor();
}

void summary_webrep_iap::SharedDtor() {
  if (this != internal_default_instance()) delete iap_mac_;
  if (this != internal_default_instance()) delete bytes_info_;
}

void summary_webrep_iap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* summary_webrep_iap::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const summary_webrep_iap& summary_webrep_iap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_summary_webrep_iap.base);
  return *internal_default_instance();
}


void summary_webrep_iap::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.summary_webrep_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iap_mac_ != NULL);
      iap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_info_ != NULL);
      bytes_info_->Clear();
    }
  }
  webrep_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool summary_webrep_iap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.summary_webrep_iap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address iap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webrep_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_webrep_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webrep_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.summary_webrep_iap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.summary_webrep_iap)
  return false;
#undef DO_
}

void summary_webrep_iap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.summary_webrep_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_iap_mac(), output);
  }

  // optional uint32 webrep_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webrep_id(), output);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bytes_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.summary_webrep_iap)
}

::google::protobuf::uint8* summary_webrep_iap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.summary_webrep_iap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address iap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_iap_mac(), deterministic, target);
  }

  // optional uint32 webrep_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webrep_id(), target);
  }

  // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bytes_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.summary_webrep_iap)
  return target;
}

size_t summary_webrep_iap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.summary_webrep_iap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ce.nbapi.mac_address iap_mac = 1;
    if (has_iap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iap_mac_);
    }

    // optional .ce.nbapi.iap_bytes_info bytes_info = 3;
    if (has_bytes_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_info_);
    }

    // optional uint32 webrep_id = 2;
    if (has_webrep_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webrep_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void summary_webrep_iap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.summary_webrep_iap)
  GOOGLE_DCHECK_NE(&from, this);
  const summary_webrep_iap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const summary_webrep_iap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.summary_webrep_iap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.summary_webrep_iap)
    MergeFrom(*source);
  }
}

void summary_webrep_iap::MergeFrom(const summary_webrep_iap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.summary_webrep_iap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iap_mac()->::ce::nbapi::mac_address::MergeFrom(from.iap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_info()->::ce::nbapi::iap_bytes_info::MergeFrom(from.bytes_info());
    }
    if (cached_has_bits & 0x00000004u) {
      webrep_id_ = from.webrep_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void summary_webrep_iap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.summary_webrep_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void summary_webrep_iap::CopyFrom(const summary_webrep_iap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.summary_webrep_iap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool summary_webrep_iap::IsInitialized() const {
  if (has_iap_mac()) {
    if (!this->iap_mac_->IsInitialized()) return false;
  }
  return true;
}

void summary_webrep_iap::Swap(summary_webrep_iap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void summary_webrep_iap::InternalSwap(summary_webrep_iap* other) {
  using std::swap;
  swap(iap_mac_, other->iap_mac_);
  swap(bytes_info_, other->bytes_info_);
  swap(webrep_id_, other->webrep_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata summary_webrep_iap::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ap_neighbor_list::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ap_neighbor_list::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ap_neighbor_list::ap_neighbor_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ap_neighbor_list.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.ap_neighbor_list)
}
ap_neighbor_list::ap_neighbor_list(const ap_neighbor_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      neighbor_(from.neighbor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.ap_neighbor_list)
}

void ap_neighbor_list::SharedCtor() {
}

ap_neighbor_list::~ap_neighbor_list() {
  // @@protoc_insertion_point(destructor:ce.nbapi.ap_neighbor_list)
  SharedDtor();
}

void ap_neighbor_list::SharedDtor() {
}

void ap_neighbor_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ap_neighbor_list::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ap_neighbor_list& ap_neighbor_list::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ap_neighbor_list.base);
  return *internal_default_instance();
}


void ap_neighbor_list::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.ap_neighbor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ap_neighbor_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.ap_neighbor_list)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ce.nbapi.ap_neighbor neighbor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.ap_neighbor_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.ap_neighbor_list)
  return false;
#undef DO_
}

void ap_neighbor_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.ap_neighbor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ce.nbapi.ap_neighbor neighbor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->neighbor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.ap_neighbor_list)
}

::google::protobuf::uint8* ap_neighbor_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.ap_neighbor_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ce.nbapi.ap_neighbor neighbor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neighbor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->neighbor(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.ap_neighbor_list)
  return target;
}

size_t ap_neighbor_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.ap_neighbor_list)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.ap_neighbor neighbor = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->neighbor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->neighbor(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ap_neighbor_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.ap_neighbor_list)
  GOOGLE_DCHECK_NE(&from, this);
  const ap_neighbor_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ap_neighbor_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.ap_neighbor_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.ap_neighbor_list)
    MergeFrom(*source);
  }
}

void ap_neighbor_list::MergeFrom(const ap_neighbor_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.ap_neighbor_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_.MergeFrom(from.neighbor_);
}

void ap_neighbor_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.ap_neighbor_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ap_neighbor_list::CopyFrom(const ap_neighbor_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.ap_neighbor_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ap_neighbor_list::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->neighbor())) return false;
  return true;
}

void ap_neighbor_list::Swap(ap_neighbor_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ap_neighbor_list::InternalSwap(ap_neighbor_list* other) {
  using std::swap;
  CastToBase(&neighbor_)->InternalSwap(CastToBase(&other->neighbor_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ap_neighbor_list::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void utilization_stats_radio::InitAsDefaultInstance() {
  ::ce::nbapi::_utilization_stats_radio_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int utilization_stats_radio::kApEthMacFieldNumber;
const int utilization_stats_radio::kRadioNumberFieldNumber;
const int utilization_stats_radio::kUstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

utilization_stats_radio::utilization_stats_radio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_utilization_stats_radio.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.utilization_stats_radio)
}
utilization_stats_radio::utilization_stats_radio(const utilization_stats_radio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ustats_(from.ustats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  radio_number_ = from.radio_number_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.utilization_stats_radio)
}

void utilization_stats_radio::SharedCtor() {
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radio_number_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(radio_number_));
}

utilization_stats_radio::~utilization_stats_radio() {
  // @@protoc_insertion_point(destructor:ce.nbapi.utilization_stats_radio)
  SharedDtor();
}

void utilization_stats_radio::SharedDtor() {
  if (this != internal_default_instance()) delete ap_eth_mac_;
}

void utilization_stats_radio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* utilization_stats_radio::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const utilization_stats_radio& utilization_stats_radio::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_utilization_stats_radio.base);
  return *internal_default_instance();
}


void utilization_stats_radio::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.utilization_stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ustats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ap_eth_mac_ != NULL);
    ap_eth_mac_->Clear();
  }
  radio_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool utilization_stats_radio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.utilization_stats_radio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radio_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_radio_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radio_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.util_stats ustats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ustats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.utilization_stats_radio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.utilization_stats_radio)
  return false;
#undef DO_
}

void utilization_stats_radio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.utilization_stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radio_number(), output);
  }

  // repeated .ce.nbapi.util_stats ustats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ustats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->ustats(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.utilization_stats_radio)
}

::google::protobuf::uint8* utilization_stats_radio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.utilization_stats_radio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radio_number(), target);
  }

  // repeated .ce.nbapi.util_stats ustats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ustats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ustats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.utilization_stats_radio)
  return target;
}

size_t utilization_stats_radio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.utilization_stats_radio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.util_stats ustats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ustats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ustats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ce.nbapi.mac_address ap_eth_mac = 1;
    if (has_ap_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_eth_mac_);
    }

    // optional uint32 radio_number = 2;
    if (has_radio_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radio_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void utilization_stats_radio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.utilization_stats_radio)
  GOOGLE_DCHECK_NE(&from, this);
  const utilization_stats_radio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const utilization_stats_radio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.utilization_stats_radio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.utilization_stats_radio)
    MergeFrom(*source);
  }
}

void utilization_stats_radio::MergeFrom(const utilization_stats_radio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.utilization_stats_radio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ustats_.MergeFrom(from.ustats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      radio_number_ = from.radio_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void utilization_stats_radio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.utilization_stats_radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void utilization_stats_radio::CopyFrom(const utilization_stats_radio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.utilization_stats_radio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool utilization_stats_radio::IsInitialized() const {
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  return true;
}

void utilization_stats_radio::Swap(utilization_stats_radio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void utilization_stats_radio::InternalSwap(utilization_stats_radio* other) {
  using std::swap;
  CastToBase(&ustats_)->InternalSwap(CastToBase(&other->ustats_));
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(radio_number_, other->radio_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata utilization_stats_radio::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void proximity::InitAsDefaultInstance() {
  ::ce::nbapi::_proximity_default_instance_._instance.get_mutable()->sta_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_proximity_default_instance_._instance.get_mutable()->radio_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int proximity::kStaEthMacFieldNumber;
const int proximity::kRadioMacFieldNumber;
const int proximity::kRssiValFieldNumber;
const int proximity::kApNameFieldNumber;
const int proximity::kHashedStaEthMacFieldNumber;
const int proximity::kTargetTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

proximity::proximity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_proximity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.proximity)
}
proximity::proximity(const proximity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_name()) {
    ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
  }
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashed_sta_eth_mac()) {
    hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
  }
  if (from.has_sta_eth_mac()) {
    sta_eth_mac_ = new ::ce::nbapi::mac_address(*from.sta_eth_mac_);
  } else {
    sta_eth_mac_ = NULL;
  }
  if (from.has_radio_mac()) {
    radio_mac_ = new ::ce::nbapi::mac_address(*from.radio_mac_);
  } else {
    radio_mac_ = NULL;
  }
  ::memcpy(&rssi_val_, &from.rssi_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_type_) -
    reinterpret_cast<char*>(&rssi_val_)) + sizeof(target_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.proximity)
}

void proximity::SharedCtor() {
  ap_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sta_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_val_) -
      reinterpret_cast<char*>(&sta_eth_mac_)) + sizeof(rssi_val_));
  target_type_ = 1;
}

proximity::~proximity() {
  // @@protoc_insertion_point(destructor:ce.nbapi.proximity)
  SharedDtor();
}

void proximity::SharedDtor() {
  ap_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashed_sta_eth_mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sta_eth_mac_;
  if (this != internal_default_instance()) delete radio_mac_;
}

void proximity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* proximity::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const proximity& proximity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_proximity.base);
  return *internal_default_instance();
}


void proximity::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ap_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hashed_sta_eth_mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sta_eth_mac_ != NULL);
      sta_eth_mac_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(radio_mac_ != NULL);
      radio_mac_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    rssi_val_ = 0;
    target_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool proximity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.proximity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address sta_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address radio_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rssi_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_rssi_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_name().data(), static_cast<int>(this->ap_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.proximity.ap_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hashed_sta_eth_mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashed_sta_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::target_dev_type_IsValid(value)) {
            set_target_type(static_cast< ::ce::nbapi::target_dev_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.proximity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.proximity)
  return false;
#undef DO_
}

void proximity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radio_mac(), output);
  }

  // optional int32 rssi_val = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rssi_val(), output);
  }

  // optional string ap_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.proximity.ap_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ap_name(), output);
  }

  // optional bytes hashed_sta_eth_mac = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->hashed_sta_eth_mac(), output);
  }

  // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->target_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.proximity)
}

::google::protobuf::uint8* proximity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address sta_eth_mac = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sta_eth_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address radio_mac = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radio_mac(), deterministic, target);
  }

  // optional int32 rssi_val = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rssi_val(), target);
  }

  // optional string ap_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_name().data(), static_cast<int>(this->ap_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.proximity.ap_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ap_name(), target);
  }

  // optional bytes hashed_sta_eth_mac = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->hashed_sta_eth_mac(), target);
  }

  // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->target_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.proximity)
  return target;
}

size_t proximity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.proximity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string ap_name = 4;
    if (has_ap_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_name());
    }

    // optional bytes hashed_sta_eth_mac = 5;
    if (has_hashed_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashed_sta_eth_mac());
    }

    // optional .ce.nbapi.mac_address sta_eth_mac = 1;
    if (has_sta_eth_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_eth_mac_);
    }

    // optional .ce.nbapi.mac_address radio_mac = 2;
    if (has_radio_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_mac_);
    }

    // optional int32 rssi_val = 3;
    if (has_rssi_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi_val());
    }

    // optional .ce.nbapi.target_dev_type target_type = 6 [default = TARGET_TYPE_STATION];
    if (has_target_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void proximity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.proximity)
  GOOGLE_DCHECK_NE(&from, this);
  const proximity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const proximity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.proximity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.proximity)
    MergeFrom(*source);
  }
}

void proximity::MergeFrom(const proximity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.proximity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ap_name();
      ap_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hashed_sta_eth_mac();
      hashed_sta_eth_mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashed_sta_eth_mac_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sta_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.sta_eth_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_radio_mac()->::ce::nbapi::mac_address::MergeFrom(from.radio_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      rssi_val_ = from.rssi_val_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_type_ = from.target_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void proximity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.proximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proximity::CopyFrom(const proximity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.proximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proximity::IsInitialized() const {
  if (has_sta_eth_mac()) {
    if (!this->sta_eth_mac_->IsInitialized()) return false;
  }
  if (has_radio_mac()) {
    if (!this->radio_mac_->IsInitialized()) return false;
  }
  return true;
}

void proximity::Swap(proximity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void proximity::InternalSwap(proximity* other) {
  using std::swap;
  ap_name_.Swap(&other->ap_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashed_sta_eth_mac_.Swap(&other->hashed_sta_eth_mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sta_eth_mac_, other->sta_eth_mac_);
  swap(radio_mac_, other->radio_mac_);
  swap(rssi_val_, other->rssi_val_);
  swap(target_type_, other->target_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata proximity::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void dot1x::InitAsDefaultInstance() {
  ::ce::nbapi::_dot1x_default_instance_._instance.get_mutable()->station_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_dot1x_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_dot1x_default_instance_._instance.get_mutable()->serverip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int dot1x::kStartTimestampFieldNumber;
const int dot1x::kFinishTimestampFieldNumber;
const int dot1x::kStationMacFieldNumber;
const int dot1x::kUsernameFieldNumber;
const int dot1x::kBssidFieldNumber;
const int dot1x::kResultFieldNumber;
const int dot1x::kReasonFieldNumber;
const int dot1x::kServerRetryCntFieldNumber;
const int dot1x::kClientRetryCntFieldNumber;
const int dot1x::kServeripFieldNumber;
const int dot1x::kSrvrElapsedTimeFieldNumber;
const int dot1x::kClntElapsedTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

dot1x::dot1x()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_dot1x.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.dot1x)
}
dot1x::dot1x(const dot1x& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_station_mac()) {
    station_mac_ = new ::ce::nbapi::mac_address(*from.station_mac_);
  } else {
    station_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_serverip()) {
    serverip_ = new ::ce::nbapi::ip_address(*from.serverip_);
  } else {
    serverip_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&clnt_elapsed_time_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(clnt_elapsed_time_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.dot1x)
}

void dot1x::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&station_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clnt_elapsed_time_) -
      reinterpret_cast<char*>(&station_mac_)) + sizeof(clnt_elapsed_time_));
}

dot1x::~dot1x() {
  // @@protoc_insertion_point(destructor:ce.nbapi.dot1x)
  SharedDtor();
}

void dot1x::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete station_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete serverip_;
}

void dot1x::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* dot1x::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const dot1x& dot1x::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_dot1x.base);
  return *internal_default_instance();
}


void dot1x::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.dot1x)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(station_mac_ != NULL);
      station_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(serverip_ != NULL);
      serverip_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(reason_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&server_retry_cnt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clnt_elapsed_time_) -
        reinterpret_cast<char*>(&server_retry_cnt_)) + sizeof(clnt_elapsed_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool dot1x::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.dot1x)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 finish_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_finish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address station_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.dot1x.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_retry_cnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_server_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_retry_cnt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_client_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address serverip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 srvr_elapsed_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_srvr_elapsed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srvr_elapsed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 clnt_elapsed_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_clnt_elapsed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clnt_elapsed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.dot1x)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.dot1x)
  return false;
#undef DO_
}

void dot1x::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.dot1x)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->finish_timestamp(), output);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_station_mac(), output);
  }

  // optional string username = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.dot1x.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_bssid(), output);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reason(), output);
  }

  // optional uint32 server_retry_cnt = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_retry_cnt(), output);
  }

  // optional uint32 client_retry_cnt = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->client_retry_cnt(), output);
  }

  // optional .ce.nbapi.ip_address serverip = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_serverip(), output);
  }

  // optional uint32 srvr_elapsed_time = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->srvr_elapsed_time(), output);
  }

  // optional uint32 clnt_elapsed_time = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->clnt_elapsed_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.dot1x)
}

::google::protobuf::uint8* dot1x::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.dot1x)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->finish_timestamp(), target);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_station_mac(), deterministic, target);
  }

  // optional string username = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.dot1x.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional .ce.nbapi.mac_address bssid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->result(), target);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reason(), target);
  }

  // optional uint32 server_retry_cnt = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_retry_cnt(), target);
  }

  // optional uint32 client_retry_cnt = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->client_retry_cnt(), target);
  }

  // optional .ce.nbapi.ip_address serverip = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_serverip(), deterministic, target);
  }

  // optional uint32 srvr_elapsed_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->srvr_elapsed_time(), target);
  }

  // optional uint32 clnt_elapsed_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->clnt_elapsed_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.dot1x)
  return target;
}

size_t dot1x::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.dot1x)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional .ce.nbapi.mac_address station_mac = 3;
    if (has_station_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 5;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.ip_address serverip = 10;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverip_);
    }

    // optional uint64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_timestamp());
    }

    // optional uint64 finish_timestamp = 2;
    if (has_finish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_timestamp());
    }

    // optional uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 server_retry_cnt = 8;
    if (has_server_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_retry_cnt());
    }

    // optional uint32 client_retry_cnt = 9;
    if (has_client_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_retry_cnt());
    }

    // optional uint32 srvr_elapsed_time = 11;
    if (has_srvr_elapsed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srvr_elapsed_time());
    }

    // optional uint32 clnt_elapsed_time = 12;
    if (has_clnt_elapsed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clnt_elapsed_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dot1x::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.dot1x)
  GOOGLE_DCHECK_NE(&from, this);
  const dot1x* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const dot1x>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.dot1x)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.dot1x)
    MergeFrom(*source);
  }
}

void dot1x::MergeFrom(const dot1x& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.dot1x)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_station_mac()->::ce::nbapi::mac_address::MergeFrom(from.station_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serverip()->::ce::nbapi::ip_address::MergeFrom(from.serverip());
    }
    if (cached_has_bits & 0x00000010u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      server_retry_cnt_ = from.server_retry_cnt_;
    }
    if (cached_has_bits & 0x00000200u) {
      client_retry_cnt_ = from.client_retry_cnt_;
    }
    if (cached_has_bits & 0x00000400u) {
      srvr_elapsed_time_ = from.srvr_elapsed_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      clnt_elapsed_time_ = from.clnt_elapsed_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void dot1x::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.dot1x)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dot1x::CopyFrom(const dot1x& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.dot1x)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dot1x::IsInitialized() const {
  if (has_station_mac()) {
    if (!this->station_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_serverip()) {
    if (!this->serverip_->IsInitialized()) return false;
  }
  return true;
}

void dot1x::Swap(dot1x* other) {
  if (other == this) return;
  InternalSwap(other);
}
void dot1x::InternalSwap(dot1x* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(station_mac_, other->station_mac_);
  swap(bssid_, other->bssid_);
  swap(serverip_, other->serverip_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(finish_timestamp_, other->finish_timestamp_);
  swap(result_, other->result_);
  swap(reason_, other->reason_);
  swap(server_retry_cnt_, other->server_retry_cnt_);
  swap(client_retry_cnt_, other->client_retry_cnt_);
  swap(srvr_elapsed_time_, other->srvr_elapsed_time_);
  swap(clnt_elapsed_time_, other->clnt_elapsed_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata dot1x::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void wpa_key_handshake::InitAsDefaultInstance() {
  ::ce::nbapi::_wpa_key_handshake_default_instance_._instance.get_mutable()->station_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_wpa_key_handshake_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int wpa_key_handshake::kStartTimestampFieldNumber;
const int wpa_key_handshake::kFinishTimestampFieldNumber;
const int wpa_key_handshake::kStationMacFieldNumber;
const int wpa_key_handshake::kBssidFieldNumber;
const int wpa_key_handshake::kResultFieldNumber;
const int wpa_key_handshake::kTriggerReasonFieldNumber;
const int wpa_key_handshake::kReasonFieldNumber;
const int wpa_key_handshake::kKey1RetryCntFieldNumber;
const int wpa_key_handshake::kKey3RetryCntFieldNumber;
const int wpa_key_handshake::kReplayCounterMismatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

wpa_key_handshake::wpa_key_handshake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_wpa_key_handshake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.wpa_key_handshake)
}
wpa_key_handshake::wpa_key_handshake(const wpa_key_handshake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_mac()) {
    station_mac_ = new ::ce::nbapi::mac_address(*from.station_mac_);
  } else {
    station_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_counter_mismatch_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(replay_counter_mismatch_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.wpa_key_handshake)
}

void wpa_key_handshake::SharedCtor() {
  ::memset(&station_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replay_counter_mismatch_) -
      reinterpret_cast<char*>(&station_mac_)) + sizeof(replay_counter_mismatch_));
}

wpa_key_handshake::~wpa_key_handshake() {
  // @@protoc_insertion_point(destructor:ce.nbapi.wpa_key_handshake)
  SharedDtor();
}

void wpa_key_handshake::SharedDtor() {
  if (this != internal_default_instance()) delete station_mac_;
  if (this != internal_default_instance()) delete bssid_;
}

void wpa_key_handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* wpa_key_handshake::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const wpa_key_handshake& wpa_key_handshake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_wpa_key_handshake.base);
  return *internal_default_instance();
}


void wpa_key_handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.wpa_key_handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_mac_ != NULL);
      station_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key1_retry_cnt_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(key1_retry_cnt_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&key3_retry_cnt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_counter_mismatch_) -
        reinterpret_cast<char*>(&key3_retry_cnt_)) + sizeof(replay_counter_mismatch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool wpa_key_handshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.wpa_key_handshake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 finish_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_finish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address station_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trigger_reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_trigger_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key1_retry_cnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_key1_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key1_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key3_retry_cnt = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_key3_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key3_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 replay_counter_mismatch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_replay_counter_mismatch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replay_counter_mismatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.wpa_key_handshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.wpa_key_handshake)
  return false;
#undef DO_
}

void wpa_key_handshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.wpa_key_handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->finish_timestamp(), output);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_station_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_bssid(), output);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }

  // optional uint32 trigger_reason = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->trigger_reason(), output);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reason(), output);
  }

  // optional uint32 key1_retry_cnt = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->key1_retry_cnt(), output);
  }

  // optional uint32 key3_retry_cnt = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->key3_retry_cnt(), output);
  }

  // optional uint32 replay_counter_mismatch = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->replay_counter_mismatch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.wpa_key_handshake)
}

::google::protobuf::uint8* wpa_key_handshake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.wpa_key_handshake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->finish_timestamp(), target);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_station_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->result(), target);
  }

  // optional uint32 trigger_reason = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->trigger_reason(), target);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reason(), target);
  }

  // optional uint32 key1_retry_cnt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->key1_retry_cnt(), target);
  }

  // optional uint32 key3_retry_cnt = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->key3_retry_cnt(), target);
  }

  // optional uint32 replay_counter_mismatch = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->replay_counter_mismatch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.wpa_key_handshake)
  return target;
}

size_t wpa_key_handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.wpa_key_handshake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address station_mac = 3;
    if (has_station_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 4;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional uint64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_timestamp());
    }

    // optional uint64 finish_timestamp = 2;
    if (has_finish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_timestamp());
    }

    // optional uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 trigger_reason = 6;
    if (has_trigger_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trigger_reason());
    }

    // optional uint32 reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 key1_retry_cnt = 8;
    if (has_key1_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key1_retry_cnt());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 key3_retry_cnt = 9;
    if (has_key3_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key3_retry_cnt());
    }

    // optional uint32 replay_counter_mismatch = 10;
    if (has_replay_counter_mismatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replay_counter_mismatch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void wpa_key_handshake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.wpa_key_handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const wpa_key_handshake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const wpa_key_handshake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.wpa_key_handshake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.wpa_key_handshake)
    MergeFrom(*source);
  }
}

void wpa_key_handshake::MergeFrom(const wpa_key_handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.wpa_key_handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_mac()->::ce::nbapi::mac_address::MergeFrom(from.station_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000020u) {
      trigger_reason_ = from.trigger_reason_;
    }
    if (cached_has_bits & 0x00000040u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000080u) {
      key1_retry_cnt_ = from.key1_retry_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      key3_retry_cnt_ = from.key3_retry_cnt_;
    }
    if (cached_has_bits & 0x00000200u) {
      replay_counter_mismatch_ = from.replay_counter_mismatch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void wpa_key_handshake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.wpa_key_handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wpa_key_handshake::CopyFrom(const wpa_key_handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.wpa_key_handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wpa_key_handshake::IsInitialized() const {
  if (has_station_mac()) {
    if (!this->station_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  return true;
}

void wpa_key_handshake::Swap(wpa_key_handshake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void wpa_key_handshake::InternalSwap(wpa_key_handshake* other) {
  using std::swap;
  swap(station_mac_, other->station_mac_);
  swap(bssid_, other->bssid_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(finish_timestamp_, other->finish_timestamp_);
  swap(result_, other->result_);
  swap(trigger_reason_, other->trigger_reason_);
  swap(reason_, other->reason_);
  swap(key1_retry_cnt_, other->key1_retry_cnt_);
  swap(key3_retry_cnt_, other->key3_retry_cnt_);
  swap(replay_counter_mismatch_, other->replay_counter_mismatch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata wpa_key_handshake::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void captive_portal::InitAsDefaultInstance() {
  ::ce::nbapi::_captive_portal_default_instance_._instance.get_mutable()->station_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_captive_portal_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_captive_portal_default_instance_._instance.get_mutable()->serverip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_captive_portal_default_instance_._instance.get_mutable()->userip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int captive_portal::kStartTimestampFieldNumber;
const int captive_portal::kFinishTimestampFieldNumber;
const int captive_portal::kStationMacFieldNumber;
const int captive_portal::kUsernameFieldNumber;
const int captive_portal::kBssidFieldNumber;
const int captive_portal::kResultFieldNumber;
const int captive_portal::kReasonFieldNumber;
const int captive_portal::kServerRetryCntFieldNumber;
const int captive_portal::kServeripFieldNumber;
const int captive_portal::kUseripFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

captive_portal::captive_portal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_captive_portal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.captive_portal)
}
captive_portal::captive_portal(const captive_portal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_station_mac()) {
    station_mac_ = new ::ce::nbapi::mac_address(*from.station_mac_);
  } else {
    station_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_serverip()) {
    serverip_ = new ::ce::nbapi::ip_address(*from.serverip_);
  } else {
    serverip_ = NULL;
  }
  if (from.has_userip()) {
    userip_ = new ::ce::nbapi::ip_address(*from.userip_);
  } else {
    userip_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_retry_cnt_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(server_retry_cnt_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.captive_portal)
}

void captive_portal::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&station_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_retry_cnt_) -
      reinterpret_cast<char*>(&station_mac_)) + sizeof(server_retry_cnt_));
}

captive_portal::~captive_portal() {
  // @@protoc_insertion_point(destructor:ce.nbapi.captive_portal)
  SharedDtor();
}

void captive_portal::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete station_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete serverip_;
  if (this != internal_default_instance()) delete userip_;
}

void captive_portal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* captive_portal::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const captive_portal& captive_portal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_captive_portal.base);
  return *internal_default_instance();
}


void captive_portal::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.captive_portal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(station_mac_ != NULL);
      station_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(serverip_ != NULL);
      serverip_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(userip_ != NULL);
      userip_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(result_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_retry_cnt_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(server_retry_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool captive_portal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.captive_portal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 finish_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_finish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address station_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.captive_portal.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_retry_cnt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_server_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address serverip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address userip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.captive_portal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.captive_portal)
  return false;
#undef DO_
}

void captive_portal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.captive_portal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->finish_timestamp(), output);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_station_mac(), output);
  }

  // optional string username = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.captive_portal.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_bssid(), output);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reason(), output);
  }

  // optional uint32 server_retry_cnt = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_retry_cnt(), output);
  }

  // optional .ce.nbapi.ip_address serverip = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_serverip(), output);
  }

  // optional .ce.nbapi.ip_address userip = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_userip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.captive_portal)
}

::google::protobuf::uint8* captive_portal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.captive_portal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->finish_timestamp(), target);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_station_mac(), deterministic, target);
  }

  // optional string username = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.captive_portal.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // optional .ce.nbapi.mac_address bssid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 result = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->result(), target);
  }

  // optional uint32 reason = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reason(), target);
  }

  // optional uint32 server_retry_cnt = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_retry_cnt(), target);
  }

  // optional .ce.nbapi.ip_address serverip = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_serverip(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address userip = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_userip(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.captive_portal)
  return target;
}

size_t captive_portal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.captive_portal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional .ce.nbapi.mac_address station_mac = 3;
    if (has_station_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 5;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.ip_address serverip = 9;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverip_);
    }

    // optional .ce.nbapi.ip_address userip = 10;
    if (has_userip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *userip_);
    }

    // optional uint64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_timestamp());
    }

    // optional uint64 finish_timestamp = 2;
    if (has_finish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_timestamp());
    }

    // optional uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 reason = 7;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 server_retry_cnt = 8;
    if (has_server_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_retry_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void captive_portal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.captive_portal)
  GOOGLE_DCHECK_NE(&from, this);
  const captive_portal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const captive_portal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.captive_portal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.captive_portal)
    MergeFrom(*source);
  }
}

void captive_portal::MergeFrom(const captive_portal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.captive_portal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_station_mac()->::ce::nbapi::mac_address::MergeFrom(from.station_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serverip()->::ce::nbapi::ip_address::MergeFrom(from.serverip());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_userip()->::ce::nbapi::ip_address::MergeFrom(from.userip());
    }
    if (cached_has_bits & 0x00000020u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_retry_cnt_ = from.server_retry_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void captive_portal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.captive_portal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void captive_portal::CopyFrom(const captive_portal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.captive_portal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool captive_portal::IsInitialized() const {
  if (has_station_mac()) {
    if (!this->station_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_serverip()) {
    if (!this->serverip_->IsInitialized()) return false;
  }
  if (has_userip()) {
    if (!this->userip_->IsInitialized()) return false;
  }
  return true;
}

void captive_portal::Swap(captive_portal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void captive_portal::InternalSwap(captive_portal* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(station_mac_, other->station_mac_);
  swap(bssid_, other->bssid_);
  swap(serverip_, other->serverip_);
  swap(userip_, other->userip_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(finish_timestamp_, other->finish_timestamp_);
  swap(result_, other->result_);
  swap(reason_, other->reason_);
  swap(server_retry_cnt_, other->server_retry_cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata captive_portal::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void macauth::InitAsDefaultInstance() {
  ::ce::nbapi::_macauth_default_instance_._instance.get_mutable()->station_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_macauth_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_macauth_default_instance_._instance.get_mutable()->serverip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int macauth::kStartTimestampFieldNumber;
const int macauth::kFinishTimestampFieldNumber;
const int macauth::kStationMacFieldNumber;
const int macauth::kBssidFieldNumber;
const int macauth::kResultFieldNumber;
const int macauth::kReasonFieldNumber;
const int macauth::kServerRetryCntFieldNumber;
const int macauth::kServeripFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

macauth::macauth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_macauth.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.macauth)
}
macauth::macauth(const macauth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_mac()) {
    station_mac_ = new ::ce::nbapi::mac_address(*from.station_mac_);
  } else {
    station_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_serverip()) {
    serverip_ = new ::ce::nbapi::ip_address(*from.serverip_);
  } else {
    serverip_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_retry_cnt_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(server_retry_cnt_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.macauth)
}

void macauth::SharedCtor() {
  ::memset(&station_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_retry_cnt_) -
      reinterpret_cast<char*>(&station_mac_)) + sizeof(server_retry_cnt_));
}

macauth::~macauth() {
  // @@protoc_insertion_point(destructor:ce.nbapi.macauth)
  SharedDtor();
}

void macauth::SharedDtor() {
  if (this != internal_default_instance()) delete station_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete serverip_;
}

void macauth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* macauth::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const macauth& macauth::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_macauth.base);
  return *internal_default_instance();
}


void macauth::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.macauth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_mac_ != NULL);
      station_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(serverip_ != NULL);
      serverip_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_retry_cnt_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(server_retry_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool macauth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.macauth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 finish_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_finish_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address station_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_retry_cnt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_server_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address serverip = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.macauth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.macauth)
  return false;
#undef DO_
}

void macauth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.macauth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->finish_timestamp(), output);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_station_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_bssid(), output);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }

  // optional uint32 reason = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reason(), output);
  }

  // optional uint32 server_retry_cnt = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_retry_cnt(), output);
  }

  // optional .ce.nbapi.ip_address serverip = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_serverip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.macauth)
}

::google::protobuf::uint8* macauth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.macauth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_timestamp = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // optional uint64 finish_timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->finish_timestamp(), target);
  }

  // optional .ce.nbapi.mac_address station_mac = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_station_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->result(), target);
  }

  // optional uint32 reason = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reason(), target);
  }

  // optional uint32 server_retry_cnt = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_retry_cnt(), target);
  }

  // optional .ce.nbapi.ip_address serverip = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_serverip(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.macauth)
  return target;
}

size_t macauth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.macauth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address station_mac = 3;
    if (has_station_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 4;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.ip_address serverip = 8;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverip_);
    }

    // optional uint64 start_timestamp = 1;
    if (has_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_timestamp());
    }

    // optional uint64 finish_timestamp = 2;
    if (has_finish_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finish_timestamp());
    }

    // optional uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

    // optional uint32 server_retry_cnt = 7;
    if (has_server_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_retry_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void macauth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.macauth)
  GOOGLE_DCHECK_NE(&from, this);
  const macauth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const macauth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.macauth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.macauth)
    MergeFrom(*source);
  }
}

void macauth::MergeFrom(const macauth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.macauth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_mac()->::ce::nbapi::mac_address::MergeFrom(from.station_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_serverip()->::ce::nbapi::ip_address::MergeFrom(from.serverip());
    }
    if (cached_has_bits & 0x00000008u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000040u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_retry_cnt_ = from.server_retry_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void macauth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.macauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void macauth::CopyFrom(const macauth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.macauth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool macauth::IsInitialized() const {
  if (has_station_mac()) {
    if (!this->station_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_serverip()) {
    if (!this->serverip_->IsInitialized()) return false;
  }
  return true;
}

void macauth::Swap(macauth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void macauth::InternalSwap(macauth* other) {
  using std::swap;
  swap(station_mac_, other->station_mac_);
  swap(bssid_, other->bssid_);
  swap(serverip_, other->serverip_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(finish_timestamp_, other->finish_timestamp_);
  swap(result_, other->result_);
  swap(reason_, other->reason_);
  swap(server_retry_cnt_, other->server_retry_cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata macauth::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void auth_srvr_timeout::InitAsDefaultInstance() {
  ::ce::nbapi::_auth_srvr_timeout_default_instance_._instance.get_mutable()->station_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_auth_srvr_timeout_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_auth_srvr_timeout_default_instance_._instance.get_mutable()->userip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_auth_srvr_timeout_default_instance_._instance.get_mutable()->serverip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int auth_srvr_timeout::kTimestampFieldNumber;
const int auth_srvr_timeout::kStationMacFieldNumber;
const int auth_srvr_timeout::kBssidFieldNumber;
const int auth_srvr_timeout::kAuthtypeFieldNumber;
const int auth_srvr_timeout::kRetryCntFieldNumber;
const int auth_srvr_timeout::kUseripFieldNumber;
const int auth_srvr_timeout::kServeripFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

auth_srvr_timeout::auth_srvr_timeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_auth_srvr_timeout.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.auth_srvr_timeout)
}
auth_srvr_timeout::auth_srvr_timeout(const auth_srvr_timeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_mac()) {
    station_mac_ = new ::ce::nbapi::mac_address(*from.station_mac_);
  } else {
    station_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_userip()) {
    userip_ = new ::ce::nbapi::ip_address(*from.userip_);
  } else {
    userip_ = NULL;
  }
  if (from.has_serverip()) {
    serverip_ = new ::ce::nbapi::ip_address(*from.serverip_);
  } else {
    serverip_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&retry_cnt_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(retry_cnt_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.auth_srvr_timeout)
}

void auth_srvr_timeout::SharedCtor() {
  ::memset(&station_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retry_cnt_) -
      reinterpret_cast<char*>(&station_mac_)) + sizeof(retry_cnt_));
}

auth_srvr_timeout::~auth_srvr_timeout() {
  // @@protoc_insertion_point(destructor:ce.nbapi.auth_srvr_timeout)
  SharedDtor();
}

void auth_srvr_timeout::SharedDtor() {
  if (this != internal_default_instance()) delete station_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete userip_;
  if (this != internal_default_instance()) delete serverip_;
}

void auth_srvr_timeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* auth_srvr_timeout::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const auth_srvr_timeout& auth_srvr_timeout::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_auth_srvr_timeout.base);
  return *internal_default_instance();
}


void auth_srvr_timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.auth_srvr_timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_mac_ != NULL);
      station_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(userip_ != NULL);
      userip_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(serverip_ != NULL);
      serverip_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retry_cnt_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(retry_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool auth_srvr_timeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.auth_srvr_timeout)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address station_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 authtype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_authtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retry_cnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_retry_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address userip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address serverip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serverip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.auth_srvr_timeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.auth_srvr_timeout)
  return false;
#undef DO_
}

void auth_srvr_timeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.auth_srvr_timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // optional .ce.nbapi.mac_address station_mac = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_station_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_bssid(), output);
  }

  // optional uint32 authtype = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authtype(), output);
  }

  // optional uint32 retry_cnt = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retry_cnt(), output);
  }

  // optional .ce.nbapi.ip_address userip = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_userip(), output);
  }

  // optional .ce.nbapi.ip_address serverip = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_serverip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.auth_srvr_timeout)
}

::google::protobuf::uint8* auth_srvr_timeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.auth_srvr_timeout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // optional .ce.nbapi.mac_address station_mac = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_station_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 authtype = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authtype(), target);
  }

  // optional uint32 retry_cnt = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retry_cnt(), target);
  }

  // optional .ce.nbapi.ip_address userip = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_userip(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address serverip = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_serverip(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.auth_srvr_timeout)
  return target;
}

size_t auth_srvr_timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.auth_srvr_timeout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .ce.nbapi.mac_address station_mac = 2;
    if (has_station_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 3;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.ip_address userip = 6;
    if (has_userip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *userip_);
    }

    // optional .ce.nbapi.ip_address serverip = 7;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *serverip_);
    }

    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 authtype = 4;
    if (has_authtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authtype());
    }

    // optional uint32 retry_cnt = 5;
    if (has_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retry_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void auth_srvr_timeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.auth_srvr_timeout)
  GOOGLE_DCHECK_NE(&from, this);
  const auth_srvr_timeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const auth_srvr_timeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.auth_srvr_timeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.auth_srvr_timeout)
    MergeFrom(*source);
  }
}

void auth_srvr_timeout::MergeFrom(const auth_srvr_timeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.auth_srvr_timeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_mac()->::ce::nbapi::mac_address::MergeFrom(from.station_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_userip()->::ce::nbapi::ip_address::MergeFrom(from.userip());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_serverip()->::ce::nbapi::ip_address::MergeFrom(from.serverip());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      authtype_ = from.authtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      retry_cnt_ = from.retry_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void auth_srvr_timeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.auth_srvr_timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auth_srvr_timeout::CopyFrom(const auth_srvr_timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.auth_srvr_timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auth_srvr_timeout::IsInitialized() const {
  if (has_station_mac()) {
    if (!this->station_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_userip()) {
    if (!this->userip_->IsInitialized()) return false;
  }
  if (has_serverip()) {
    if (!this->serverip_->IsInitialized()) return false;
  }
  return true;
}

void auth_srvr_timeout::Swap(auth_srvr_timeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void auth_srvr_timeout::InternalSwap(auth_srvr_timeout* other) {
  using std::swap;
  swap(station_mac_, other->station_mac_);
  swap(bssid_, other->bssid_);
  swap(userip_, other->userip_);
  swap(serverip_, other->serverip_);
  swap(timestamp_, other->timestamp_);
  swap(authtype_, other->authtype_);
  swap(retry_cnt_, other->retry_cnt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata auth_srvr_timeout::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void security_message::InitAsDefaultInstance() {
  ::ce::nbapi::_security_message_default_instance_._instance.get_mutable()->auth_srvr_timeout_ = const_cast< ::ce::nbapi::auth_srvr_timeout*>(
      ::ce::nbapi::auth_srvr_timeout::internal_default_instance());
  ::ce::nbapi::_security_message_default_instance_._instance.get_mutable()->macauth_ = const_cast< ::ce::nbapi::macauth*>(
      ::ce::nbapi::macauth::internal_default_instance());
  ::ce::nbapi::_security_message_default_instance_._instance.get_mutable()->captive_portal_ = const_cast< ::ce::nbapi::captive_portal*>(
      ::ce::nbapi::captive_portal::internal_default_instance());
  ::ce::nbapi::_security_message_default_instance_._instance.get_mutable()->wpa_key_handshake_ = const_cast< ::ce::nbapi::wpa_key_handshake*>(
      ::ce::nbapi::wpa_key_handshake::internal_default_instance());
  ::ce::nbapi::_security_message_default_instance_._instance.get_mutable()->dot1x_ = const_cast< ::ce::nbapi::dot1x*>(
      ::ce::nbapi::dot1x::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int security_message::kMsgTypeFieldNumber;
const int security_message::kAuthSrvrTimeoutFieldNumber;
const int security_message::kMacauthFieldNumber;
const int security_message::kCaptivePortalFieldNumber;
const int security_message::kWpaKeyHandshakeFieldNumber;
const int security_message::kDot1XFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

security_message::security_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_security_message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.security_message)
}
security_message::security_message(const security_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth_srvr_timeout()) {
    auth_srvr_timeout_ = new ::ce::nbapi::auth_srvr_timeout(*from.auth_srvr_timeout_);
  } else {
    auth_srvr_timeout_ = NULL;
  }
  if (from.has_macauth()) {
    macauth_ = new ::ce::nbapi::macauth(*from.macauth_);
  } else {
    macauth_ = NULL;
  }
  if (from.has_captive_portal()) {
    captive_portal_ = new ::ce::nbapi::captive_portal(*from.captive_portal_);
  } else {
    captive_portal_ = NULL;
  }
  if (from.has_wpa_key_handshake()) {
    wpa_key_handshake_ = new ::ce::nbapi::wpa_key_handshake(*from.wpa_key_handshake_);
  } else {
    wpa_key_handshake_ = NULL;
  }
  if (from.has_dot1x()) {
    dot1x_ = new ::ce::nbapi::dot1x(*from.dot1x_);
  } else {
    dot1x_ = NULL;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.security_message)
}

void security_message::SharedCtor() {
  ::memset(&auth_srvr_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&auth_srvr_timeout_)) + sizeof(msg_type_));
}

security_message::~security_message() {
  // @@protoc_insertion_point(destructor:ce.nbapi.security_message)
  SharedDtor();
}

void security_message::SharedDtor() {
  if (this != internal_default_instance()) delete auth_srvr_timeout_;
  if (this != internal_default_instance()) delete macauth_;
  if (this != internal_default_instance()) delete captive_portal_;
  if (this != internal_default_instance()) delete wpa_key_handshake_;
  if (this != internal_default_instance()) delete dot1x_;
}

void security_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* security_message::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const security_message& security_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_security_message.base);
  return *internal_default_instance();
}


void security_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.security_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(auth_srvr_timeout_ != NULL);
      auth_srvr_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(macauth_ != NULL);
      macauth_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(captive_portal_ != NULL);
      captive_portal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(wpa_key_handshake_ != NULL);
      wpa_key_handshake_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(dot1x_ != NULL);
      dot1x_->Clear();
    }
  }
  msg_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool security_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.security_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.security_message.security_msg_type msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::security_message_security_msg_type_IsValid(value)) {
            set_msg_type(static_cast< ::ce::nbapi::security_message_security_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.auth_srvr_timeout auth_srvr_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_srvr_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.macauth macauth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_macauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.captive_portal captive_portal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_captive_portal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.wpa_key_handshake wpa_key_handshake = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wpa_key_handshake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.dot1x dot1x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dot1x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.security_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.security_message)
  return false;
#undef DO_
}

void security_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.security_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.security_message.security_msg_type msg_type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional .ce.nbapi.auth_srvr_timeout auth_srvr_timeout = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_auth_srvr_timeout(), output);
  }

  // optional .ce.nbapi.macauth macauth = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_macauth(), output);
  }

  // optional .ce.nbapi.captive_portal captive_portal = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_captive_portal(), output);
  }

  // optional .ce.nbapi.wpa_key_handshake wpa_key_handshake = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_wpa_key_handshake(), output);
  }

  // optional .ce.nbapi.dot1x dot1x = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_dot1x(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.security_message)
}

::google::protobuf::uint8* security_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.security_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.security_message.security_msg_type msg_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional .ce.nbapi.auth_srvr_timeout auth_srvr_timeout = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_auth_srvr_timeout(), deterministic, target);
  }

  // optional .ce.nbapi.macauth macauth = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_macauth(), deterministic, target);
  }

  // optional .ce.nbapi.captive_portal captive_portal = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_captive_portal(), deterministic, target);
  }

  // optional .ce.nbapi.wpa_key_handshake wpa_key_handshake = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_wpa_key_handshake(), deterministic, target);
  }

  // optional .ce.nbapi.dot1x dot1x = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_dot1x(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.security_message)
  return target;
}

size_t security_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.security_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .ce.nbapi.auth_srvr_timeout auth_srvr_timeout = 2;
    if (has_auth_srvr_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *auth_srvr_timeout_);
    }

    // optional .ce.nbapi.macauth macauth = 3;
    if (has_macauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *macauth_);
    }

    // optional .ce.nbapi.captive_portal captive_portal = 4;
    if (has_captive_portal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *captive_portal_);
    }

    // optional .ce.nbapi.wpa_key_handshake wpa_key_handshake = 5;
    if (has_wpa_key_handshake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wpa_key_handshake_);
    }

    // optional .ce.nbapi.dot1x dot1x = 6;
    if (has_dot1x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dot1x_);
    }

    // optional .ce.nbapi.security_message.security_msg_type msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void security_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.security_message)
  GOOGLE_DCHECK_NE(&from, this);
  const security_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const security_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.security_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.security_message)
    MergeFrom(*source);
  }
}

void security_message::MergeFrom(const security_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.security_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_auth_srvr_timeout()->::ce::nbapi::auth_srvr_timeout::MergeFrom(from.auth_srvr_timeout());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_macauth()->::ce::nbapi::macauth::MergeFrom(from.macauth());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_captive_portal()->::ce::nbapi::captive_portal::MergeFrom(from.captive_portal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_wpa_key_handshake()->::ce::nbapi::wpa_key_handshake::MergeFrom(from.wpa_key_handshake());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_dot1x()->::ce::nbapi::dot1x::MergeFrom(from.dot1x());
    }
    if (cached_has_bits & 0x00000020u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void security_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.security_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void security_message::CopyFrom(const security_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.security_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool security_message::IsInitialized() const {
  if (has_auth_srvr_timeout()) {
    if (!this->auth_srvr_timeout_->IsInitialized()) return false;
  }
  if (has_macauth()) {
    if (!this->macauth_->IsInitialized()) return false;
  }
  if (has_captive_portal()) {
    if (!this->captive_portal_->IsInitialized()) return false;
  }
  if (has_wpa_key_handshake()) {
    if (!this->wpa_key_handshake_->IsInitialized()) return false;
  }
  if (has_dot1x()) {
    if (!this->dot1x_->IsInitialized()) return false;
  }
  return true;
}

void security_message::Swap(security_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void security_message::InternalSwap(security_message* other) {
  using std::swap;
  swap(auth_srvr_timeout_, other->auth_srvr_timeout_);
  swap(macauth_, other->macauth_);
  swap(captive_portal_, other->captive_portal_);
  swap(wpa_key_handshake_, other->wpa_key_handshake_);
  swap(dot1x_, other->dot1x_);
  swap(msg_type_, other->msg_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata security_message::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void spectrum_info::InitAsDefaultInstance() {
  ::ce::nbapi::_spectrum_info_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int spectrum_info::kApMacFieldNumber;
const int spectrum_info::kRadioNumberFieldNumber;
const int spectrum_info::kDevIdFieldNumber;
const int spectrum_info::kDevTypeFieldNumber;
const int spectrum_info::kLowChFieldNumber;
const int spectrum_info::kHighChFieldNumber;
const int spectrum_info::kSignalFieldNumber;
const int spectrum_info::kDutyCycleFieldNumber;
const int spectrum_info::kCenterFreqFieldNumber;
const int spectrum_info::kTimestampFieldNumber;
const int spectrum_info::kActiveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

spectrum_info::spectrum_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_spectrum_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.spectrum_info)
}
spectrum_info::spectrum_info(const spectrum_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  ::memcpy(&radio_number_, &from.radio_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_time_) -
    reinterpret_cast<char*>(&radio_number_)) + sizeof(active_time_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.spectrum_info)
}

void spectrum_info::SharedCtor() {
  ::memset(&ap_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_time_) -
      reinterpret_cast<char*>(&ap_mac_)) + sizeof(active_time_));
}

spectrum_info::~spectrum_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.spectrum_info)
  SharedDtor();
}

void spectrum_info::SharedDtor() {
  if (this != internal_default_instance()) delete ap_mac_;
}

void spectrum_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* spectrum_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const spectrum_info& spectrum_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_spectrum_info.base);
  return *internal_default_instance();
}


void spectrum_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.spectrum_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ap_mac_ != NULL);
    ap_mac_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&radio_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duty_cycle_) -
        reinterpret_cast<char*>(&radio_number_)) + sizeof(duty_cycle_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&center_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_time_) -
        reinterpret_cast<char*>(&center_freq_)) + sizeof(active_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool spectrum_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.spectrum_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address ap_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radio_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_radio_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radio_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dev_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dev_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dev_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_dev_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dev_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_ch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_low_ch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 high_ch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_high_ch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 signal = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duty_cycle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_duty_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duty_cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 center_freq = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_center_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &center_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 active_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_active_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.spectrum_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.spectrum_info)
  return false;
#undef DO_
}

void spectrum_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.spectrum_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_mac(), output);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radio_number(), output);
  }

  // optional uint32 dev_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dev_id(), output);
  }

  // optional uint32 dev_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dev_type(), output);
  }

  // optional uint32 low_ch = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->low_ch(), output);
  }

  // optional uint32 high_ch = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->high_ch(), output);
  }

  // optional uint32 signal = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->signal(), output);
  }

  // optional uint32 duty_cycle = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duty_cycle(), output);
  }

  // optional uint32 center_freq = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->center_freq(), output);
  }

  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // optional uint64 active_time = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->active_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.spectrum_info)
}

::google::protobuf::uint8* spectrum_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.spectrum_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address ap_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_mac(), deterministic, target);
  }

  // optional uint32 radio_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radio_number(), target);
  }

  // optional uint32 dev_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dev_id(), target);
  }

  // optional uint32 dev_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dev_type(), target);
  }

  // optional uint32 low_ch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->low_ch(), target);
  }

  // optional uint32 high_ch = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->high_ch(), target);
  }

  // optional uint32 signal = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->signal(), target);
  }

  // optional uint32 duty_cycle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duty_cycle(), target);
  }

  // optional uint32 center_freq = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->center_freq(), target);
  }

  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // optional uint64 active_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->active_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.spectrum_info)
  return target;
}

size_t spectrum_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.spectrum_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .ce.nbapi.mac_address ap_mac = 1;
    if (has_ap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

    // optional uint32 radio_number = 2;
    if (has_radio_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radio_number());
    }

    // optional uint32 dev_id = 3;
    if (has_dev_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dev_id());
    }

    // optional uint32 dev_type = 4;
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dev_type());
    }

    // optional uint32 low_ch = 5;
    if (has_low_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_ch());
    }

    // optional uint32 high_ch = 6;
    if (has_high_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_ch());
    }

    // optional uint32 signal = 7;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signal());
    }

    // optional uint32 duty_cycle = 8;
    if (has_duty_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duty_cycle());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 center_freq = 9;
    if (has_center_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->center_freq());
    }

    // optional uint64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint64 active_time = 11;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void spectrum_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.spectrum_info)
  GOOGLE_DCHECK_NE(&from, this);
  const spectrum_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const spectrum_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.spectrum_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.spectrum_info)
    MergeFrom(*source);
  }
}

void spectrum_info::MergeFrom(const spectrum_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.spectrum_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      radio_number_ = from.radio_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      dev_id_ = from.dev_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      dev_type_ = from.dev_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_ch_ = from.low_ch_;
    }
    if (cached_has_bits & 0x00000020u) {
      high_ch_ = from.high_ch_;
    }
    if (cached_has_bits & 0x00000040u) {
      signal_ = from.signal_;
    }
    if (cached_has_bits & 0x00000080u) {
      duty_cycle_ = from.duty_cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      center_freq_ = from.center_freq_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_time_ = from.active_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void spectrum_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.spectrum_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void spectrum_info::CopyFrom(const spectrum_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.spectrum_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spectrum_info::IsInitialized() const {
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  return true;
}

void spectrum_info::Swap(spectrum_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void spectrum_info::InternalSwap(spectrum_info* other) {
  using std::swap;
  swap(ap_mac_, other->ap_mac_);
  swap(radio_number_, other->radio_number_);
  swap(dev_id_, other->dev_id_);
  swap(dev_type_, other->dev_type_);
  swap(low_ch_, other->low_ch_);
  swap(high_ch_, other->high_ch_);
  swap(signal_, other->signal_);
  swap(duty_cycle_, other->duty_cycle_);
  swap(center_freq_, other->center_freq_);
  swap(timestamp_, other->timestamp_);
  swap(active_time_, other->active_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata spectrum_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rogue_info::InitAsDefaultInstance() {
  ::ce::nbapi::_rogue_info_default_instance_._instance.get_mutable()->monitor_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_rogue_info_default_instance_._instance.get_mutable()->heard_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rogue_info::kMonitorMacFieldNumber;
const int rogue_info::kHeardMacFieldNumber;
const int rogue_info::kMonitorChannelFieldNumber;
const int rogue_info::kIsApFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rogue_info::rogue_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_rogue_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.rogue_info)
}
rogue_info::rogue_info(const rogue_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_monitor_mac()) {
    monitor_mac_ = new ::ce::nbapi::mac_address(*from.monitor_mac_);
  } else {
    monitor_mac_ = NULL;
  }
  if (from.has_heard_mac()) {
    heard_mac_ = new ::ce::nbapi::mac_address(*from.heard_mac_);
  } else {
    heard_mac_ = NULL;
  }
  ::memcpy(&monitor_channel_, &from.monitor_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ap_) -
    reinterpret_cast<char*>(&monitor_channel_)) + sizeof(is_ap_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.rogue_info)
}

void rogue_info::SharedCtor() {
  ::memset(&monitor_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ap_) -
      reinterpret_cast<char*>(&monitor_mac_)) + sizeof(is_ap_));
}

rogue_info::~rogue_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.rogue_info)
  SharedDtor();
}

void rogue_info::SharedDtor() {
  if (this != internal_default_instance()) delete monitor_mac_;
  if (this != internal_default_instance()) delete heard_mac_;
}

void rogue_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rogue_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rogue_info& rogue_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_rogue_info.base);
  return *internal_default_instance();
}


void rogue_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(monitor_mac_ != NULL);
      monitor_mac_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heard_mac_ != NULL);
      heard_mac_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&monitor_channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ap_) -
        reinterpret_cast<char*>(&monitor_channel_)) + sizeof(is_ap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool rogue_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.rogue_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address monitor_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address heard_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heard_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_monitor_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_ap = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.rogue_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.rogue_info)
  return false;
#undef DO_
}

void rogue_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address monitor_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_monitor_mac(), output);
  }

  // optional .ce.nbapi.mac_address heard_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_heard_mac(), output);
  }

  // optional uint32 monitor_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monitor_channel(), output);
  }

  // optional uint32 is_ap = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_ap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.rogue_info)
}

::google::protobuf::uint8* rogue_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address monitor_mac = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_monitor_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address heard_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_heard_mac(), deterministic, target);
  }

  // optional uint32 monitor_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monitor_channel(), target);
  }

  // optional uint32 is_ap = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_ap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.rogue_info)
  return target;
}

size_t rogue_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.rogue_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .ce.nbapi.mac_address monitor_mac = 1;
    if (has_monitor_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *monitor_mac_);
    }

    // optional .ce.nbapi.mac_address heard_mac = 2;
    if (has_heard_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *heard_mac_);
    }

    // optional uint32 monitor_channel = 3;
    if (has_monitor_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_channel());
    }

    // optional uint32 is_ap = 4;
    if (has_is_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ap());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rogue_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.rogue_info)
  GOOGLE_DCHECK_NE(&from, this);
  const rogue_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rogue_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.rogue_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.rogue_info)
    MergeFrom(*source);
  }
}

void rogue_info::MergeFrom(const rogue_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.rogue_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_monitor_mac()->::ce::nbapi::mac_address::MergeFrom(from.monitor_mac());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_heard_mac()->::ce::nbapi::mac_address::MergeFrom(from.heard_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      monitor_channel_ = from.monitor_channel_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_ap_ = from.is_ap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rogue_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.rogue_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rogue_info::CopyFrom(const rogue_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.rogue_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rogue_info::IsInitialized() const {
  if (has_monitor_mac()) {
    if (!this->monitor_mac_->IsInitialized()) return false;
  }
  if (has_heard_mac()) {
    if (!this->heard_mac_->IsInitialized()) return false;
  }
  return true;
}

void rogue_info::Swap(rogue_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rogue_info::InternalSwap(rogue_info* other) {
  using std::swap;
  swap(monitor_mac_, other->monitor_mac_);
  swap(heard_mac_, other->heard_mac_);
  swap(monitor_channel_, other->monitor_channel_);
  swap(is_ap_, other->is_ap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rogue_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void key_value_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int key_value_type::kKeyFieldNumber;
const int key_value_type::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

key_value_type::key_value_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_key_value_type.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.key_value_type)
}
key_value_type::key_value_type(const key_value_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.key_value_type)
}

void key_value_type::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

key_value_type::~key_value_type() {
  // @@protoc_insertion_point(destructor:ce.nbapi.key_value_type)
  SharedDtor();
}

void key_value_type::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void key_value_type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* key_value_type::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const key_value_type& key_value_type::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_key_value_type.base);
  return *internal_default_instance();
}


void key_value_type::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.key_value_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool key_value_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.key_value_type)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.key_value_type.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.key_value_type.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.key_value_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.key_value_type)
  return false;
#undef DO_
}

void key_value_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.key_value_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.key_value_type.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.key_value_type.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.key_value_type)
}

::google::protobuf::uint8* key_value_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.key_value_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.key_value_type.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.key_value_type.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.key_value_type)
  return target;
}

size_t key_value_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.key_value_type)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void key_value_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.key_value_type)
  GOOGLE_DCHECK_NE(&from, this);
  const key_value_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const key_value_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.key_value_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.key_value_type)
    MergeFrom(*source);
  }
}

void key_value_type::MergeFrom(const key_value_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.key_value_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void key_value_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.key_value_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_value_type::CopyFrom(const key_value_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.key_value_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_value_type::IsInitialized() const {
  return true;
}

void key_value_type::Swap(key_value_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void key_value_type::InternalSwap(key_value_type* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata key_value_type::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int info::kCurrentModeFieldNumber;
const int info::kLicenseValidFieldNumber;
const int info::kKeyValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

info::info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.info)
}
info::info(const info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      key_value_(from.key_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_mode_, &from.current_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&license_valid_) -
    reinterpret_cast<char*>(&current_mode_)) + sizeof(license_valid_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.info)
}

void info::SharedCtor() {
  ::memset(&current_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_valid_) -
      reinterpret_cast<char*>(&current_mode_)) + sizeof(license_valid_));
}

info::~info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.info)
  SharedDtor();
}

void info::SharedDtor() {
}

void info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const info& info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_info.base);
  return *internal_default_instance();
}


void info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&current_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&license_valid_) -
        reinterpret_cast<char*>(&current_mode_)) + sizeof(license_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.info.mode_type current_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::info_mode_type_IsValid(value)) {
            set_current_mode(static_cast< ::ce::nbapi::info_mode_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool license_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_license_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &license_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.key_value_type key_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_key_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.info)
  return false;
#undef DO_
}

void info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.info.mode_type current_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->current_mode(), output);
  }

  // optional bool license_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->license_valid(), output);
  }

  // repeated .ce.nbapi.key_value_type key_value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->key_value(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.info)
}

::google::protobuf::uint8* info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.info.mode_type current_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->current_mode(), target);
  }

  // optional bool license_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->license_valid(), target);
  }

  // repeated .ce.nbapi.key_value_type key_value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_value_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->key_value(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.info)
  return target;
}

size_t info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.key_value_type key_value = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->key_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_value(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ce.nbapi.info.mode_type current_mode = 1;
    if (has_current_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_mode());
    }

    // optional bool license_valid = 2;
    if (has_license_valid()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.info)
  GOOGLE_DCHECK_NE(&from, this);
  const info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.info)
    MergeFrom(*source);
  }
}

void info::MergeFrom(const info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_value_.MergeFrom(from.key_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      current_mode_ = from.current_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      license_valid_ = from.license_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void info::CopyFrom(const info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool info::IsInitialized() const {
  return true;
}

void info::Swap(info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void info::InternalSwap(info* other) {
  using std::swap;
  CastToBase(&key_value_)->InternalSwap(CastToBase(&other->key_value_));
  swap(current_mode_, other->current_mode_);
  swap(license_valid_, other->license_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void controller_info::InitAsDefaultInstance() {
  ::ce::nbapi::_controller_info_default_instance_._instance.get_mutable()->controller_ip_address_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int controller_info::kControllerIpAddressFieldNumber;
const int controller_info::kAccessPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

controller_info::controller_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_controller_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.controller_info)
}
controller_info::controller_info(const controller_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      access_points_(from.access_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controller_ip_address()) {
    controller_ip_address_ = new ::ce::nbapi::ip_address(*from.controller_ip_address_);
  } else {
    controller_ip_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.controller_info)
}

void controller_info::SharedCtor() {
  controller_ip_address_ = NULL;
}

controller_info::~controller_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.controller_info)
  SharedDtor();
}

void controller_info::SharedDtor() {
  if (this != internal_default_instance()) delete controller_ip_address_;
}

void controller_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* controller_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const controller_info& controller_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_controller_info.base);
  return *internal_default_instance();
}


void controller_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.controller_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(controller_ip_address_ != NULL);
    controller_ip_address_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool controller_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.controller_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.ip_address controller_ip_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_ip_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.access_point access_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_access_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.controller_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.controller_info)
  return false;
#undef DO_
}

void controller_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.controller_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ip_address controller_ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_ip_address(), output);
  }

  // repeated .ce.nbapi.access_point access_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->access_points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.controller_info)
}

::google::protobuf::uint8* controller_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.controller_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ip_address controller_ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_ip_address(), deterministic, target);
  }

  // repeated .ce.nbapi.access_point access_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->access_points(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.controller_info)
  return target;
}

size_t controller_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.controller_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.ip_address controller_ip_address = 1;
  if (has_controller_ip_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *controller_ip_address_);
  }
  // repeated .ce.nbapi.access_point access_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->access_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->access_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void controller_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.controller_info)
  GOOGLE_DCHECK_NE(&from, this);
  const controller_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const controller_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.controller_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.controller_info)
    MergeFrom(*source);
  }
}

void controller_info::MergeFrom(const controller_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.controller_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  access_points_.MergeFrom(from.access_points_);
  if (from.has_controller_ip_address()) {
    mutable_controller_ip_address()->::ce::nbapi::ip_address::MergeFrom(from.controller_ip_address());
  }
}

void controller_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.controller_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void controller_info::CopyFrom(const controller_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.controller_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool controller_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->access_points())) return false;
  if (has_controller_ip_address()) {
    if (!this->controller_ip_address_->IsInitialized()) return false;
  }
  return true;
}

void controller_info::Swap(controller_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void controller_info::InternalSwap(controller_info* other) {
  using std::swap;
  CastToBase(&access_points_)->InternalSwap(CastToBase(&other->access_points_));
  swap(controller_ip_address_, other->controller_ip_address_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata controller_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cluster_info::InitAsDefaultInstance() {
  ::ce::nbapi::_cluster_info_default_instance_._instance.get_mutable()->cluster_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_info::kClusterKeyFieldNumber;
const int cluster_info::kClusterNameFieldNumber;
const int cluster_info::kOrganizationFieldNumber;
const int cluster_info::kClusterIpFieldNumber;
const int cluster_info::kAccessPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_info::cluster_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_cluster_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.cluster_info)
}
cluster_info::cluster_info(const cluster_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      access_points_(from.access_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cluster_key()) {
    cluster_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_key_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cluster_name()) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_organization()) {
    organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
  }
  if (from.has_cluster_ip()) {
    cluster_ip_ = new ::ce::nbapi::ip_address(*from.cluster_ip_);
  } else {
    cluster_ip_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.cluster_info)
}

void cluster_info::SharedCtor() {
  cluster_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ip_ = NULL;
}

cluster_info::~cluster_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.cluster_info)
  SharedDtor();
}

void cluster_info::SharedDtor() {
  cluster_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cluster_ip_;
}

void cluster_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* cluster_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_info& cluster_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_cluster_info.base);
  return *internal_default_instance();
}


void cluster_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.cluster_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      cluster_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cluster_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      organization_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cluster_ip_ != NULL);
      cluster_ip_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cluster_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.cluster_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_key().data(), static_cast<int>(this->cluster_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.cluster_info.cluster_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.cluster_info.cluster_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string organization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->organization().data(), static_cast<int>(this->organization().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.cluster_info.organization");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address cluster_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ce.nbapi.access_point access_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_access_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.cluster_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.cluster_info)
  return false;
#undef DO_
}

void cluster_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.cluster_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cluster_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_key().data(), static_cast<int>(this->cluster_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.cluster_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_key(), output);
  }

  // optional string cluster_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // optional string organization = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), static_cast<int>(this->organization().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.organization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->organization(), output);
  }

  // optional .ce.nbapi.ip_address cluster_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cluster_ip(), output);
  }

  // repeated .ce.nbapi.access_point access_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->access_points(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.cluster_info)
}

::google::protobuf::uint8* cluster_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.cluster_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cluster_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_key().data(), static_cast<int>(this->cluster_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.cluster_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_key(), target);
  }

  // optional string cluster_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_name().data(), static_cast<int>(this->cluster_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // optional string organization = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->organization().data(), static_cast<int>(this->organization().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.cluster_info.organization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->organization(), target);
  }

  // optional .ce.nbapi.ip_address cluster_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cluster_ip(), deterministic, target);
  }

  // repeated .ce.nbapi.access_point access_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->access_points(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.cluster_info)
  return target;
}

size_t cluster_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.cluster_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ce.nbapi.access_point access_points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->access_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->access_points(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string cluster_key = 1;
    if (has_cluster_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_key());
    }

    // optional string cluster_name = 2;
    if (has_cluster_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_name());
    }

    // optional string organization = 3;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->organization());
    }

    // optional .ce.nbapi.ip_address cluster_ip = 4;
    if (has_cluster_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cluster_ip_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cluster_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.cluster_info)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.cluster_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.cluster_info)
    MergeFrom(*source);
  }
}

void cluster_info::MergeFrom(const cluster_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.cluster_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  access_points_.MergeFrom(from.access_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cluster_key();
      cluster_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cluster_name();
      cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_organization();
      organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cluster_ip()->::ce::nbapi::ip_address::MergeFrom(from.cluster_ip());
    }
  }
}

void cluster_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.cluster_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_info::CopyFrom(const cluster_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.cluster_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_info::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->access_points())) return false;
  if (has_cluster_ip()) {
    if (!this->cluster_ip_->IsInitialized()) return false;
  }
  return true;
}

void cluster_info::Swap(cluster_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_info::InternalSwap(cluster_info* other) {
  using std::swap;
  CastToBase(&access_points_)->InternalSwap(CastToBase(&other->access_points_));
  cluster_key_.Swap(&other->cluster_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cluster_name_.Swap(&other->cluster_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  organization_.Swap(&other->organization_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cluster_ip_, other->cluster_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata cluster_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void topology::InitAsDefaultInstance() {
  ::ce::nbapi::_topology_default_instance_._instance.get_mutable()->controller_ = const_cast< ::ce::nbapi::controller_info*>(
      ::ce::nbapi::controller_info::internal_default_instance());
  ::ce::nbapi::_topology_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::ce::nbapi::cluster_info*>(
      ::ce::nbapi::cluster_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int topology::kControllerFieldNumber;
const int topology::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

topology::topology()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_topology.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.topology)
}
topology::topology(const topology& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controller()) {
    controller_ = new ::ce::nbapi::controller_info(*from.controller_);
  } else {
    controller_ = NULL;
  }
  if (from.has_cluster()) {
    cluster_ = new ::ce::nbapi::cluster_info(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.topology)
}

void topology::SharedCtor() {
  ::memset(&controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&controller_)) + sizeof(cluster_));
}

topology::~topology() {
  // @@protoc_insertion_point(destructor:ce.nbapi.topology)
  SharedDtor();
}

void topology::SharedDtor() {
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete cluster_;
}

void topology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* topology::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const topology& topology::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_topology.base);
  return *internal_default_instance();
}


void topology::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(controller_ != NULL);
      controller_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cluster_ != NULL);
      cluster_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.topology)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.controller_info controller = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.cluster_info cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.topology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.topology)
  return false;
#undef DO_
}

void topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.controller_info controller = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_controller(), output);
  }

  // optional .ce.nbapi.cluster_info cluster = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.topology)
}

::google::protobuf::uint8* topology::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.controller_info controller = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_controller(), deterministic, target);
  }

  // optional .ce.nbapi.cluster_info cluster = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_cluster(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.topology)
  return target;
}

size_t topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.topology)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ce.nbapi.controller_info controller = 2;
    if (has_controller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_);
    }

    // optional .ce.nbapi.cluster_info cluster = 3;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cluster_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void topology::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.topology)
  GOOGLE_DCHECK_NE(&from, this);
  const topology* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const topology>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.topology)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.topology)
    MergeFrom(*source);
  }
}

void topology::MergeFrom(const topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_controller()->::ce::nbapi::controller_info::MergeFrom(from.controller());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cluster()->::ce::nbapi::cluster_info::MergeFrom(from.cluster());
    }
  }
}

void topology::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topology::CopyFrom(const topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool topology::IsInitialized() const {
  if (has_controller()) {
    if (!this->controller_->IsInitialized()) return false;
  }
  if (has_cluster()) {
    if (!this->cluster_->IsInitialized()) return false;
  }
  return true;
}

void topology::Swap(topology* other) {
  if (other == this) return;
  InternalSwap(other);
}
void topology::InternalSwap(topology* other) {
  using std::swap;
  swap(controller_, other->controller_);
  swap(cluster_, other->cluster_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata topology::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ap_location::InitAsDefaultInstance() {
  ::ce::nbapi::_ap_location_default_instance_._instance.get_mutable()->ap_eth_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ap_location::kApEthMacFieldNumber;
const int ap_location::kCampusIdFieldNumber;
const int ap_location::kBuildingIdFieldNumber;
const int ap_location::kFloorIdFieldNumber;
const int ap_location::kLongitudeFieldNumber;
const int ap_location::kLatitudeFieldNumber;
const int ap_location::kApXFieldNumber;
const int ap_location::kApYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ap_location::ap_location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_ap_location.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.ap_location)
}
ap_location::ap_location(const ap_location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_campus_id()) {
    campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
  }
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_building_id()) {
    building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
  }
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floor_id()) {
    floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
  }
  if (from.has_ap_eth_mac()) {
    ap_eth_mac_ = new ::ce::nbapi::mac_address(*from.ap_eth_mac_);
  } else {
    ap_eth_mac_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_y_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(ap_y_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.ap_location)
}

void ap_location::SharedCtor() {
  campus_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ap_eth_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_y_) -
      reinterpret_cast<char*>(&ap_eth_mac_)) + sizeof(ap_y_));
}

ap_location::~ap_location() {
  // @@protoc_insertion_point(destructor:ce.nbapi.ap_location)
  SharedDtor();
}

void ap_location::SharedDtor() {
  campus_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ap_eth_mac_;
}

void ap_location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ap_location::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ap_location& ap_location::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_ap_location.base);
  return *internal_default_instance();
}


void ap_location::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.ap_location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      campus_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      building_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      floor_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ap_eth_mac_ != NULL);
      ap_eth_mac_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_y_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(ap_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ap_location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.ap_location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.mac_address ap_eth_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_eth_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes campus_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_campus_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes building_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_building_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes floor_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_floor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ap_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_ap_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ap_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_ap_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ap_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.ap_location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.ap_location)
  return false;
#undef DO_
}

void ap_location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.ap_location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ap_eth_mac(), output);
  }

  // optional bytes campus_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->campus_id(), output);
  }

  // optional bytes building_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->building_id(), output);
  }

  // optional bytes floor_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->floor_id(), output);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->latitude(), output);
  }

  // optional double ap_x = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ap_x(), output);
  }

  // optional double ap_y = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ap_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.ap_location)
}

::google::protobuf::uint8* ap_location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.ap_location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ap_eth_mac(), deterministic, target);
  }

  // optional bytes campus_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->campus_id(), target);
  }

  // optional bytes building_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->building_id(), target);
  }

  // optional bytes floor_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->floor_id(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional double latitude = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->latitude(), target);
  }

  // optional double ap_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ap_x(), target);
  }

  // optional double ap_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ap_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.ap_location)
  return target;
}

size_t ap_location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.ap_location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.mac_address ap_eth_mac = 1;
  if (has_ap_eth_mac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ap_eth_mac_);
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes campus_id = 2;
    if (has_campus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->campus_id());
    }

    // optional bytes building_id = 3;
    if (has_building_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->building_id());
    }

    // optional bytes floor_id = 4;
    if (has_floor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->floor_id());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional double longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 6;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double ap_x = 7;
    if (has_ap_x()) {
      total_size += 1 + 8;
    }

    // optional double ap_y = 8;
    if (has_ap_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ap_location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.ap_location)
  GOOGLE_DCHECK_NE(&from, this);
  const ap_location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ap_location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.ap_location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.ap_location)
    MergeFrom(*source);
  }
}

void ap_location::MergeFrom(const ap_location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.ap_location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_campus_id();
      campus_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.campus_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_building_id();
      building_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.building_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_floor_id();
      floor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floor_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ap_eth_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_eth_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_x_ = from.ap_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_y_ = from.ap_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ap_location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.ap_location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ap_location::CopyFrom(const ap_location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.ap_location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ap_location::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_ap_eth_mac()) {
    if (!this->ap_eth_mac_->IsInitialized()) return false;
  }
  return true;
}

void ap_location::Swap(ap_location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ap_location::InternalSwap(ap_location* other) {
  using std::swap;
  campus_id_.Swap(&other->campus_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  building_id_.Swap(&other->building_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  floor_id_.Swap(&other->floor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ap_eth_mac_, other->ap_eth_mac_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(ap_x_, other->ap_x_);
  swap(ap_y_, other->ap_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ap_location::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void nb_event::InitAsDefaultInstance() {
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->location_ = const_cast< ::ce::nbapi::location*>(
      ::ce::nbapi::location::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->presence_ = const_cast< ::ce::nbapi::presence*>(
      ::ce::nbapi::presence::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->rssi_ = const_cast< ::ce::nbapi::rssi*>(
      ::ce::nbapi::rssi::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->station_ = const_cast< ::ce::nbapi::station*>(
      ::ce::nbapi::station::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->radio_ = const_cast< ::ce::nbapi::radio*>(
      ::ce::nbapi::radio::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->destination_ = const_cast< ::ce::nbapi::destination*>(
      ::ce::nbapi::destination::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->application_ = const_cast< ::ce::nbapi::application*>(
      ::ce::nbapi::application::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->visibility_rec_ = const_cast< ::ce::nbapi::visibility_rec*>(
      ::ce::nbapi::visibility_rec::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->campus_ = const_cast< ::ce::nbapi::campus*>(
      ::ce::nbapi::campus::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->building_ = const_cast< ::ce::nbapi::building*>(
      ::ce::nbapi::building::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->floor_ = const_cast< ::ce::nbapi::floor*>(
      ::ce::nbapi::floor::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->access_point_ = const_cast< ::ce::nbapi::access_point*>(
      ::ce::nbapi::access_point::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->virtual_access_point_ = const_cast< ::ce::nbapi::virtual_access_point*>(
      ::ce::nbapi::virtual_access_point::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->geofence_ = const_cast< ::ce::nbapi::geofence*>(
      ::ce::nbapi::geofence::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->geofence_notify_ = const_cast< ::ce::nbapi::geofence_notify*>(
      ::ce::nbapi::geofence_notify::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_radio_ = const_cast< ::ce::nbapi::stats_radio*>(
      ::ce::nbapi::stats_radio::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_vap_ = const_cast< ::ce::nbapi::stats_vap*>(
      ::ce::nbapi::stats_vap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_station_ = const_cast< ::ce::nbapi::stats_station*>(
      ::ce::nbapi::stats_station::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->ap_neighbor_list_ = const_cast< ::ce::nbapi::ap_neighbor_list*>(
      ::ce::nbapi::ap_neighbor_list::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->utilization_stats_radio_ = const_cast< ::ce::nbapi::utilization_stats_radio*>(
      ::ce::nbapi::utilization_stats_radio::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->sta_rssi_ = const_cast< ::ce::nbapi::sta_rssi*>(
      ::ce::nbapi::sta_rssi::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->ap_rssi_ = const_cast< ::ce::nbapi::ap_rssi*>(
      ::ce::nbapi::ap_rssi::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->proximity_ = const_cast< ::ce::nbapi::proximity*>(
      ::ce::nbapi::proximity::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->webcc_category_ = const_cast< ::ce::nbapi::webcc_category*>(
      ::ce::nbapi::webcc_category::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->webcc_info_ = const_cast< ::ce::nbapi::webcc_info*>(
      ::ce::nbapi::webcc_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->security_message_ = const_cast< ::ce::nbapi::security_message*>(
      ::ce::nbapi::security_message::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->spectrum_info_ = const_cast< ::ce::nbapi::spectrum_info*>(
      ::ce::nbapi::spectrum_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->state_station_ = const_cast< ::ce::nbapi::state_station*>(
      ::ce::nbapi::state_station::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->controller_ = const_cast< ::ce::nbapi::controller_info*>(
      ::ce::nbapi::controller_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::ce::nbapi::cluster_info*>(
      ::ce::nbapi::cluster_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->uplink_bandwidth_ = const_cast< ::ce::nbapi::uplink_bandwidth*>(
      ::ce::nbapi::uplink_bandwidth::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->iapclienturl_ = const_cast< ::ce::nbapi::iap_client_url*>(
      ::ce::nbapi::iap_client_url::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->rogue_info_ = const_cast< ::ce::nbapi::rogue_info*>(
      ::ce::nbapi::rogue_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->air_mon_info_ = const_cast< ::ce::nbapi::air_monitor_info*>(
      ::ce::nbapi::air_monitor_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->ap_location_ = const_cast< ::ce::nbapi::ap_location*>(
      ::ce::nbapi::ap_location::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->state_access_point_ = const_cast< ::ce::nbapi::state_access_point*>(
      ::ce::nbapi::state_access_point::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_modem_ = const_cast< ::ce::nbapi::stats_modem*>(
      ::ce::nbapi::stats_modem::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->uplink_info_ = const_cast< ::ce::nbapi::uplink_info*>(
      ::ce::nbapi::uplink_info::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_uplink_ = const_cast< ::ce::nbapi::stats_uplink*>(
      ::ce::nbapi::stats_uplink::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->wan_comp_uplink_ = const_cast< ::ce::nbapi::wan_comp_uplink*>(
      ::ce::nbapi::wan_comp_uplink::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_ip_probe_uplink_ = const_cast< ::ce::nbapi::stats_ip_probe_uplink*>(
      ::ce::nbapi::stats_ip_probe_uplink::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->summary_webcat_ = const_cast< ::ce::nbapi::summary_webcat_iap*>(
      ::ce::nbapi::summary_webcat_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->summary_appid_ = const_cast< ::ce::nbapi::summary_appid_iap*>(
      ::ce::nbapi::summary_appid_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->summary_webrep_ = const_cast< ::ce::nbapi::summary_webrep_iap*>(
      ::ce::nbapi::summary_webrep_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_role_ = const_cast< ::ce::nbapi::stats_role_iap*>(
      ::ce::nbapi::stats_role_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_vlan_ = const_cast< ::ce::nbapi::stats_vlan_iap*>(
      ::ce::nbapi::stats_vlan_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->stats_ssid_ = const_cast< ::ce::nbapi::stats_ssid_iap*>(
      ::ce::nbapi::stats_ssid_iap::internal_default_instance());
  ::ce::nbapi::_nb_event_default_instance_._instance.get_mutable()->tag_rssi_ = const_cast< ::ce::nbapi::tag_rssi*>(
      ::ce::nbapi::tag_rssi::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nb_event::kSeqFieldNumber;
const int nb_event::kTimestampFieldNumber;
const int nb_event::kOpFieldNumber;
const int nb_event::kTopicSeqFieldNumber;
const int nb_event::kSourceIdFieldNumber;
const int nb_event::kLicInfoFieldNumber;
const int nb_event::kLocationFieldNumber;
const int nb_event::kPresenceFieldNumber;
const int nb_event::kRssiFieldNumber;
const int nb_event::kStationFieldNumber;
const int nb_event::kRadioFieldNumber;
const int nb_event::kDestinationFieldNumber;
const int nb_event::kApplicationFieldNumber;
const int nb_event::kVisibilityRecFieldNumber;
const int nb_event::kCampusFieldNumber;
const int nb_event::kBuildingFieldNumber;
const int nb_event::kFloorFieldNumber;
const int nb_event::kAccessPointFieldNumber;
const int nb_event::kVirtualAccessPointFieldNumber;
const int nb_event::kGeofenceFieldNumber;
const int nb_event::kGeofenceNotifyFieldNumber;
const int nb_event::kStatsRadioFieldNumber;
const int nb_event::kStatsVapFieldNumber;
const int nb_event::kStatsStationFieldNumber;
const int nb_event::kApNeighborListFieldNumber;
const int nb_event::kUtilizationStatsRadioFieldNumber;
const int nb_event::kStaRssiFieldNumber;
const int nb_event::kApRssiFieldNumber;
const int nb_event::kProximityFieldNumber;
const int nb_event::kWebccCategoryFieldNumber;
const int nb_event::kWebccInfoFieldNumber;
const int nb_event::kSecurityMessageFieldNumber;
const int nb_event::kSpectrumInfoFieldNumber;
const int nb_event::kStateStationFieldNumber;
const int nb_event::kControllerFieldNumber;
const int nb_event::kClusterFieldNumber;
const int nb_event::kUplinkBandwidthFieldNumber;
const int nb_event::kIapClientURLFieldNumber;
const int nb_event::kRogueInfoFieldNumber;
const int nb_event::kAirMonInfoFieldNumber;
const int nb_event::kApLocationFieldNumber;
const int nb_event::kStateAccessPointFieldNumber;
const int nb_event::kStatsModemFieldNumber;
const int nb_event::kUplinkInfoFieldNumber;
const int nb_event::kStatsUplinkFieldNumber;
const int nb_event::kWanCompUplinkFieldNumber;
const int nb_event::kStatsIpProbeUplinkFieldNumber;
const int nb_event::kSummaryWebcatFieldNumber;
const int nb_event::kSummaryAppidFieldNumber;
const int nb_event::kSummaryWebrepFieldNumber;
const int nb_event::kStatsRoleFieldNumber;
const int nb_event::kStatsVlanFieldNumber;
const int nb_event::kStatsSsidFieldNumber;
const int nb_event::kTagRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nb_event::nb_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_nb_event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.nb_event)
}
nb_event::nb_event(const nb_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_id()) {
    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.has_location()) {
    location_ = new ::ce::nbapi::location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_presence()) {
    presence_ = new ::ce::nbapi::presence(*from.presence_);
  } else {
    presence_ = NULL;
  }
  if (from.has_rssi()) {
    rssi_ = new ::ce::nbapi::rssi(*from.rssi_);
  } else {
    rssi_ = NULL;
  }
  if (from.has_station()) {
    station_ = new ::ce::nbapi::station(*from.station_);
  } else {
    station_ = NULL;
  }
  if (from.has_radio()) {
    radio_ = new ::ce::nbapi::radio(*from.radio_);
  } else {
    radio_ = NULL;
  }
  if (from.has_destination()) {
    destination_ = new ::ce::nbapi::destination(*from.destination_);
  } else {
    destination_ = NULL;
  }
  if (from.has_application()) {
    application_ = new ::ce::nbapi::application(*from.application_);
  } else {
    application_ = NULL;
  }
  if (from.has_visibility_rec()) {
    visibility_rec_ = new ::ce::nbapi::visibility_rec(*from.visibility_rec_);
  } else {
    visibility_rec_ = NULL;
  }
  if (from.has_campus()) {
    campus_ = new ::ce::nbapi::campus(*from.campus_);
  } else {
    campus_ = NULL;
  }
  if (from.has_building()) {
    building_ = new ::ce::nbapi::building(*from.building_);
  } else {
    building_ = NULL;
  }
  if (from.has_floor()) {
    floor_ = new ::ce::nbapi::floor(*from.floor_);
  } else {
    floor_ = NULL;
  }
  if (from.has_access_point()) {
    access_point_ = new ::ce::nbapi::access_point(*from.access_point_);
  } else {
    access_point_ = NULL;
  }
  if (from.has_virtual_access_point()) {
    virtual_access_point_ = new ::ce::nbapi::virtual_access_point(*from.virtual_access_point_);
  } else {
    virtual_access_point_ = NULL;
  }
  if (from.has_geofence()) {
    geofence_ = new ::ce::nbapi::geofence(*from.geofence_);
  } else {
    geofence_ = NULL;
  }
  if (from.has_geofence_notify()) {
    geofence_notify_ = new ::ce::nbapi::geofence_notify(*from.geofence_notify_);
  } else {
    geofence_notify_ = NULL;
  }
  if (from.has_stats_radio()) {
    stats_radio_ = new ::ce::nbapi::stats_radio(*from.stats_radio_);
  } else {
    stats_radio_ = NULL;
  }
  if (from.has_stats_vap()) {
    stats_vap_ = new ::ce::nbapi::stats_vap(*from.stats_vap_);
  } else {
    stats_vap_ = NULL;
  }
  if (from.has_stats_station()) {
    stats_station_ = new ::ce::nbapi::stats_station(*from.stats_station_);
  } else {
    stats_station_ = NULL;
  }
  if (from.has_ap_neighbor_list()) {
    ap_neighbor_list_ = new ::ce::nbapi::ap_neighbor_list(*from.ap_neighbor_list_);
  } else {
    ap_neighbor_list_ = NULL;
  }
  if (from.has_utilization_stats_radio()) {
    utilization_stats_radio_ = new ::ce::nbapi::utilization_stats_radio(*from.utilization_stats_radio_);
  } else {
    utilization_stats_radio_ = NULL;
  }
  if (from.has_sta_rssi()) {
    sta_rssi_ = new ::ce::nbapi::sta_rssi(*from.sta_rssi_);
  } else {
    sta_rssi_ = NULL;
  }
  if (from.has_ap_rssi()) {
    ap_rssi_ = new ::ce::nbapi::ap_rssi(*from.ap_rssi_);
  } else {
    ap_rssi_ = NULL;
  }
  if (from.has_proximity()) {
    proximity_ = new ::ce::nbapi::proximity(*from.proximity_);
  } else {
    proximity_ = NULL;
  }
  if (from.has_webcc_category()) {
    webcc_category_ = new ::ce::nbapi::webcc_category(*from.webcc_category_);
  } else {
    webcc_category_ = NULL;
  }
  if (from.has_webcc_info()) {
    webcc_info_ = new ::ce::nbapi::webcc_info(*from.webcc_info_);
  } else {
    webcc_info_ = NULL;
  }
  if (from.has_security_message()) {
    security_message_ = new ::ce::nbapi::security_message(*from.security_message_);
  } else {
    security_message_ = NULL;
  }
  if (from.has_spectrum_info()) {
    spectrum_info_ = new ::ce::nbapi::spectrum_info(*from.spectrum_info_);
  } else {
    spectrum_info_ = NULL;
  }
  if (from.has_state_station()) {
    state_station_ = new ::ce::nbapi::state_station(*from.state_station_);
  } else {
    state_station_ = NULL;
  }
  if (from.has_controller()) {
    controller_ = new ::ce::nbapi::controller_info(*from.controller_);
  } else {
    controller_ = NULL;
  }
  if (from.has_cluster()) {
    cluster_ = new ::ce::nbapi::cluster_info(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  if (from.has_uplink_bandwidth()) {
    uplink_bandwidth_ = new ::ce::nbapi::uplink_bandwidth(*from.uplink_bandwidth_);
  } else {
    uplink_bandwidth_ = NULL;
  }
  if (from.has_iapclienturl()) {
    iapclienturl_ = new ::ce::nbapi::iap_client_url(*from.iapclienturl_);
  } else {
    iapclienturl_ = NULL;
  }
  if (from.has_rogue_info()) {
    rogue_info_ = new ::ce::nbapi::rogue_info(*from.rogue_info_);
  } else {
    rogue_info_ = NULL;
  }
  if (from.has_air_mon_info()) {
    air_mon_info_ = new ::ce::nbapi::air_monitor_info(*from.air_mon_info_);
  } else {
    air_mon_info_ = NULL;
  }
  if (from.has_ap_location()) {
    ap_location_ = new ::ce::nbapi::ap_location(*from.ap_location_);
  } else {
    ap_location_ = NULL;
  }
  if (from.has_state_access_point()) {
    state_access_point_ = new ::ce::nbapi::state_access_point(*from.state_access_point_);
  } else {
    state_access_point_ = NULL;
  }
  if (from.has_stats_modem()) {
    stats_modem_ = new ::ce::nbapi::stats_modem(*from.stats_modem_);
  } else {
    stats_modem_ = NULL;
  }
  if (from.has_uplink_info()) {
    uplink_info_ = new ::ce::nbapi::uplink_info(*from.uplink_info_);
  } else {
    uplink_info_ = NULL;
  }
  if (from.has_stats_uplink()) {
    stats_uplink_ = new ::ce::nbapi::stats_uplink(*from.stats_uplink_);
  } else {
    stats_uplink_ = NULL;
  }
  if (from.has_wan_comp_uplink()) {
    wan_comp_uplink_ = new ::ce::nbapi::wan_comp_uplink(*from.wan_comp_uplink_);
  } else {
    wan_comp_uplink_ = NULL;
  }
  if (from.has_stats_ip_probe_uplink()) {
    stats_ip_probe_uplink_ = new ::ce::nbapi::stats_ip_probe_uplink(*from.stats_ip_probe_uplink_);
  } else {
    stats_ip_probe_uplink_ = NULL;
  }
  if (from.has_summary_webcat()) {
    summary_webcat_ = new ::ce::nbapi::summary_webcat_iap(*from.summary_webcat_);
  } else {
    summary_webcat_ = NULL;
  }
  if (from.has_summary_appid()) {
    summary_appid_ = new ::ce::nbapi::summary_appid_iap(*from.summary_appid_);
  } else {
    summary_appid_ = NULL;
  }
  if (from.has_summary_webrep()) {
    summary_webrep_ = new ::ce::nbapi::summary_webrep_iap(*from.summary_webrep_);
  } else {
    summary_webrep_ = NULL;
  }
  if (from.has_stats_role()) {
    stats_role_ = new ::ce::nbapi::stats_role_iap(*from.stats_role_);
  } else {
    stats_role_ = NULL;
  }
  if (from.has_stats_vlan()) {
    stats_vlan_ = new ::ce::nbapi::stats_vlan_iap(*from.stats_vlan_);
  } else {
    stats_vlan_ = NULL;
  }
  if (from.has_stats_ssid()) {
    stats_ssid_ = new ::ce::nbapi::stats_ssid_iap(*from.stats_ssid_);
  } else {
    stats_ssid_ = NULL;
  }
  if (from.has_tag_rssi()) {
    tag_rssi_ = new ::ce::nbapi::tag_rssi(*from.tag_rssi_);
  } else {
    tag_rssi_ = NULL;
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&lic_info_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(lic_info_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.nb_event)
}

void nb_event::SharedCtor() {
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topic_seq_) -
      reinterpret_cast<char*>(&location_)) + sizeof(topic_seq_));
  lic_info_ = 10;
}

nb_event::~nb_event() {
  // @@protoc_insertion_point(destructor:ce.nbapi.nb_event)
  SharedDtor();
}

void nb_event::SharedDtor() {
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete presence_;
  if (this != internal_default_instance()) delete rssi_;
  if (this != internal_default_instance()) delete station_;
  if (this != internal_default_instance()) delete radio_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete application_;
  if (this != internal_default_instance()) delete visibility_rec_;
  if (this != internal_default_instance()) delete campus_;
  if (this != internal_default_instance()) delete building_;
  if (this != internal_default_instance()) delete floor_;
  if (this != internal_default_instance()) delete access_point_;
  if (this != internal_default_instance()) delete virtual_access_point_;
  if (this != internal_default_instance()) delete geofence_;
  if (this != internal_default_instance()) delete geofence_notify_;
  if (this != internal_default_instance()) delete stats_radio_;
  if (this != internal_default_instance()) delete stats_vap_;
  if (this != internal_default_instance()) delete stats_station_;
  if (this != internal_default_instance()) delete ap_neighbor_list_;
  if (this != internal_default_instance()) delete utilization_stats_radio_;
  if (this != internal_default_instance()) delete sta_rssi_;
  if (this != internal_default_instance()) delete ap_rssi_;
  if (this != internal_default_instance()) delete proximity_;
  if (this != internal_default_instance()) delete webcc_category_;
  if (this != internal_default_instance()) delete webcc_info_;
  if (this != internal_default_instance()) delete security_message_;
  if (this != internal_default_instance()) delete spectrum_info_;
  if (this != internal_default_instance()) delete state_station_;
  if (this != internal_default_instance()) delete controller_;
  if (this != internal_default_instance()) delete cluster_;
  if (this != internal_default_instance()) delete uplink_bandwidth_;
  if (this != internal_default_instance()) delete iapclienturl_;
  if (this != internal_default_instance()) delete rogue_info_;
  if (this != internal_default_instance()) delete air_mon_info_;
  if (this != internal_default_instance()) delete ap_location_;
  if (this != internal_default_instance()) delete state_access_point_;
  if (this != internal_default_instance()) delete stats_modem_;
  if (this != internal_default_instance()) delete uplink_info_;
  if (this != internal_default_instance()) delete stats_uplink_;
  if (this != internal_default_instance()) delete wan_comp_uplink_;
  if (this != internal_default_instance()) delete stats_ip_probe_uplink_;
  if (this != internal_default_instance()) delete summary_webcat_;
  if (this != internal_default_instance()) delete summary_appid_;
  if (this != internal_default_instance()) delete summary_webrep_;
  if (this != internal_default_instance()) delete stats_role_;
  if (this != internal_default_instance()) delete stats_vlan_;
  if (this != internal_default_instance()) delete stats_ssid_;
  if (this != internal_default_instance()) delete tag_rssi_;
}

void nb_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* nb_event::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const nb_event& nb_event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_nb_event.base);
  return *internal_default_instance();
}


void nb_event::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.nb_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(presence_ != NULL);
      presence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rssi_ != NULL);
      rssi_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(station_ != NULL);
      station_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(radio_ != NULL);
      radio_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(destination_ != NULL);
      destination_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(application_ != NULL);
      application_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(visibility_rec_ != NULL);
      visibility_rec_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(campus_ != NULL);
      campus_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(building_ != NULL);
      building_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(floor_ != NULL);
      floor_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(access_point_ != NULL);
      access_point_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(virtual_access_point_ != NULL);
      virtual_access_point_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(geofence_ != NULL);
      geofence_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(geofence_notify_ != NULL);
      geofence_notify_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(stats_radio_ != NULL);
      stats_radio_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(stats_vap_ != NULL);
      stats_vap_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(stats_station_ != NULL);
      stats_station_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(ap_neighbor_list_ != NULL);
      ap_neighbor_list_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(utilization_stats_radio_ != NULL);
      utilization_stats_radio_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(sta_rssi_ != NULL);
      sta_rssi_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(ap_rssi_ != NULL);
      ap_rssi_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(proximity_ != NULL);
      proximity_->Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(webcc_category_ != NULL);
      webcc_category_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(webcc_info_ != NULL);
      webcc_info_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(security_message_ != NULL);
      security_message_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(spectrum_info_ != NULL);
      spectrum_info_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(state_station_ != NULL);
      state_station_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(controller_ != NULL);
      controller_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(cluster_ != NULL);
      cluster_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(uplink_bandwidth_ != NULL);
      uplink_bandwidth_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iapclienturl_ != NULL);
      iapclienturl_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rogue_info_ != NULL);
      rogue_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(air_mon_info_ != NULL);
      air_mon_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ap_location_ != NULL);
      ap_location_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(state_access_point_ != NULL);
      state_access_point_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(stats_modem_ != NULL);
      stats_modem_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(uplink_info_ != NULL);
      uplink_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(stats_uplink_ != NULL);
      stats_uplink_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(wan_comp_uplink_ != NULL);
      wan_comp_uplink_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(stats_ip_probe_uplink_ != NULL);
      stats_ip_probe_uplink_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(summary_webcat_ != NULL);
      summary_webcat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(summary_appid_ != NULL);
      summary_appid_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(summary_webrep_ != NULL);
      summary_webrep_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(stats_role_ != NULL);
      stats_role_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(stats_vlan_ != NULL);
      stats_vlan_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(stats_ssid_ != NULL);
      stats_ssid_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(tag_rssi_ != NULL);
    tag_rssi_->Clear();
  }
  if (cached_has_bits & 4063232u) {
    ::memset(&seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&topic_seq_) -
        reinterpret_cast<char*>(&seq_)) + sizeof(topic_seq_));
    lic_info_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nb_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.nb_event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 seq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.nb_event.event_operation op = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::nb_event_event_operation_IsValid(value)) {
            set_op(static_cast< ::ce::nbapi::nb_event_event_operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 topic_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_topic_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &topic_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes source_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.nb_event.license_info lic_info = 6 [default = hb_Dhak];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::nb_event_license_info_IsValid(value)) {
            set_lic_info(static_cast< ::ce::nbapi::nb_event_license_info >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.location location = 500;
      case 500: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.presence presence = 501;
      case 501: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 4010 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_presence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.rssi rssi = 502;
      case 502: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 4018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.station station = 503;
      case 503: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 4026 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.radio radio = 505;
      case 505: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 4042 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.destination destination = 507;
      case 507: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 4058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.application application = 509;
      case 509: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 4074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_application()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.visibility_rec visibility_rec = 510;
      case 510: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 4082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility_rec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.campus campus = 511;
      case 511: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 4090 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_campus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.building building = 512;
      case 512: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 4098 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.floor floor = 513;
      case 513: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 4106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_floor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.access_point access_point = 514;
      case 514: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 4114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_access_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.virtual_access_point virtual_access_point = 515;
      case 515: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 4122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_virtual_access_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.geofence geofence = 516;
      case 516: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 4130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geofence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.geofence_notify geofence_notify = 517;
      case 517: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 4138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geofence_notify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_radio stats_radio = 518;
      case 518: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 4146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_radio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_vap stats_vap = 519;
      case 519: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 4154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_vap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_station stats_station = 520;
      case 520: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 4162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_station()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ap_neighbor_list ap_neighbor_list = 521;
      case 521: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 4170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_neighbor_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.utilization_stats_radio utilization_stats_radio = 522;
      case 522: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 4178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_utilization_stats_radio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.sta_rssi sta_rssi = 523;
      case 523: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 4186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sta_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ap_rssi ap_rssi = 524;
      case 524: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 4194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.proximity proximity = 525;
      case 525: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 4202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proximity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.webcc_category webcc_category = 526;
      case 526: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 4210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_webcc_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.webcc_info webcc_info = 527;
      case 527: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 4218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_webcc_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.security_message security_message = 528;
      case 528: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 4226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.spectrum_info spectrum_info = 529;
      case 529: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 4234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spectrum_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.state_station state_station = 530;
      case 530: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 4242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_station()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.controller_info controller = 531;
      case 531: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 4250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.cluster_info cluster = 532;
      case 532: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 4258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.uplink_bandwidth uplink_bandwidth = 533;
      case 533: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 4266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uplink_bandwidth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.iap_client_url iapClientURL = 544;
      case 544: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 4354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iapclienturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.rogue_info rogue_info = 545;
      case 545: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 4362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rogue_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.air_monitor_info air_mon_info = 546;
      case 546: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 4370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_air_mon_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ap_location ap_location = 547;
      case 547: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 4378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.state_access_point state_access_point = 548;
      case 548: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 4386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_access_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_modem stats_modem = 549;
      case 549: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 4394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_modem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.uplink_info uplink_info = 550;
      case 550: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 4402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uplink_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_uplink stats_uplink = 551;
      case 551: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 4410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_uplink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.wan_comp_uplink wan_comp_uplink = 552;
      case 552: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 4418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wan_comp_uplink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_ip_probe_uplink stats_ip_probe_uplink = 553;
      case 553: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 4426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_ip_probe_uplink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.summary_webcat_iap summary_webcat = 554;
      case 554: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 4434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary_webcat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.summary_appid_iap summary_appid = 555;
      case 555: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 4442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary_appid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.summary_webrep_iap summary_webrep = 556;
      case 556: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 4450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary_webrep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_role_iap stats_role = 557;
      case 557: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 4458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_vlan_iap stats_vlan = 558;
      case 558: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 4466 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_vlan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.stats_ssid_iap stats_ssid = 559;
      case 559: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 4474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_ssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.tag_rssi tag_rssi = 560;
      case 560: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 4482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.nb_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.nb_event)
  return false;
#undef DO_
}

void nb_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.nb_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional uint64 seq = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seq(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional .ce.nbapi.nb_event.event_operation op = 3;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  // optional uint64 topic_seq = 4;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->topic_seq(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes source_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->source_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .ce.nbapi.nb_event.license_info lic_info = 6 [default = hb_Dhak];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->lic_info(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.location location = 500;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      500, this->_internal_location(), output);
  }

  // optional .ce.nbapi.presence presence = 501;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      501, this->_internal_presence(), output);
  }

  // optional .ce.nbapi.rssi rssi = 502;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502, this->_internal_rssi(), output);
  }

  // optional .ce.nbapi.station station = 503;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      503, this->_internal_station(), output);
  }

  // optional .ce.nbapi.radio radio = 505;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      505, this->_internal_radio(), output);
  }

  // optional .ce.nbapi.destination destination = 507;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      507, this->_internal_destination(), output);
  }

  // optional .ce.nbapi.application application = 509;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      509, this->_internal_application(), output);
  }

  // optional .ce.nbapi.visibility_rec visibility_rec = 510;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      510, this->_internal_visibility_rec(), output);
  }

  // optional .ce.nbapi.campus campus = 511;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      511, this->_internal_campus(), output);
  }

  // optional .ce.nbapi.building building = 512;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      512, this->_internal_building(), output);
  }

  // optional .ce.nbapi.floor floor = 513;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      513, this->_internal_floor(), output);
  }

  // optional .ce.nbapi.access_point access_point = 514;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      514, this->_internal_access_point(), output);
  }

  // optional .ce.nbapi.virtual_access_point virtual_access_point = 515;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      515, this->_internal_virtual_access_point(), output);
  }

  // optional .ce.nbapi.geofence geofence = 516;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      516, this->_internal_geofence(), output);
  }

  // optional .ce.nbapi.geofence_notify geofence_notify = 517;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      517, this->_internal_geofence_notify(), output);
  }

  // optional .ce.nbapi.stats_radio stats_radio = 518;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      518, this->_internal_stats_radio(), output);
  }

  // optional .ce.nbapi.stats_vap stats_vap = 519;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      519, this->_internal_stats_vap(), output);
  }

  // optional .ce.nbapi.stats_station stats_station = 520;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      520, this->_internal_stats_station(), output);
  }

  // optional .ce.nbapi.ap_neighbor_list ap_neighbor_list = 521;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      521, this->_internal_ap_neighbor_list(), output);
  }

  // optional .ce.nbapi.utilization_stats_radio utilization_stats_radio = 522;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      522, this->_internal_utilization_stats_radio(), output);
  }

  // optional .ce.nbapi.sta_rssi sta_rssi = 523;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      523, this->_internal_sta_rssi(), output);
  }

  // optional .ce.nbapi.ap_rssi ap_rssi = 524;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      524, this->_internal_ap_rssi(), output);
  }

  // optional .ce.nbapi.proximity proximity = 525;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      525, this->_internal_proximity(), output);
  }

  // optional .ce.nbapi.webcc_category webcc_category = 526;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      526, this->_internal_webcc_category(), output);
  }

  // optional .ce.nbapi.webcc_info webcc_info = 527;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      527, this->_internal_webcc_info(), output);
  }

  // optional .ce.nbapi.security_message security_message = 528;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      528, this->_internal_security_message(), output);
  }

  // optional .ce.nbapi.spectrum_info spectrum_info = 529;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      529, this->_internal_spectrum_info(), output);
  }

  // optional .ce.nbapi.state_station state_station = 530;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      530, this->_internal_state_station(), output);
  }

  // optional .ce.nbapi.controller_info controller = 531;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      531, this->_internal_controller(), output);
  }

  // optional .ce.nbapi.cluster_info cluster = 532;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      532, this->_internal_cluster(), output);
  }

  // optional .ce.nbapi.uplink_bandwidth uplink_bandwidth = 533;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      533, this->_internal_uplink_bandwidth(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .ce.nbapi.iap_client_url iapClientURL = 544;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      544, this->_internal_iapclienturl(), output);
  }

  // optional .ce.nbapi.rogue_info rogue_info = 545;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      545, this->_internal_rogue_info(), output);
  }

  // optional .ce.nbapi.air_monitor_info air_mon_info = 546;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      546, this->_internal_air_mon_info(), output);
  }

  // optional .ce.nbapi.ap_location ap_location = 547;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      547, this->_internal_ap_location(), output);
  }

  // optional .ce.nbapi.state_access_point state_access_point = 548;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      548, this->_internal_state_access_point(), output);
  }

  // optional .ce.nbapi.stats_modem stats_modem = 549;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      549, this->_internal_stats_modem(), output);
  }

  // optional .ce.nbapi.uplink_info uplink_info = 550;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      550, this->_internal_uplink_info(), output);
  }

  // optional .ce.nbapi.stats_uplink stats_uplink = 551;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      551, this->_internal_stats_uplink(), output);
  }

  // optional .ce.nbapi.wan_comp_uplink wan_comp_uplink = 552;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      552, this->_internal_wan_comp_uplink(), output);
  }

  // optional .ce.nbapi.stats_ip_probe_uplink stats_ip_probe_uplink = 553;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      553, this->_internal_stats_ip_probe_uplink(), output);
  }

  // optional .ce.nbapi.summary_webcat_iap summary_webcat = 554;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      554, this->_internal_summary_webcat(), output);
  }

  // optional .ce.nbapi.summary_appid_iap summary_appid = 555;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      555, this->_internal_summary_appid(), output);
  }

  // optional .ce.nbapi.summary_webrep_iap summary_webrep = 556;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      556, this->_internal_summary_webrep(), output);
  }

  // optional .ce.nbapi.stats_role_iap stats_role = 557;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      557, this->_internal_stats_role(), output);
  }

  // optional .ce.nbapi.stats_vlan_iap stats_vlan = 558;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      558, this->_internal_stats_vlan(), output);
  }

  // optional .ce.nbapi.stats_ssid_iap stats_ssid = 559;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      559, this->_internal_stats_ssid(), output);
  }

  // optional .ce.nbapi.tag_rssi tag_rssi = 560;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      560, this->_internal_tag_rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.nb_event)
}

::google::protobuf::uint8* nb_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.nb_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional uint64 seq = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seq(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional .ce.nbapi.nb_event.event_operation op = 3;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  // optional uint64 topic_seq = 4;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->topic_seq(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes source_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->source_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .ce.nbapi.nb_event.license_info lic_info = 6 [default = hb_Dhak];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->lic_info(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.location location = 500;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        500, this->_internal_location(), deterministic, target);
  }

  // optional .ce.nbapi.presence presence = 501;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        501, this->_internal_presence(), deterministic, target);
  }

  // optional .ce.nbapi.rssi rssi = 502;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        502, this->_internal_rssi(), deterministic, target);
  }

  // optional .ce.nbapi.station station = 503;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        503, this->_internal_station(), deterministic, target);
  }

  // optional .ce.nbapi.radio radio = 505;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        505, this->_internal_radio(), deterministic, target);
  }

  // optional .ce.nbapi.destination destination = 507;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        507, this->_internal_destination(), deterministic, target);
  }

  // optional .ce.nbapi.application application = 509;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        509, this->_internal_application(), deterministic, target);
  }

  // optional .ce.nbapi.visibility_rec visibility_rec = 510;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        510, this->_internal_visibility_rec(), deterministic, target);
  }

  // optional .ce.nbapi.campus campus = 511;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        511, this->_internal_campus(), deterministic, target);
  }

  // optional .ce.nbapi.building building = 512;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        512, this->_internal_building(), deterministic, target);
  }

  // optional .ce.nbapi.floor floor = 513;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        513, this->_internal_floor(), deterministic, target);
  }

  // optional .ce.nbapi.access_point access_point = 514;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        514, this->_internal_access_point(), deterministic, target);
  }

  // optional .ce.nbapi.virtual_access_point virtual_access_point = 515;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        515, this->_internal_virtual_access_point(), deterministic, target);
  }

  // optional .ce.nbapi.geofence geofence = 516;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        516, this->_internal_geofence(), deterministic, target);
  }

  // optional .ce.nbapi.geofence_notify geofence_notify = 517;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        517, this->_internal_geofence_notify(), deterministic, target);
  }

  // optional .ce.nbapi.stats_radio stats_radio = 518;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        518, this->_internal_stats_radio(), deterministic, target);
  }

  // optional .ce.nbapi.stats_vap stats_vap = 519;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        519, this->_internal_stats_vap(), deterministic, target);
  }

  // optional .ce.nbapi.stats_station stats_station = 520;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        520, this->_internal_stats_station(), deterministic, target);
  }

  // optional .ce.nbapi.ap_neighbor_list ap_neighbor_list = 521;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        521, this->_internal_ap_neighbor_list(), deterministic, target);
  }

  // optional .ce.nbapi.utilization_stats_radio utilization_stats_radio = 522;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        522, this->_internal_utilization_stats_radio(), deterministic, target);
  }

  // optional .ce.nbapi.sta_rssi sta_rssi = 523;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        523, this->_internal_sta_rssi(), deterministic, target);
  }

  // optional .ce.nbapi.ap_rssi ap_rssi = 524;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        524, this->_internal_ap_rssi(), deterministic, target);
  }

  // optional .ce.nbapi.proximity proximity = 525;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        525, this->_internal_proximity(), deterministic, target);
  }

  // optional .ce.nbapi.webcc_category webcc_category = 526;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        526, this->_internal_webcc_category(), deterministic, target);
  }

  // optional .ce.nbapi.webcc_info webcc_info = 527;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        527, this->_internal_webcc_info(), deterministic, target);
  }

  // optional .ce.nbapi.security_message security_message = 528;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        528, this->_internal_security_message(), deterministic, target);
  }

  // optional .ce.nbapi.spectrum_info spectrum_info = 529;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        529, this->_internal_spectrum_info(), deterministic, target);
  }

  // optional .ce.nbapi.state_station state_station = 530;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        530, this->_internal_state_station(), deterministic, target);
  }

  // optional .ce.nbapi.controller_info controller = 531;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        531, this->_internal_controller(), deterministic, target);
  }

  // optional .ce.nbapi.cluster_info cluster = 532;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        532, this->_internal_cluster(), deterministic, target);
  }

  // optional .ce.nbapi.uplink_bandwidth uplink_bandwidth = 533;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        533, this->_internal_uplink_bandwidth(), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .ce.nbapi.iap_client_url iapClientURL = 544;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        544, this->_internal_iapclienturl(), deterministic, target);
  }

  // optional .ce.nbapi.rogue_info rogue_info = 545;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        545, this->_internal_rogue_info(), deterministic, target);
  }

  // optional .ce.nbapi.air_monitor_info air_mon_info = 546;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        546, this->_internal_air_mon_info(), deterministic, target);
  }

  // optional .ce.nbapi.ap_location ap_location = 547;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        547, this->_internal_ap_location(), deterministic, target);
  }

  // optional .ce.nbapi.state_access_point state_access_point = 548;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        548, this->_internal_state_access_point(), deterministic, target);
  }

  // optional .ce.nbapi.stats_modem stats_modem = 549;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        549, this->_internal_stats_modem(), deterministic, target);
  }

  // optional .ce.nbapi.uplink_info uplink_info = 550;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        550, this->_internal_uplink_info(), deterministic, target);
  }

  // optional .ce.nbapi.stats_uplink stats_uplink = 551;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        551, this->_internal_stats_uplink(), deterministic, target);
  }

  // optional .ce.nbapi.wan_comp_uplink wan_comp_uplink = 552;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        552, this->_internal_wan_comp_uplink(), deterministic, target);
  }

  // optional .ce.nbapi.stats_ip_probe_uplink stats_ip_probe_uplink = 553;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        553, this->_internal_stats_ip_probe_uplink(), deterministic, target);
  }

  // optional .ce.nbapi.summary_webcat_iap summary_webcat = 554;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        554, this->_internal_summary_webcat(), deterministic, target);
  }

  // optional .ce.nbapi.summary_appid_iap summary_appid = 555;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        555, this->_internal_summary_appid(), deterministic, target);
  }

  // optional .ce.nbapi.summary_webrep_iap summary_webrep = 556;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        556, this->_internal_summary_webrep(), deterministic, target);
  }

  // optional .ce.nbapi.stats_role_iap stats_role = 557;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        557, this->_internal_stats_role(), deterministic, target);
  }

  // optional .ce.nbapi.stats_vlan_iap stats_vlan = 558;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        558, this->_internal_stats_vlan(), deterministic, target);
  }

  // optional .ce.nbapi.stats_ssid_iap stats_ssid = 559;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        559, this->_internal_stats_ssid(), deterministic, target);
  }

  // optional .ce.nbapi.tag_rssi tag_rssi = 560;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        560, this->_internal_tag_rssi(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.nb_event)
  return target;
}

size_t nb_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.nb_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes source_id = 5;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_id());
    }

    // optional .ce.nbapi.location location = 500;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .ce.nbapi.presence presence = 501;
    if (has_presence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *presence_);
    }

    // optional .ce.nbapi.rssi rssi = 502;
    if (has_rssi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rssi_);
    }

    // optional .ce.nbapi.station station = 503;
    if (has_station()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_);
    }

    // optional .ce.nbapi.radio radio = 505;
    if (has_radio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radio_);
    }

    // optional .ce.nbapi.destination destination = 507;
    if (has_destination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destination_);
    }

    // optional .ce.nbapi.application application = 509;
    if (has_application()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *application_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ce.nbapi.visibility_rec visibility_rec = 510;
    if (has_visibility_rec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *visibility_rec_);
    }

    // optional .ce.nbapi.campus campus = 511;
    if (has_campus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *campus_);
    }

    // optional .ce.nbapi.building building = 512;
    if (has_building()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *building_);
    }

    // optional .ce.nbapi.floor floor = 513;
    if (has_floor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *floor_);
    }

    // optional .ce.nbapi.access_point access_point = 514;
    if (has_access_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *access_point_);
    }

    // optional .ce.nbapi.virtual_access_point virtual_access_point = 515;
    if (has_virtual_access_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *virtual_access_point_);
    }

    // optional .ce.nbapi.geofence geofence = 516;
    if (has_geofence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geofence_);
    }

    // optional .ce.nbapi.geofence_notify geofence_notify = 517;
    if (has_geofence_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geofence_notify_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .ce.nbapi.stats_radio stats_radio = 518;
    if (has_stats_radio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_radio_);
    }

    // optional .ce.nbapi.stats_vap stats_vap = 519;
    if (has_stats_vap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_vap_);
    }

    // optional .ce.nbapi.stats_station stats_station = 520;
    if (has_stats_station()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_station_);
    }

    // optional .ce.nbapi.ap_neighbor_list ap_neighbor_list = 521;
    if (has_ap_neighbor_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_neighbor_list_);
    }

    // optional .ce.nbapi.utilization_stats_radio utilization_stats_radio = 522;
    if (has_utilization_stats_radio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *utilization_stats_radio_);
    }

    // optional .ce.nbapi.sta_rssi sta_rssi = 523;
    if (has_sta_rssi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sta_rssi_);
    }

    // optional .ce.nbapi.ap_rssi ap_rssi = 524;
    if (has_ap_rssi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_rssi_);
    }

    // optional .ce.nbapi.proximity proximity = 525;
    if (has_proximity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *proximity_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .ce.nbapi.webcc_category webcc_category = 526;
    if (has_webcc_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *webcc_category_);
    }

    // optional .ce.nbapi.webcc_info webcc_info = 527;
    if (has_webcc_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *webcc_info_);
    }

    // optional .ce.nbapi.security_message security_message = 528;
    if (has_security_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *security_message_);
    }

    // optional .ce.nbapi.spectrum_info spectrum_info = 529;
    if (has_spectrum_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *spectrum_info_);
    }

    // optional .ce.nbapi.state_station state_station = 530;
    if (has_state_station()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_station_);
    }

    // optional .ce.nbapi.controller_info controller = 531;
    if (has_controller()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_);
    }

    // optional .ce.nbapi.cluster_info cluster = 532;
    if (has_cluster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cluster_);
    }

    // optional .ce.nbapi.uplink_bandwidth uplink_bandwidth = 533;
    if (has_uplink_bandwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *uplink_bandwidth_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .ce.nbapi.iap_client_url iapClientURL = 544;
    if (has_iapclienturl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *iapclienturl_);
    }

    // optional .ce.nbapi.rogue_info rogue_info = 545;
    if (has_rogue_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rogue_info_);
    }

    // optional .ce.nbapi.air_monitor_info air_mon_info = 546;
    if (has_air_mon_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *air_mon_info_);
    }

    // optional .ce.nbapi.ap_location ap_location = 547;
    if (has_ap_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_location_);
    }

    // optional .ce.nbapi.state_access_point state_access_point = 548;
    if (has_state_access_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_access_point_);
    }

    // optional .ce.nbapi.stats_modem stats_modem = 549;
    if (has_stats_modem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_modem_);
    }

    // optional .ce.nbapi.uplink_info uplink_info = 550;
    if (has_uplink_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *uplink_info_);
    }

    // optional .ce.nbapi.stats_uplink stats_uplink = 551;
    if (has_stats_uplink()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_uplink_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .ce.nbapi.wan_comp_uplink wan_comp_uplink = 552;
    if (has_wan_comp_uplink()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wan_comp_uplink_);
    }

    // optional .ce.nbapi.stats_ip_probe_uplink stats_ip_probe_uplink = 553;
    if (has_stats_ip_probe_uplink()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_ip_probe_uplink_);
    }

    // optional .ce.nbapi.summary_webcat_iap summary_webcat = 554;
    if (has_summary_webcat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *summary_webcat_);
    }

    // optional .ce.nbapi.summary_appid_iap summary_appid = 555;
    if (has_summary_appid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *summary_appid_);
    }

    // optional .ce.nbapi.summary_webrep_iap summary_webrep = 556;
    if (has_summary_webrep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *summary_webrep_);
    }

    // optional .ce.nbapi.stats_role_iap stats_role = 557;
    if (has_stats_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_role_);
    }

    // optional .ce.nbapi.stats_vlan_iap stats_vlan = 558;
    if (has_stats_vlan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_vlan_);
    }

    // optional .ce.nbapi.stats_ssid_iap stats_ssid = 559;
    if (has_stats_ssid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stats_ssid_);
    }

  }
  if (_has_bits_[48 / 32] & 4128768u) {
    // optional .ce.nbapi.tag_rssi tag_rssi = 560;
    if (has_tag_rssi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_rssi_);
    }

    // optional uint64 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seq());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .ce.nbapi.nb_event.event_operation op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional uint64 topic_seq = 4;
    if (has_topic_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->topic_seq());
    }

    // optional .ce.nbapi.nb_event.license_info lic_info = 6 [default = hb_Dhak];
    if (has_lic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lic_info());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nb_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.nb_event)
  GOOGLE_DCHECK_NE(&from, this);
  const nb_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nb_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.nb_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.nb_event)
    MergeFrom(*source);
  }
}

void nb_event::MergeFrom(const nb_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.nb_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_id();
      source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::ce::nbapi::location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_presence()->::ce::nbapi::presence::MergeFrom(from.presence());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rssi()->::ce::nbapi::rssi::MergeFrom(from.rssi());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_station()->::ce::nbapi::station::MergeFrom(from.station());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_radio()->::ce::nbapi::radio::MergeFrom(from.radio());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_destination()->::ce::nbapi::destination::MergeFrom(from.destination());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_application()->::ce::nbapi::application::MergeFrom(from.application());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_visibility_rec()->::ce::nbapi::visibility_rec::MergeFrom(from.visibility_rec());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_campus()->::ce::nbapi::campus::MergeFrom(from.campus());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_building()->::ce::nbapi::building::MergeFrom(from.building());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_floor()->::ce::nbapi::floor::MergeFrom(from.floor());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_access_point()->::ce::nbapi::access_point::MergeFrom(from.access_point());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_virtual_access_point()->::ce::nbapi::virtual_access_point::MergeFrom(from.virtual_access_point());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_geofence()->::ce::nbapi::geofence::MergeFrom(from.geofence());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_geofence_notify()->::ce::nbapi::geofence_notify::MergeFrom(from.geofence_notify());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_stats_radio()->::ce::nbapi::stats_radio::MergeFrom(from.stats_radio());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_stats_vap()->::ce::nbapi::stats_vap::MergeFrom(from.stats_vap());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_stats_station()->::ce::nbapi::stats_station::MergeFrom(from.stats_station());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_ap_neighbor_list()->::ce::nbapi::ap_neighbor_list::MergeFrom(from.ap_neighbor_list());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_utilization_stats_radio()->::ce::nbapi::utilization_stats_radio::MergeFrom(from.utilization_stats_radio());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_sta_rssi()->::ce::nbapi::sta_rssi::MergeFrom(from.sta_rssi());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_ap_rssi()->::ce::nbapi::ap_rssi::MergeFrom(from.ap_rssi());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_proximity()->::ce::nbapi::proximity::MergeFrom(from.proximity());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_webcc_category()->::ce::nbapi::webcc_category::MergeFrom(from.webcc_category());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_webcc_info()->::ce::nbapi::webcc_info::MergeFrom(from.webcc_info());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_security_message()->::ce::nbapi::security_message::MergeFrom(from.security_message());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_spectrum_info()->::ce::nbapi::spectrum_info::MergeFrom(from.spectrum_info());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_state_station()->::ce::nbapi::state_station::MergeFrom(from.state_station());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_controller()->::ce::nbapi::controller_info::MergeFrom(from.controller());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_cluster()->::ce::nbapi::cluster_info::MergeFrom(from.cluster());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_uplink_bandwidth()->::ce::nbapi::uplink_bandwidth::MergeFrom(from.uplink_bandwidth());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iapclienturl()->::ce::nbapi::iap_client_url::MergeFrom(from.iapclienturl());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rogue_info()->::ce::nbapi::rogue_info::MergeFrom(from.rogue_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_air_mon_info()->::ce::nbapi::air_monitor_info::MergeFrom(from.air_mon_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ap_location()->::ce::nbapi::ap_location::MergeFrom(from.ap_location());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_state_access_point()->::ce::nbapi::state_access_point::MergeFrom(from.state_access_point());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_stats_modem()->::ce::nbapi::stats_modem::MergeFrom(from.stats_modem());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_uplink_info()->::ce::nbapi::uplink_info::MergeFrom(from.uplink_info());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_stats_uplink()->::ce::nbapi::stats_uplink::MergeFrom(from.stats_uplink());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_wan_comp_uplink()->::ce::nbapi::wan_comp_uplink::MergeFrom(from.wan_comp_uplink());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_stats_ip_probe_uplink()->::ce::nbapi::stats_ip_probe_uplink::MergeFrom(from.stats_ip_probe_uplink());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_summary_webcat()->::ce::nbapi::summary_webcat_iap::MergeFrom(from.summary_webcat());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_summary_appid()->::ce::nbapi::summary_appid_iap::MergeFrom(from.summary_appid());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_summary_webrep()->::ce::nbapi::summary_webrep_iap::MergeFrom(from.summary_webrep());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_stats_role()->::ce::nbapi::stats_role_iap::MergeFrom(from.stats_role());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_stats_vlan()->::ce::nbapi::stats_vlan_iap::MergeFrom(from.stats_vlan());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_stats_ssid()->::ce::nbapi::stats_ssid_iap::MergeFrom(from.stats_ssid());
    }
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_tag_rssi()->::ce::nbapi::tag_rssi::MergeFrom(from.tag_rssi());
    }
    if (cached_has_bits & 0x00020000u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00100000u) {
      topic_seq_ = from.topic_seq_;
    }
    if (cached_has_bits & 0x00200000u) {
      lic_info_ = from.lic_info_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void nb_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.nb_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nb_event::CopyFrom(const nb_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.nb_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nb_event::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_presence()) {
    if (!this->presence_->IsInitialized()) return false;
  }
  if (has_rssi()) {
    if (!this->rssi_->IsInitialized()) return false;
  }
  if (has_station()) {
    if (!this->station_->IsInitialized()) return false;
  }
  if (has_radio()) {
    if (!this->radio_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  if (has_visibility_rec()) {
    if (!this->visibility_rec_->IsInitialized()) return false;
  }
  if (has_access_point()) {
    if (!this->access_point_->IsInitialized()) return false;
  }
  if (has_virtual_access_point()) {
    if (!this->virtual_access_point_->IsInitialized()) return false;
  }
  if (has_geofence_notify()) {
    if (!this->geofence_notify_->IsInitialized()) return false;
  }
  if (has_stats_radio()) {
    if (!this->stats_radio_->IsInitialized()) return false;
  }
  if (has_stats_vap()) {
    if (!this->stats_vap_->IsInitialized()) return false;
  }
  if (has_stats_station()) {
    if (!this->stats_station_->IsInitialized()) return false;
  }
  if (has_ap_neighbor_list()) {
    if (!this->ap_neighbor_list_->IsInitialized()) return false;
  }
  if (has_utilization_stats_radio()) {
    if (!this->utilization_stats_radio_->IsInitialized()) return false;
  }
  if (has_sta_rssi()) {
    if (!this->sta_rssi_->IsInitialized()) return false;
  }
  if (has_ap_rssi()) {
    if (!this->ap_rssi_->IsInitialized()) return false;
  }
  if (has_proximity()) {
    if (!this->proximity_->IsInitialized()) return false;
  }
  if (has_security_message()) {
    if (!this->security_message_->IsInitialized()) return false;
  }
  if (has_spectrum_info()) {
    if (!this->spectrum_info_->IsInitialized()) return false;
  }
  if (has_state_station()) {
    if (!this->state_station_->IsInitialized()) return false;
  }
  if (has_controller()) {
    if (!this->controller_->IsInitialized()) return false;
  }
  if (has_cluster()) {
    if (!this->cluster_->IsInitialized()) return false;
  }
  if (has_uplink_bandwidth()) {
    if (!this->uplink_bandwidth_->IsInitialized()) return false;
  }
  if (has_iapclienturl()) {
    if (!this->iapclienturl_->IsInitialized()) return false;
  }
  if (has_rogue_info()) {
    if (!this->rogue_info_->IsInitialized()) return false;
  }
  if (has_air_mon_info()) {
    if (!this->air_mon_info_->IsInitialized()) return false;
  }
  if (has_ap_location()) {
    if (!this->ap_location_->IsInitialized()) return false;
  }
  if (has_state_access_point()) {
    if (!this->state_access_point_->IsInitialized()) return false;
  }
  if (has_stats_modem()) {
    if (!this->stats_modem_->IsInitialized()) return false;
  }
  if (has_uplink_info()) {
    if (!this->uplink_info_->IsInitialized()) return false;
  }
  if (has_stats_uplink()) {
    if (!this->stats_uplink_->IsInitialized()) return false;
  }
  if (has_wan_comp_uplink()) {
    if (!this->wan_comp_uplink_->IsInitialized()) return false;
  }
  if (has_stats_ip_probe_uplink()) {
    if (!this->stats_ip_probe_uplink_->IsInitialized()) return false;
  }
  if (has_summary_webcat()) {
    if (!this->summary_webcat_->IsInitialized()) return false;
  }
  if (has_summary_appid()) {
    if (!this->summary_appid_->IsInitialized()) return false;
  }
  if (has_summary_webrep()) {
    if (!this->summary_webrep_->IsInitialized()) return false;
  }
  if (has_stats_role()) {
    if (!this->stats_role_->IsInitialized()) return false;
  }
  if (has_stats_vlan()) {
    if (!this->stats_vlan_->IsInitialized()) return false;
  }
  if (has_stats_ssid()) {
    if (!this->stats_ssid_->IsInitialized()) return false;
  }
  if (has_tag_rssi()) {
    if (!this->tag_rssi_->IsInitialized()) return false;
  }
  return true;
}

void nb_event::Swap(nb_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nb_event::InternalSwap(nb_event* other) {
  using std::swap;
  source_id_.Swap(&other->source_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(presence_, other->presence_);
  swap(rssi_, other->rssi_);
  swap(station_, other->station_);
  swap(radio_, other->radio_);
  swap(destination_, other->destination_);
  swap(application_, other->application_);
  swap(visibility_rec_, other->visibility_rec_);
  swap(campus_, other->campus_);
  swap(building_, other->building_);
  swap(floor_, other->floor_);
  swap(access_point_, other->access_point_);
  swap(virtual_access_point_, other->virtual_access_point_);
  swap(geofence_, other->geofence_);
  swap(geofence_notify_, other->geofence_notify_);
  swap(stats_radio_, other->stats_radio_);
  swap(stats_vap_, other->stats_vap_);
  swap(stats_station_, other->stats_station_);
  swap(ap_neighbor_list_, other->ap_neighbor_list_);
  swap(utilization_stats_radio_, other->utilization_stats_radio_);
  swap(sta_rssi_, other->sta_rssi_);
  swap(ap_rssi_, other->ap_rssi_);
  swap(proximity_, other->proximity_);
  swap(webcc_category_, other->webcc_category_);
  swap(webcc_info_, other->webcc_info_);
  swap(security_message_, other->security_message_);
  swap(spectrum_info_, other->spectrum_info_);
  swap(state_station_, other->state_station_);
  swap(controller_, other->controller_);
  swap(cluster_, other->cluster_);
  swap(uplink_bandwidth_, other->uplink_bandwidth_);
  swap(iapclienturl_, other->iapclienturl_);
  swap(rogue_info_, other->rogue_info_);
  swap(air_mon_info_, other->air_mon_info_);
  swap(ap_location_, other->ap_location_);
  swap(state_access_point_, other->state_access_point_);
  swap(stats_modem_, other->stats_modem_);
  swap(uplink_info_, other->uplink_info_);
  swap(stats_uplink_, other->stats_uplink_);
  swap(wan_comp_uplink_, other->wan_comp_uplink_);
  swap(stats_ip_probe_uplink_, other->stats_ip_probe_uplink_);
  swap(summary_webcat_, other->summary_webcat_);
  swap(summary_appid_, other->summary_appid_);
  swap(summary_webrep_, other->summary_webrep_);
  swap(stats_role_, other->stats_role_);
  swap(stats_vlan_, other->stats_vlan_);
  swap(stats_ssid_, other->stats_ssid_);
  swap(tag_rssi_, other->tag_rssi_);
  swap(seq_, other->seq_);
  swap(timestamp_, other->timestamp_);
  swap(op_, other->op_);
  swap(topic_seq_, other->topic_seq_);
  swap(lic_info_, other->lic_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata nb_event::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Location_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Location_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::location*>(
      ::ce::nbapi::location::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Location_result::kMsgFieldNumber;
const int query_response_Location_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Location_result::query_response_Location_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Location_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Location_result)
}
query_response_Location_result::query_response_Location_result(const query_response_Location_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::location(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Location_result)
}

void query_response_Location_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Location_result::~query_response_Location_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Location_result)
  SharedDtor();
}

void query_response_Location_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Location_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Location_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Location_result& query_response_Location_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Location_result.base);
  return *internal_default_instance();
}


void query_response_Location_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Location_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Location_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.location msg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Location_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Location_result)
  return false;
#undef DO_
}

void query_response_Location_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.location msg = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_msg(), output);
  }

  // optional uint32 ts = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Location_result)
}

::google::protobuf::uint8* query_response_Location_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.location msg = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Location_result)
  return target;
}

size_t query_response_Location_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Location_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.location msg = 11;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 12;
  if (has_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Location_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Location_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Location_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Location_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Location_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Location_result)
    MergeFrom(*source);
  }
}

void query_response_Location_result::MergeFrom(const query_response_Location_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Location_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::location::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Location_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Location_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Location_result::CopyFrom(const query_response_Location_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Location_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Location_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Location_result::Swap(query_response_Location_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Location_result::InternalSwap(query_response_Location_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Location_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Presence_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Presence_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::presence*>(
      ::ce::nbapi::presence::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Presence_result::kMsgFieldNumber;
const int query_response_Presence_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Presence_result::query_response_Presence_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Presence_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Presence_result)
}
query_response_Presence_result::query_response_Presence_result(const query_response_Presence_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::presence(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Presence_result)
}

void query_response_Presence_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Presence_result::~query_response_Presence_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Presence_result)
  SharedDtor();
}

void query_response_Presence_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Presence_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Presence_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Presence_result& query_response_Presence_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Presence_result.base);
  return *internal_default_instance();
}


void query_response_Presence_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Presence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Presence_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Presence_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.presence msg = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Presence_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Presence_result)
  return false;
#undef DO_
}

void query_response_Presence_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Presence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.presence msg = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_msg(), output);
  }

  // optional uint32 ts = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Presence_result)
}

::google::protobuf::uint8* query_response_Presence_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Presence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.presence msg = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Presence_result)
  return target;
}

size_t query_response_Presence_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Presence_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.presence msg = 21;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 22;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Presence_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Presence_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Presence_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Presence_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Presence_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Presence_result)
    MergeFrom(*source);
  }
}

void query_response_Presence_result::MergeFrom(const query_response_Presence_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Presence_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::presence::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Presence_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Presence_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Presence_result::CopyFrom(const query_response_Presence_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Presence_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Presence_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Presence_result::Swap(query_response_Presence_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Presence_result::InternalSwap(query_response_Presence_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Presence_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Rssi_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Rssi_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::rssi*>(
      ::ce::nbapi::rssi::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Rssi_result::kMsgFieldNumber;
const int query_response_Rssi_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Rssi_result::query_response_Rssi_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Rssi_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Rssi_result)
}
query_response_Rssi_result::query_response_Rssi_result(const query_response_Rssi_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::rssi(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Rssi_result)
}

void query_response_Rssi_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Rssi_result::~query_response_Rssi_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Rssi_result)
  SharedDtor();
}

void query_response_Rssi_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Rssi_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Rssi_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Rssi_result& query_response_Rssi_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Rssi_result.base);
  return *internal_default_instance();
}


void query_response_Rssi_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Rssi_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Rssi_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Rssi_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.rssi msg = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Rssi_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Rssi_result)
  return false;
#undef DO_
}

void query_response_Rssi_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Rssi_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.rssi msg = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->_internal_msg(), output);
  }

  // optional uint32 ts = 32;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Rssi_result)
}

::google::protobuf::uint8* query_response_Rssi_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Rssi_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.rssi msg = 31;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 32;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Rssi_result)
  return target;
}

size_t query_response_Rssi_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Rssi_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.rssi msg = 31;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 32;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Rssi_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Rssi_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Rssi_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Rssi_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Rssi_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Rssi_result)
    MergeFrom(*source);
  }
}

void query_response_Rssi_result::MergeFrom(const query_response_Rssi_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Rssi_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::rssi::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Rssi_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Rssi_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Rssi_result::CopyFrom(const query_response_Rssi_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Rssi_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Rssi_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Rssi_result::Swap(query_response_Rssi_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Rssi_result::InternalSwap(query_response_Rssi_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Rssi_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Station_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Station_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::station*>(
      ::ce::nbapi::station::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Station_result::kMsgFieldNumber;
const int query_response_Station_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Station_result::query_response_Station_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Station_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Station_result)
}
query_response_Station_result::query_response_Station_result(const query_response_Station_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::station(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Station_result)
}

void query_response_Station_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Station_result::~query_response_Station_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Station_result)
  SharedDtor();
}

void query_response_Station_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Station_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Station_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Station_result& query_response_Station_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Station_result.base);
  return *internal_default_instance();
}


void query_response_Station_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Station_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Station_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Station_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.station msg = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Station_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Station_result)
  return false;
#undef DO_
}

void query_response_Station_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Station_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.station msg = 41;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->_internal_msg(), output);
  }

  // optional uint32 ts = 42;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Station_result)
}

::google::protobuf::uint8* query_response_Station_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Station_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.station msg = 41;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Station_result)
  return target;
}

size_t query_response_Station_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Station_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.station msg = 41;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 42;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Station_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Station_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Station_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Station_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Station_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Station_result)
    MergeFrom(*source);
  }
}

void query_response_Station_result::MergeFrom(const query_response_Station_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Station_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::station::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Station_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Station_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Station_result::CopyFrom(const query_response_Station_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Station_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Station_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Station_result::Swap(query_response_Station_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Station_result::InternalSwap(query_response_Station_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Station_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Radio_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Radio_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::radio*>(
      ::ce::nbapi::radio::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Radio_result::kMsgFieldNumber;
const int query_response_Radio_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Radio_result::query_response_Radio_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Radio_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Radio_result)
}
query_response_Radio_result::query_response_Radio_result(const query_response_Radio_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::radio(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Radio_result)
}

void query_response_Radio_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Radio_result::~query_response_Radio_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Radio_result)
  SharedDtor();
}

void query_response_Radio_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Radio_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Radio_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Radio_result& query_response_Radio_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Radio_result.base);
  return *internal_default_instance();
}


void query_response_Radio_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Radio_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Radio_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Radio_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.radio msg = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Radio_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Radio_result)
  return false;
#undef DO_
}

void query_response_Radio_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Radio_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.radio msg = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->_internal_msg(), output);
  }

  // optional uint32 ts = 52;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Radio_result)
}

::google::protobuf::uint8* query_response_Radio_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Radio_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.radio msg = 51;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        51, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 52;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Radio_result)
  return target;
}

size_t query_response_Radio_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Radio_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.radio msg = 51;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 52;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Radio_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Radio_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Radio_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Radio_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Radio_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Radio_result)
    MergeFrom(*source);
  }
}

void query_response_Radio_result::MergeFrom(const query_response_Radio_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Radio_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::radio::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Radio_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Radio_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Radio_result::CopyFrom(const query_response_Radio_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Radio_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Radio_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Radio_result::Swap(query_response_Radio_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Radio_result::InternalSwap(query_response_Radio_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Radio_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Destination_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Destination_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::destination*>(
      ::ce::nbapi::destination::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Destination_result::kMsgFieldNumber;
const int query_response_Destination_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Destination_result::query_response_Destination_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Destination_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Destination_result)
}
query_response_Destination_result::query_response_Destination_result(const query_response_Destination_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::destination(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Destination_result)
}

void query_response_Destination_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Destination_result::~query_response_Destination_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Destination_result)
  SharedDtor();
}

void query_response_Destination_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Destination_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Destination_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Destination_result& query_response_Destination_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Destination_result.base);
  return *internal_default_instance();
}


void query_response_Destination_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Destination_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Destination_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Destination_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.destination msg = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Destination_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Destination_result)
  return false;
#undef DO_
}

void query_response_Destination_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Destination_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.destination msg = 61;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->_internal_msg(), output);
  }

  // optional uint32 ts = 62;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Destination_result)
}

::google::protobuf::uint8* query_response_Destination_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Destination_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.destination msg = 61;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        61, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 62;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Destination_result)
  return target;
}

size_t query_response_Destination_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Destination_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.destination msg = 61;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 62;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Destination_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Destination_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Destination_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Destination_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Destination_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Destination_result)
    MergeFrom(*source);
  }
}

void query_response_Destination_result::MergeFrom(const query_response_Destination_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Destination_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::destination::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Destination_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Destination_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Destination_result::CopyFrom(const query_response_Destination_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Destination_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Destination_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Destination_result::Swap(query_response_Destination_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Destination_result::InternalSwap(query_response_Destination_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Destination_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Application_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Application_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::application*>(
      ::ce::nbapi::application::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Application_result::kMsgFieldNumber;
const int query_response_Application_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Application_result::query_response_Application_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Application_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Application_result)
}
query_response_Application_result::query_response_Application_result(const query_response_Application_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::application(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Application_result)
}

void query_response_Application_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Application_result::~query_response_Application_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Application_result)
  SharedDtor();
}

void query_response_Application_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Application_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Application_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Application_result& query_response_Application_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Application_result.base);
  return *internal_default_instance();
}


void query_response_Application_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Application_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Application_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Application_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.application msg = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Application_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Application_result)
  return false;
#undef DO_
}

void query_response_Application_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Application_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.application msg = 71;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->_internal_msg(), output);
  }

  // optional uint32 ts = 72;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Application_result)
}

::google::protobuf::uint8* query_response_Application_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Application_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.application msg = 71;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        71, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 72;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Application_result)
  return target;
}

size_t query_response_Application_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Application_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.application msg = 71;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 72;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Application_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Application_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Application_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Application_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Application_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Application_result)
    MergeFrom(*source);
  }
}

void query_response_Application_result::MergeFrom(const query_response_Application_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Application_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::application::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Application_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Application_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Application_result::CopyFrom(const query_response_Application_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Application_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Application_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Application_result::Swap(query_response_Application_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Application_result::InternalSwap(query_response_Application_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Application_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Visibility_rec_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Visibility_rec_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::visibility_rec*>(
      ::ce::nbapi::visibility_rec::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Visibility_rec_result::kMsgFieldNumber;
const int query_response_Visibility_rec_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Visibility_rec_result::query_response_Visibility_rec_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Visibility_rec_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Visibility_rec_result)
}
query_response_Visibility_rec_result::query_response_Visibility_rec_result(const query_response_Visibility_rec_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::visibility_rec(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Visibility_rec_result)
}

void query_response_Visibility_rec_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Visibility_rec_result::~query_response_Visibility_rec_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Visibility_rec_result)
  SharedDtor();
}

void query_response_Visibility_rec_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Visibility_rec_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Visibility_rec_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Visibility_rec_result& query_response_Visibility_rec_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Visibility_rec_result.base);
  return *internal_default_instance();
}


void query_response_Visibility_rec_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Visibility_rec_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Visibility_rec_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Visibility_rec_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.visibility_rec msg = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Visibility_rec_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Visibility_rec_result)
  return false;
#undef DO_
}

void query_response_Visibility_rec_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Visibility_rec_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.visibility_rec msg = 81;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->_internal_msg(), output);
  }

  // optional uint32 ts = 82;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Visibility_rec_result)
}

::google::protobuf::uint8* query_response_Visibility_rec_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Visibility_rec_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.visibility_rec msg = 81;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        81, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 82;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Visibility_rec_result)
  return target;
}

size_t query_response_Visibility_rec_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Visibility_rec_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.visibility_rec msg = 81;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 82;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Visibility_rec_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Visibility_rec_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Visibility_rec_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Visibility_rec_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Visibility_rec_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Visibility_rec_result)
    MergeFrom(*source);
  }
}

void query_response_Visibility_rec_result::MergeFrom(const query_response_Visibility_rec_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Visibility_rec_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::visibility_rec::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Visibility_rec_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Visibility_rec_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Visibility_rec_result::CopyFrom(const query_response_Visibility_rec_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Visibility_rec_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Visibility_rec_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Visibility_rec_result::Swap(query_response_Visibility_rec_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Visibility_rec_result::InternalSwap(query_response_Visibility_rec_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Visibility_rec_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Campus_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Campus_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::campus*>(
      ::ce::nbapi::campus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Campus_result::kMsgFieldNumber;
const int query_response_Campus_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Campus_result::query_response_Campus_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Campus_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Campus_result)
}
query_response_Campus_result::query_response_Campus_result(const query_response_Campus_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::campus(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Campus_result)
}

void query_response_Campus_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Campus_result::~query_response_Campus_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Campus_result)
  SharedDtor();
}

void query_response_Campus_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Campus_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Campus_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Campus_result& query_response_Campus_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Campus_result.base);
  return *internal_default_instance();
}


void query_response_Campus_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Campus_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Campus_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Campus_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.campus msg = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 730 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 736 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Campus_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Campus_result)
  return false;
#undef DO_
}

void query_response_Campus_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Campus_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.campus msg = 91;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->_internal_msg(), output);
  }

  // optional uint32 ts = 92;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Campus_result)
}

::google::protobuf::uint8* query_response_Campus_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Campus_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.campus msg = 91;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        91, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 92;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Campus_result)
  return target;
}

size_t query_response_Campus_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Campus_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.campus msg = 91;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 92;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Campus_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Campus_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Campus_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Campus_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Campus_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Campus_result)
    MergeFrom(*source);
  }
}

void query_response_Campus_result::MergeFrom(const query_response_Campus_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Campus_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::campus::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Campus_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Campus_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Campus_result::CopyFrom(const query_response_Campus_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Campus_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Campus_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Campus_result::Swap(query_response_Campus_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Campus_result::InternalSwap(query_response_Campus_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Campus_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Building_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Building_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::building*>(
      ::ce::nbapi::building::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Building_result::kMsgFieldNumber;
const int query_response_Building_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Building_result::query_response_Building_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Building_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Building_result)
}
query_response_Building_result::query_response_Building_result(const query_response_Building_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::building(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Building_result)
}

void query_response_Building_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Building_result::~query_response_Building_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Building_result)
  SharedDtor();
}

void query_response_Building_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Building_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Building_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Building_result& query_response_Building_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Building_result.base);
  return *internal_default_instance();
}


void query_response_Building_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Building_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Building_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Building_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.building msg = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Building_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Building_result)
  return false;
#undef DO_
}

void query_response_Building_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Building_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.building msg = 101;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_msg(), output);
  }

  // optional uint32 ts = 102;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(102, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Building_result)
}

::google::protobuf::uint8* query_response_Building_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Building_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.building msg = 101;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 102;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(102, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Building_result)
  return target;
}

size_t query_response_Building_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Building_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.building msg = 101;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 102;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Building_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Building_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Building_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Building_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Building_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Building_result)
    MergeFrom(*source);
  }
}

void query_response_Building_result::MergeFrom(const query_response_Building_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Building_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::building::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Building_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Building_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Building_result::CopyFrom(const query_response_Building_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Building_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Building_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Building_result::Swap(query_response_Building_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Building_result::InternalSwap(query_response_Building_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Building_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Floor_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Floor_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::floor*>(
      ::ce::nbapi::floor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Floor_result::kMsgFieldNumber;
const int query_response_Floor_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Floor_result::query_response_Floor_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Floor_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Floor_result)
}
query_response_Floor_result::query_response_Floor_result(const query_response_Floor_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::floor(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Floor_result)
}

void query_response_Floor_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Floor_result::~query_response_Floor_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Floor_result)
  SharedDtor();
}

void query_response_Floor_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Floor_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Floor_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Floor_result& query_response_Floor_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Floor_result.base);
  return *internal_default_instance();
}


void query_response_Floor_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Floor_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Floor_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Floor_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.floor msg = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 890 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 896 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Floor_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Floor_result)
  return false;
#undef DO_
}

void query_response_Floor_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Floor_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.floor msg = 111;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->_internal_msg(), output);
  }

  // optional uint32 ts = 112;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(112, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Floor_result)
}

::google::protobuf::uint8* query_response_Floor_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Floor_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.floor msg = 111;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        111, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 112;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(112, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Floor_result)
  return target;
}

size_t query_response_Floor_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Floor_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.floor msg = 111;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 112;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Floor_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Floor_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Floor_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Floor_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Floor_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Floor_result)
    MergeFrom(*source);
  }
}

void query_response_Floor_result::MergeFrom(const query_response_Floor_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Floor_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::floor::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Floor_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Floor_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Floor_result::CopyFrom(const query_response_Floor_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Floor_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Floor_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Floor_result::Swap(query_response_Floor_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Floor_result::InternalSwap(query_response_Floor_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Floor_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Access_point_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Access_point_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::access_point*>(
      ::ce::nbapi::access_point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Access_point_result::kMsgFieldNumber;
const int query_response_Access_point_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Access_point_result::query_response_Access_point_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Access_point_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Access_point_result)
}
query_response_Access_point_result::query_response_Access_point_result(const query_response_Access_point_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::access_point(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Access_point_result)
}

void query_response_Access_point_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Access_point_result::~query_response_Access_point_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Access_point_result)
  SharedDtor();
}

void query_response_Access_point_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Access_point_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Access_point_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Access_point_result& query_response_Access_point_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Access_point_result.base);
  return *internal_default_instance();
}


void query_response_Access_point_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Access_point_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Access_point_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.access_point msg = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 976 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Access_point_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Access_point_result)
  return false;
#undef DO_
}

void query_response_Access_point_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.access_point msg = 121;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->_internal_msg(), output);
  }

  // optional uint32 ts = 122;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(122, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Access_point_result)
}

::google::protobuf::uint8* query_response_Access_point_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.access_point msg = 121;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        121, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 122;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(122, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Access_point_result)
  return target;
}

size_t query_response_Access_point_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Access_point_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.access_point msg = 121;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 122;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Access_point_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Access_point_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Access_point_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Access_point_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Access_point_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Access_point_result)
    MergeFrom(*source);
  }
}

void query_response_Access_point_result::MergeFrom(const query_response_Access_point_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Access_point_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::access_point::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Access_point_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Access_point_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Access_point_result::CopyFrom(const query_response_Access_point_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Access_point_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Access_point_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Access_point_result::Swap(query_response_Access_point_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Access_point_result::InternalSwap(query_response_Access_point_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Access_point_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Virtual_access_point_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Virtual_access_point_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::virtual_access_point*>(
      ::ce::nbapi::virtual_access_point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Virtual_access_point_result::kMsgFieldNumber;
const int query_response_Virtual_access_point_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Virtual_access_point_result::query_response_Virtual_access_point_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Virtual_access_point_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Virtual_access_point_result)
}
query_response_Virtual_access_point_result::query_response_Virtual_access_point_result(const query_response_Virtual_access_point_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::virtual_access_point(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Virtual_access_point_result)
}

void query_response_Virtual_access_point_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Virtual_access_point_result::~query_response_Virtual_access_point_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Virtual_access_point_result)
  SharedDtor();
}

void query_response_Virtual_access_point_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Virtual_access_point_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Virtual_access_point_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Virtual_access_point_result& query_response_Virtual_access_point_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Virtual_access_point_result.base);
  return *internal_default_instance();
}


void query_response_Virtual_access_point_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Virtual_access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Virtual_access_point_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Virtual_access_point_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.virtual_access_point msg = 131;
      case 131: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 1050 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 132;
      case 132: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 1056 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Virtual_access_point_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Virtual_access_point_result)
  return false;
#undef DO_
}

void query_response_Virtual_access_point_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Virtual_access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.virtual_access_point msg = 131;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, this->_internal_msg(), output);
  }

  // optional uint32 ts = 132;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(132, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Virtual_access_point_result)
}

::google::protobuf::uint8* query_response_Virtual_access_point_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Virtual_access_point_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.virtual_access_point msg = 131;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        131, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 132;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(132, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Virtual_access_point_result)
  return target;
}

size_t query_response_Virtual_access_point_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Virtual_access_point_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.virtual_access_point msg = 131;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 132;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Virtual_access_point_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Virtual_access_point_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Virtual_access_point_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Virtual_access_point_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Virtual_access_point_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Virtual_access_point_result)
    MergeFrom(*source);
  }
}

void query_response_Virtual_access_point_result::MergeFrom(const query_response_Virtual_access_point_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Virtual_access_point_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::virtual_access_point::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Virtual_access_point_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Virtual_access_point_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Virtual_access_point_result::CopyFrom(const query_response_Virtual_access_point_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Virtual_access_point_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Virtual_access_point_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Virtual_access_point_result::Swap(query_response_Virtual_access_point_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Virtual_access_point_result::InternalSwap(query_response_Virtual_access_point_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Virtual_access_point_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Geofence_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Geofence_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::geofence*>(
      ::ce::nbapi::geofence::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Geofence_result::kMsgFieldNumber;
const int query_response_Geofence_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Geofence_result::query_response_Geofence_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Geofence_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Geofence_result)
}
query_response_Geofence_result::query_response_Geofence_result(const query_response_Geofence_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::geofence(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Geofence_result)
}

void query_response_Geofence_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Geofence_result::~query_response_Geofence_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Geofence_result)
  SharedDtor();
}

void query_response_Geofence_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Geofence_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Geofence_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Geofence_result& query_response_Geofence_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Geofence_result.base);
  return *internal_default_instance();
}


void query_response_Geofence_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Geofence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Geofence_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Geofence_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.geofence msg = 141;
      case 141: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 1130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 142;
      case 142: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 1136 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Geofence_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Geofence_result)
  return false;
#undef DO_
}

void query_response_Geofence_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Geofence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.geofence msg = 141;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, this->_internal_msg(), output);
  }

  // optional uint32 ts = 142;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(142, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Geofence_result)
}

::google::protobuf::uint8* query_response_Geofence_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Geofence_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.geofence msg = 141;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        141, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 142;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(142, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Geofence_result)
  return target;
}

size_t query_response_Geofence_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Geofence_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.geofence msg = 141;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 142;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Geofence_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Geofence_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Geofence_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Geofence_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Geofence_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Geofence_result)
    MergeFrom(*source);
  }
}

void query_response_Geofence_result::MergeFrom(const query_response_Geofence_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Geofence_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::geofence::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Geofence_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Geofence_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Geofence_result::CopyFrom(const query_response_Geofence_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Geofence_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Geofence_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Geofence_result::Swap(query_response_Geofence_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Geofence_result::InternalSwap(query_response_Geofence_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Geofence_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Proximity_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Proximity_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::proximity*>(
      ::ce::nbapi::proximity::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Proximity_result::kMsgFieldNumber;
const int query_response_Proximity_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Proximity_result::query_response_Proximity_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Proximity_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Proximity_result)
}
query_response_Proximity_result::query_response_Proximity_result(const query_response_Proximity_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::proximity(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Proximity_result)
}

void query_response_Proximity_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Proximity_result::~query_response_Proximity_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Proximity_result)
  SharedDtor();
}

void query_response_Proximity_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Proximity_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Proximity_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Proximity_result& query_response_Proximity_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Proximity_result.base);
  return *internal_default_instance();
}


void query_response_Proximity_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Proximity_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Proximity_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Proximity_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.proximity msg = 152;
      case 152: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 1218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 153;
      case 153: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 1224 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Proximity_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Proximity_result)
  return false;
#undef DO_
}

void query_response_Proximity_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Proximity_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.proximity msg = 152;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      152, this->_internal_msg(), output);
  }

  // optional uint32 ts = 153;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(153, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Proximity_result)
}

::google::protobuf::uint8* query_response_Proximity_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Proximity_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.proximity msg = 152;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        152, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 153;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(153, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Proximity_result)
  return target;
}

size_t query_response_Proximity_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Proximity_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.proximity msg = 152;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 153;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Proximity_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Proximity_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Proximity_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Proximity_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Proximity_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Proximity_result)
    MergeFrom(*source);
  }
}

void query_response_Proximity_result::MergeFrom(const query_response_Proximity_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Proximity_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::proximity::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Proximity_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Proximity_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Proximity_result::CopyFrom(const query_response_Proximity_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Proximity_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Proximity_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Proximity_result::Swap(query_response_Proximity_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Proximity_result::InternalSwap(query_response_Proximity_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Proximity_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_WebCCCategory_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_WebCCCategory_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::webcc_category*>(
      ::ce::nbapi::webcc_category::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_WebCCCategory_result::kMsgFieldNumber;
const int query_response_WebCCCategory_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_WebCCCategory_result::query_response_WebCCCategory_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_WebCCCategory_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.WebCCCategory_result)
}
query_response_WebCCCategory_result::query_response_WebCCCategory_result(const query_response_WebCCCategory_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::webcc_category(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.WebCCCategory_result)
}

void query_response_WebCCCategory_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_WebCCCategory_result::~query_response_WebCCCategory_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.WebCCCategory_result)
  SharedDtor();
}

void query_response_WebCCCategory_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_WebCCCategory_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_WebCCCategory_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_WebCCCategory_result& query_response_WebCCCategory_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_WebCCCategory_result.base);
  return *internal_default_instance();
}


void query_response_WebCCCategory_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.WebCCCategory_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_WebCCCategory_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.WebCCCategory_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.webcc_category msg = 161;
      case 161: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 162;
      case 162: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1296 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.WebCCCategory_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.WebCCCategory_result)
  return false;
#undef DO_
}

void query_response_WebCCCategory_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.WebCCCategory_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.webcc_category msg = 161;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      161, this->_internal_msg(), output);
  }

  // optional uint32 ts = 162;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(162, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.WebCCCategory_result)
}

::google::protobuf::uint8* query_response_WebCCCategory_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.WebCCCategory_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.webcc_category msg = 161;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        161, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 162;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(162, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.WebCCCategory_result)
  return target;
}

size_t query_response_WebCCCategory_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.WebCCCategory_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.webcc_category msg = 161;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 162;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_WebCCCategory_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.WebCCCategory_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_WebCCCategory_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_WebCCCategory_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.WebCCCategory_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.WebCCCategory_result)
    MergeFrom(*source);
  }
}

void query_response_WebCCCategory_result::MergeFrom(const query_response_WebCCCategory_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.WebCCCategory_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::webcc_category::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_WebCCCategory_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.WebCCCategory_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_WebCCCategory_result::CopyFrom(const query_response_WebCCCategory_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.WebCCCategory_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_WebCCCategory_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_WebCCCategory_result::Swap(query_response_WebCCCategory_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_WebCCCategory_result::InternalSwap(query_response_WebCCCategory_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_WebCCCategory_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Info_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Info_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::info*>(
      ::ce::nbapi::info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Info_result::kMsgFieldNumber;
const int query_response_Info_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Info_result::query_response_Info_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Info_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Info_result)
}
query_response_Info_result::query_response_Info_result(const query_response_Info_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::info(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Info_result)
}

void query_response_Info_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Info_result::~query_response_Info_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Info_result)
  SharedDtor();
}

void query_response_Info_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Info_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Info_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Info_result& query_response_Info_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Info_result.base);
  return *internal_default_instance();
}


void query_response_Info_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Info_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Info_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.info msg = 171;
      case 171: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 1370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 172;
      case 172: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 1376 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Info_result)
  return false;
#undef DO_
}

void query_response_Info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Info_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.info msg = 171;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171, this->_internal_msg(), output);
  }

  // optional uint32 ts = 172;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(172, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Info_result)
}

::google::protobuf::uint8* query_response_Info_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Info_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.info msg = 171;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        171, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 172;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(172, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Info_result)
  return target;
}

size_t query_response_Info_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Info_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.info msg = 171;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 172;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Info_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Info_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Info_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Info_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Info_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Info_result)
    MergeFrom(*source);
  }
}

void query_response_Info_result::MergeFrom(const query_response_Info_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Info_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::info::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Info_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Info_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Info_result::CopyFrom(const query_response_Info_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Info_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Info_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void query_response_Info_result::Swap(query_response_Info_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Info_result::InternalSwap(query_response_Info_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Info_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Topology_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Topology_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::topology*>(
      ::ce::nbapi::topology::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Topology_result::kMsgFieldNumber;
const int query_response_Topology_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Topology_result::query_response_Topology_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Topology_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Topology_result)
}
query_response_Topology_result::query_response_Topology_result(const query_response_Topology_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::topology(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Topology_result)
}

void query_response_Topology_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Topology_result::~query_response_Topology_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Topology_result)
  SharedDtor();
}

void query_response_Topology_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Topology_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Topology_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Topology_result& query_response_Topology_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Topology_result.base);
  return *internal_default_instance();
}


void query_response_Topology_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Topology_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Topology_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Topology_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.topology msg = 181;
      case 181: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 1450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 182;
      case 182: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 1456 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Topology_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Topology_result)
  return false;
#undef DO_
}

void query_response_Topology_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Topology_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.topology msg = 181;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      181, this->_internal_msg(), output);
  }

  // optional uint32 ts = 182;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(182, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Topology_result)
}

::google::protobuf::uint8* query_response_Topology_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Topology_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.topology msg = 181;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        181, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 182;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(182, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Topology_result)
  return target;
}

size_t query_response_Topology_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Topology_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.topology msg = 181;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 182;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Topology_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Topology_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Topology_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Topology_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Topology_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Topology_result)
    MergeFrom(*source);
  }
}

void query_response_Topology_result::MergeFrom(const query_response_Topology_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Topology_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::topology::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Topology_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Topology_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Topology_result::CopyFrom(const query_response_Topology_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Topology_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Topology_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Topology_result::Swap(query_response_Topology_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Topology_result::InternalSwap(query_response_Topology_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Topology_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Controller_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Controller_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::controller_info*>(
      ::ce::nbapi::controller_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Controller_result::kMsgFieldNumber;
const int query_response_Controller_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Controller_result::query_response_Controller_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Controller_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Controller_result)
}
query_response_Controller_result::query_response_Controller_result(const query_response_Controller_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::controller_info(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Controller_result)
}

void query_response_Controller_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Controller_result::~query_response_Controller_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Controller_result)
  SharedDtor();
}

void query_response_Controller_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Controller_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Controller_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Controller_result& query_response_Controller_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Controller_result.base);
  return *internal_default_instance();
}


void query_response_Controller_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Controller_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Controller_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Controller_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.controller_info msg = 191;
      case 191: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 1530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 192;
      case 192: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 1536 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Controller_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Controller_result)
  return false;
#undef DO_
}

void query_response_Controller_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Controller_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.controller_info msg = 191;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191, this->_internal_msg(), output);
  }

  // optional uint32 ts = 192;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(192, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Controller_result)
}

::google::protobuf::uint8* query_response_Controller_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Controller_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.controller_info msg = 191;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        191, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 192;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(192, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Controller_result)
  return target;
}

size_t query_response_Controller_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Controller_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.controller_info msg = 191;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 192;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Controller_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Controller_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Controller_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Controller_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Controller_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Controller_result)
    MergeFrom(*source);
  }
}

void query_response_Controller_result::MergeFrom(const query_response_Controller_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Controller_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::controller_info::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Controller_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Controller_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Controller_result::CopyFrom(const query_response_Controller_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Controller_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Controller_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Controller_result::Swap(query_response_Controller_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Controller_result::InternalSwap(query_response_Controller_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Controller_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Cluster_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Cluster_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::cluster_info*>(
      ::ce::nbapi::cluster_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Cluster_result::kMsgFieldNumber;
const int query_response_Cluster_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Cluster_result::query_response_Cluster_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Cluster_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Cluster_result)
}
query_response_Cluster_result::query_response_Cluster_result(const query_response_Cluster_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::cluster_info(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Cluster_result)
}

void query_response_Cluster_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Cluster_result::~query_response_Cluster_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Cluster_result)
  SharedDtor();
}

void query_response_Cluster_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Cluster_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Cluster_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Cluster_result& query_response_Cluster_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Cluster_result.base);
  return *internal_default_instance();
}


void query_response_Cluster_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Cluster_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Cluster_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Cluster_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.cluster_info msg = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 1610 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 1616 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Cluster_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Cluster_result)
  return false;
#undef DO_
}

void query_response_Cluster_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Cluster_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.cluster_info msg = 201;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->_internal_msg(), output);
  }

  // optional uint32 ts = 202;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(202, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Cluster_result)
}

::google::protobuf::uint8* query_response_Cluster_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Cluster_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.cluster_info msg = 201;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        201, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 202;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(202, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Cluster_result)
  return target;
}

size_t query_response_Cluster_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Cluster_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.cluster_info msg = 201;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 202;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Cluster_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Cluster_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Cluster_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Cluster_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Cluster_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Cluster_result)
    MergeFrom(*source);
  }
}

void query_response_Cluster_result::MergeFrom(const query_response_Cluster_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Cluster_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::cluster_info::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Cluster_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Cluster_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Cluster_result::CopyFrom(const query_response_Cluster_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Cluster_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Cluster_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Cluster_result::Swap(query_response_Cluster_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Cluster_result::InternalSwap(query_response_Cluster_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Cluster_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response_Access_point_location_result::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_Access_point_location_result_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ce::nbapi::ap_location*>(
      ::ce::nbapi::ap_location::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response_Access_point_location_result::kMsgFieldNumber;
const int query_response_Access_point_location_result::kTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response_Access_point_location_result::query_response_Access_point_location_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response_Access_point_location_result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response.Access_point_location_result)
}
query_response_Access_point_location_result::query_response_Access_point_location_result(const query_response_Access_point_location_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::ce::nbapi::ap_location(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response.Access_point_location_result)
}

void query_response_Access_point_location_result::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(ts_));
}

query_response_Access_point_location_result::~query_response_Access_point_location_result() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response.Access_point_location_result)
  SharedDtor();
}

void query_response_Access_point_location_result::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void query_response_Access_point_location_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response_Access_point_location_result::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response_Access_point_location_result& query_response_Access_point_location_result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response_Access_point_location_result.base);
  return *internal_default_instance();
}


void query_response_Access_point_location_result::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response.Access_point_location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  ts_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response_Access_point_location_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response.Access_point_location_result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ce.nbapi.ap_location msg = 211;
      case 211: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 1690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts = 212;
      case 212: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 1696 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          input->SetLastTag(tag);
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response.Access_point_location_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response.Access_point_location_result)
  return false;
#undef DO_
}

void query_response_Access_point_location_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response.Access_point_location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ap_location msg = 211;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      211, this->_internal_msg(), output);
  }

  // optional uint32 ts = 212;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(212, this->ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response.Access_point_location_result)
}

::google::protobuf::uint8* query_response_Access_point_location_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response.Access_point_location_result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ce.nbapi.ap_location msg = 211;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        211, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 ts = 212;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(212, this->ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response.Access_point_location_result)
  return target;
}

size_t query_response_Access_point_location_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response.Access_point_location_result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ce.nbapi.ap_location msg = 211;
  if (has_msg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }
  // optional uint32 ts = 212;
  if (has_ts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response_Access_point_location_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response.Access_point_location_result)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response_Access_point_location_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response_Access_point_location_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response.Access_point_location_result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response.Access_point_location_result)
    MergeFrom(*source);
  }
}

void query_response_Access_point_location_result::MergeFrom(const query_response_Access_point_location_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response.Access_point_location_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::ce::nbapi::ap_location::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      ts_ = from.ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void query_response_Access_point_location_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response.Access_point_location_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response_Access_point_location_result::CopyFrom(const query_response_Access_point_location_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response.Access_point_location_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response_Access_point_location_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void query_response_Access_point_location_result::Swap(query_response_Access_point_location_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response_Access_point_location_result::InternalSwap(query_response_Access_point_location_result* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(ts_, other->ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response_Access_point_location_result::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_response::InitAsDefaultInstance() {
  ::ce::nbapi::_query_response_default_instance_._instance.get_mutable()->info_result_ = const_cast< ::ce::nbapi::query_response_Info_result*>(
      ::ce::nbapi::query_response_Info_result::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_response::kLocationResultFieldNumber;
const int query_response::kPresenceResultFieldNumber;
const int query_response::kRssiResultFieldNumber;
const int query_response::kStationResultFieldNumber;
const int query_response::kRadioResultFieldNumber;
const int query_response::kDestinationResultFieldNumber;
const int query_response::kApplicationResultFieldNumber;
const int query_response::kVisibilityRecResultFieldNumber;
const int query_response::kCampusResultFieldNumber;
const int query_response::kBuildingResultFieldNumber;
const int query_response::kFloorResultFieldNumber;
const int query_response::kAccessPointResultFieldNumber;
const int query_response::kVirtualAccessPointResultFieldNumber;
const int query_response::kGeofenceResultFieldNumber;
const int query_response::kProximityResultFieldNumber;
const int query_response::kWebcccategoryResultFieldNumber;
const int query_response::kInfoResultFieldNumber;
const int query_response::kTopologyResultFieldNumber;
const int query_response::kControllerResultFieldNumber;
const int query_response::kClusterResultFieldNumber;
const int query_response::kAccessPointLocationResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_response::query_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_query_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.query_response)
}
query_response::query_response(const query_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      location_result_(from.location_result_),
      presence_result_(from.presence_result_),
      rssi_result_(from.rssi_result_),
      station_result_(from.station_result_),
      radio_result_(from.radio_result_),
      destination_result_(from.destination_result_),
      application_result_(from.application_result_),
      visibility_rec_result_(from.visibility_rec_result_),
      campus_result_(from.campus_result_),
      building_result_(from.building_result_),
      floor_result_(from.floor_result_),
      access_point_result_(from.access_point_result_),
      virtual_access_point_result_(from.virtual_access_point_result_),
      geofence_result_(from.geofence_result_),
      proximity_result_(from.proximity_result_),
      webcccategory_result_(from.webcccategory_result_),
      topology_result_(from.topology_result_),
      controller_result_(from.controller_result_),
      cluster_result_(from.cluster_result_),
      access_point_location_result_(from.access_point_location_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_result()) {
    info_result_ = new ::ce::nbapi::query_response_Info_result(*from.info_result_);
  } else {
    info_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.query_response)
}

void query_response::SharedCtor() {
  info_result_ = NULL;
}

query_response::~query_response() {
  // @@protoc_insertion_point(destructor:ce.nbapi.query_response)
  SharedDtor();
}

void query_response::SharedDtor() {
  if (this != internal_default_instance()) delete info_result_;
}

void query_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* query_response::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_response& query_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_query_response.base);
  return *internal_default_instance();
}


void query_response::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.query_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_result_.Clear();
  presence_result_.Clear();
  rssi_result_.Clear();
  station_result_.Clear();
  radio_result_.Clear();
  destination_result_.Clear();
  application_result_.Clear();
  visibility_rec_result_.Clear();
  campus_result_.Clear();
  building_result_.Clear();
  floor_result_.Clear();
  access_point_result_.Clear();
  virtual_access_point_result_.Clear();
  geofence_result_.Clear();
  proximity_result_.Clear();
  webcccategory_result_.Clear();
  topology_result_.Clear();
  controller_result_.Clear();
  cluster_result_.Clear();
  access_point_location_result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_result_ != NULL);
    info_result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool query_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.query_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Location_result = 10 { ... };
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(83u /* 83 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(10, input, add_location_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Presence_result = 20 { ... };
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(163u /* 163 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(20, input, add_presence_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Rssi_result = 30 { ... };
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(243u /* 243 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(30, input, add_rssi_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Station_result = 40 { ... };
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(67u /* 323 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(40, input, add_station_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Radio_result = 50 { ... };
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(147u /* 403 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(50, input, add_radio_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Destination_result = 60 { ... };
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(227u /* 483 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(60, input, add_destination_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Application_result = 70 { ... };
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(51u /* 563 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(70, input, add_application_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Visibility_rec_result = 80 { ... };
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(131u /* 643 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(80, input, add_visibility_rec_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Campus_result = 90 { ... };
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(211u /* 723 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(90, input, add_campus_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Building_result = 100 { ... };
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(35u /* 803 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(100, input, add_building_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Floor_result = 110 { ... };
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(115u /* 883 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(110, input, add_floor_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Access_point_result = 120 { ... };
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(195u /* 963 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(120, input, add_access_point_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Virtual_access_point_result = 130 { ... };
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(19u /* 1043 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(130, input, add_virtual_access_point_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Geofence_result = 140 { ... };
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(99u /* 1123 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(140, input, add_geofence_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Proximity_result = 150 { ... };
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(179u /* 1203 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(150, input, add_proximity_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group WebCCCategory_result = 160 { ... };
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(3u /* 1283 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(160, input, add_webcccategory_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional group Info_result = 170 { ... };
      case 170: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(83u /* 1363 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(
                170, input, mutable_info_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Topology_result = 180 { ... };
      case 180: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(163u /* 1443 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(180, input, add_topology_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Controller_result = 190 { ... };
      case 190: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(243u /* 1523 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(190, input, add_controller_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Cluster_result = 200 { ... };
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(67u /* 1603 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(200, input, add_cluster_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated group Access_point_location_result = 210 { ... };
      case 210: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(147u /* 1683 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroup(210, input, add_access_point_location_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.query_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.query_response)
  return false;
#undef DO_
}

void query_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.query_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Location_result = 10 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->location_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      10,
      this->location_result(static_cast<int>(i)),
      output);
  }

  // repeated group Presence_result = 20 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presence_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      20,
      this->presence_result(static_cast<int>(i)),
      output);
  }

  // repeated group Rssi_result = 30 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rssi_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      30,
      this->rssi_result(static_cast<int>(i)),
      output);
  }

  // repeated group Station_result = 40 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->station_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      40,
      this->station_result(static_cast<int>(i)),
      output);
  }

  // repeated group Radio_result = 50 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      50,
      this->radio_result(static_cast<int>(i)),
      output);
  }

  // repeated group Destination_result = 60 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      60,
      this->destination_result(static_cast<int>(i)),
      output);
  }

  // repeated group Application_result = 70 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->application_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      70,
      this->application_result(static_cast<int>(i)),
      output);
  }

  // repeated group Visibility_rec_result = 80 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visibility_rec_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      80,
      this->visibility_rec_result(static_cast<int>(i)),
      output);
  }

  // repeated group Campus_result = 90 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->campus_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      90,
      this->campus_result(static_cast<int>(i)),
      output);
  }

  // repeated group Building_result = 100 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      100,
      this->building_result(static_cast<int>(i)),
      output);
  }

  // repeated group Floor_result = 110 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->floor_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      110,
      this->floor_result(static_cast<int>(i)),
      output);
  }

  // repeated group Access_point_result = 120 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      120,
      this->access_point_result(static_cast<int>(i)),
      output);
  }

  // repeated group Virtual_access_point_result = 130 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_access_point_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      130,
      this->virtual_access_point_result(static_cast<int>(i)),
      output);
  }

  // repeated group Geofence_result = 140 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofence_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      140,
      this->geofence_result(static_cast<int>(i)),
      output);
  }

  // repeated group Proximity_result = 150 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proximity_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      150,
      this->proximity_result(static_cast<int>(i)),
      output);
  }

  // repeated group WebCCCategory_result = 160 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->webcccategory_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      160,
      this->webcccategory_result(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional group Info_result = 170 { ... };
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      170, this->_internal_info_result(), output);
  }

  // repeated group Topology_result = 180 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topology_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      180,
      this->topology_result(static_cast<int>(i)),
      output);
  }

  // repeated group Controller_result = 190 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      190,
      this->controller_result(static_cast<int>(i)),
      output);
  }

  // repeated group Cluster_result = 200 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      200,
      this->cluster_result(static_cast<int>(i)),
      output);
  }

  // repeated group Access_point_location_result = 210 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_location_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      210,
      this->access_point_location_result(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.query_response)
}

::google::protobuf::uint8* query_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.query_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Location_result = 10 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->location_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        10, this->location_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Presence_result = 20 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presence_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        20, this->presence_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Rssi_result = 30 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rssi_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        30, this->rssi_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Station_result = 40 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->station_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        40, this->station_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Radio_result = 50 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        50, this->radio_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Destination_result = 60 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->destination_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        60, this->destination_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Application_result = 70 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->application_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        70, this->application_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Visibility_rec_result = 80 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visibility_rec_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        80, this->visibility_rec_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Campus_result = 90 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->campus_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        90, this->campus_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Building_result = 100 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->building_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        100, this->building_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Floor_result = 110 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->floor_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        110, this->floor_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Access_point_result = 120 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        120, this->access_point_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Virtual_access_point_result = 130 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_access_point_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        130, this->virtual_access_point_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Geofence_result = 140 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geofence_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        140, this->geofence_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Proximity_result = 150 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proximity_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        150, this->proximity_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group WebCCCategory_result = 160 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->webcccategory_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        160, this->webcccategory_result(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional group Info_result = 170 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        170, this->_internal_info_result(), deterministic, target);
  }

  // repeated group Topology_result = 180 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topology_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        180, this->topology_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Controller_result = 190 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        190, this->controller_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Cluster_result = 200 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cluster_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        200, this->cluster_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated group Access_point_location_result = 210 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_point_location_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupToArray(
        210, this->access_point_location_result(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.query_response)
  return target;
}

size_t query_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.query_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated group Location_result = 10 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->location_result_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->location_result(static_cast<int>(i)));
    }
  }

  // repeated group Presence_result = 20 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->presence_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->presence_result(static_cast<int>(i)));
    }
  }

  // repeated group Rssi_result = 30 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->rssi_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->rssi_result(static_cast<int>(i)));
    }
  }

  // repeated group Station_result = 40 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->station_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->station_result(static_cast<int>(i)));
    }
  }

  // repeated group Radio_result = 50 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->radio_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->radio_result(static_cast<int>(i)));
    }
  }

  // repeated group Destination_result = 60 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->destination_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->destination_result(static_cast<int>(i)));
    }
  }

  // repeated group Application_result = 70 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->application_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->application_result(static_cast<int>(i)));
    }
  }

  // repeated group Visibility_rec_result = 80 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->visibility_rec_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->visibility_rec_result(static_cast<int>(i)));
    }
  }

  // repeated group Campus_result = 90 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->campus_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->campus_result(static_cast<int>(i)));
    }
  }

  // repeated group Building_result = 100 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->building_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->building_result(static_cast<int>(i)));
    }
  }

  // repeated group Floor_result = 110 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->floor_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->floor_result(static_cast<int>(i)));
    }
  }

  // repeated group Access_point_result = 120 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->access_point_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->access_point_result(static_cast<int>(i)));
    }
  }

  // repeated group Virtual_access_point_result = 130 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_access_point_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->virtual_access_point_result(static_cast<int>(i)));
    }
  }

  // repeated group Geofence_result = 140 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->geofence_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->geofence_result(static_cast<int>(i)));
    }
  }

  // repeated group Proximity_result = 150 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->proximity_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->proximity_result(static_cast<int>(i)));
    }
  }

  // repeated group WebCCCategory_result = 160 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->webcccategory_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->webcccategory_result(static_cast<int>(i)));
    }
  }

  // repeated group Topology_result = 180 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->topology_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->topology_result(static_cast<int>(i)));
    }
  }

  // repeated group Controller_result = 190 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->controller_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->controller_result(static_cast<int>(i)));
    }
  }

  // repeated group Cluster_result = 200 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->cluster_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->cluster_result(static_cast<int>(i)));
    }
  }

  // repeated group Access_point_location_result = 210 { ... };
  {
    unsigned int count = static_cast<unsigned int>(this->access_point_location_result_size());
    total_size += 4UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::GroupSize(
          this->access_point_location_result(static_cast<int>(i)));
    }
  }

  // optional group Info_result = 170 { ... };
  if (has_info_result()) {
    total_size += 4 +
      ::google::protobuf::internal::WireFormatLite::GroupSize(
        *info_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void query_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.query_response)
  GOOGLE_DCHECK_NE(&from, this);
  const query_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.query_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.query_response)
    MergeFrom(*source);
  }
}

void query_response::MergeFrom(const query_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.query_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_result_.MergeFrom(from.location_result_);
  presence_result_.MergeFrom(from.presence_result_);
  rssi_result_.MergeFrom(from.rssi_result_);
  station_result_.MergeFrom(from.station_result_);
  radio_result_.MergeFrom(from.radio_result_);
  destination_result_.MergeFrom(from.destination_result_);
  application_result_.MergeFrom(from.application_result_);
  visibility_rec_result_.MergeFrom(from.visibility_rec_result_);
  campus_result_.MergeFrom(from.campus_result_);
  building_result_.MergeFrom(from.building_result_);
  floor_result_.MergeFrom(from.floor_result_);
  access_point_result_.MergeFrom(from.access_point_result_);
  virtual_access_point_result_.MergeFrom(from.virtual_access_point_result_);
  geofence_result_.MergeFrom(from.geofence_result_);
  proximity_result_.MergeFrom(from.proximity_result_);
  webcccategory_result_.MergeFrom(from.webcccategory_result_);
  topology_result_.MergeFrom(from.topology_result_);
  controller_result_.MergeFrom(from.controller_result_);
  cluster_result_.MergeFrom(from.cluster_result_);
  access_point_location_result_.MergeFrom(from.access_point_location_result_);
  if (from.has_info_result()) {
    mutable_info_result()->::ce::nbapi::query_response_Info_result::MergeFrom(from.info_result());
  }
}

void query_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.query_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_response::CopyFrom(const query_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.query_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_response::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->location_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->presence_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rssi_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->station_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->radio_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->destination_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->application_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->visibility_rec_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->campus_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->building_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->floor_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->access_point_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->virtual_access_point_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geofence_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proximity_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->webcccategory_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->topology_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->controller_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cluster_result())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->access_point_location_result())) return false;
  if (has_info_result()) {
    if (!this->info_result_->IsInitialized()) return false;
  }
  return true;
}

void query_response::Swap(query_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_response::InternalSwap(query_response* other) {
  using std::swap;
  CastToBase(&location_result_)->InternalSwap(CastToBase(&other->location_result_));
  CastToBase(&presence_result_)->InternalSwap(CastToBase(&other->presence_result_));
  CastToBase(&rssi_result_)->InternalSwap(CastToBase(&other->rssi_result_));
  CastToBase(&station_result_)->InternalSwap(CastToBase(&other->station_result_));
  CastToBase(&radio_result_)->InternalSwap(CastToBase(&other->radio_result_));
  CastToBase(&destination_result_)->InternalSwap(CastToBase(&other->destination_result_));
  CastToBase(&application_result_)->InternalSwap(CastToBase(&other->application_result_));
  CastToBase(&visibility_rec_result_)->InternalSwap(CastToBase(&other->visibility_rec_result_));
  CastToBase(&campus_result_)->InternalSwap(CastToBase(&other->campus_result_));
  CastToBase(&building_result_)->InternalSwap(CastToBase(&other->building_result_));
  CastToBase(&floor_result_)->InternalSwap(CastToBase(&other->floor_result_));
  CastToBase(&access_point_result_)->InternalSwap(CastToBase(&other->access_point_result_));
  CastToBase(&virtual_access_point_result_)->InternalSwap(CastToBase(&other->virtual_access_point_result_));
  CastToBase(&geofence_result_)->InternalSwap(CastToBase(&other->geofence_result_));
  CastToBase(&proximity_result_)->InternalSwap(CastToBase(&other->proximity_result_));
  CastToBase(&webcccategory_result_)->InternalSwap(CastToBase(&other->webcccategory_result_));
  CastToBase(&topology_result_)->InternalSwap(CastToBase(&other->topology_result_));
  CastToBase(&controller_result_)->InternalSwap(CastToBase(&other->controller_result_));
  CastToBase(&cluster_result_)->InternalSwap(CastToBase(&other->cluster_result_));
  CastToBase(&access_point_location_result_)->InternalSwap(CastToBase(&other->access_point_location_result_));
  swap(info_result_, other->info_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata query_response::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void iap_client_url::InitAsDefaultInstance() {
  ::ce::nbapi::_iap_client_url_default_instance_._instance.get_mutable()->info_ = const_cast< ::ce::nbapi::iap_message_info*>(
      ::ce::nbapi::iap_message_info::internal_default_instance());
  ::ce::nbapi::_iap_client_url_default_instance_._instance.get_mutable()->ap_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_iap_client_url_default_instance_._instance.get_mutable()->url_record_ = const_cast< ::ce::nbapi::url_detail_record*>(
      ::ce::nbapi::url_detail_record::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int iap_client_url::kInfoFieldNumber;
const int iap_client_url::kTimestampFieldNumber;
const int iap_client_url::kApMacFieldNumber;
const int iap_client_url::kUrlRecordFieldNumber;
const int iap_client_url::kApHostNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

iap_client_url::iap_client_url()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_iap_client_url.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.iap_client_url)
}
iap_client_url::iap_client_url(const iap_client_url& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ap_host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ap_host_name()) {
    ap_host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_host_name_);
  }
  if (from.has_info()) {
    info_ = new ::ce::nbapi::iap_message_info(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_ap_mac()) {
    ap_mac_ = new ::ce::nbapi::mac_address(*from.ap_mac_);
  } else {
    ap_mac_ = NULL;
  }
  if (from.has_url_record()) {
    url_record_ = new ::ce::nbapi::url_detail_record(*from.url_record_);
  } else {
    url_record_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.iap_client_url)
}

void iap_client_url::SharedCtor() {
  ap_host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&info_)) + sizeof(timestamp_));
}

iap_client_url::~iap_client_url() {
  // @@protoc_insertion_point(destructor:ce.nbapi.iap_client_url)
  SharedDtor();
}

void iap_client_url::SharedDtor() {
  ap_host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete ap_mac_;
  if (this != internal_default_instance()) delete url_record_;
}

void iap_client_url::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* iap_client_url::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const iap_client_url& iap_client_url::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_iap_client_url.base);
  return *internal_default_instance();
}


void iap_client_url::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.iap_client_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ap_host_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ap_mac_ != NULL);
      ap_mac_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(url_record_ != NULL);
      url_record_->Clear();
    }
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool iap_client_url::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.iap_client_url)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.iap_message_info info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address ap_mac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.url_detail_record url_record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_url_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ap_host_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ap_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ap_host_name().data(), static_cast<int>(this->ap_host_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.iap_client_url.ap_host_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.iap_client_url)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.iap_client_url)
  return false;
#undef DO_
}

void iap_client_url::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.iap_client_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.iap_message_info info = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_info(), output);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // optional .ce.nbapi.mac_address ap_mac = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ap_mac(), output);
  }

  // optional .ce.nbapi.url_detail_record url_record = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_url_record(), output);
  }

  // optional string ap_host_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_host_name().data(), static_cast<int>(this->ap_host_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.iap_client_url.ap_host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ap_host_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.iap_client_url)
}

::google::protobuf::uint8* iap_client_url::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.iap_client_url)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.iap_message_info info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_info(), deterministic, target);
  }

  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // optional .ce.nbapi.mac_address ap_mac = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ap_mac(), deterministic, target);
  }

  // optional .ce.nbapi.url_detail_record url_record = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_url_record(), deterministic, target);
  }

  // optional string ap_host_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ap_host_name().data(), static_cast<int>(this->ap_host_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.iap_client_url.ap_host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ap_host_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.iap_client_url)
  return target;
}

size_t iap_client_url::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.iap_client_url)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ap_host_name = 5;
    if (has_ap_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ap_host_name());
    }

    // optional .ce.nbapi.iap_message_info info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .ce.nbapi.mac_address ap_mac = 3;
    if (has_ap_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ap_mac_);
    }

    // optional .ce.nbapi.url_detail_record url_record = 4;
    if (has_url_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *url_record_);
    }

    // optional uint64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iap_client_url::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.iap_client_url)
  GOOGLE_DCHECK_NE(&from, this);
  const iap_client_url* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const iap_client_url>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.iap_client_url)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.iap_client_url)
    MergeFrom(*source);
  }
}

void iap_client_url::MergeFrom(const iap_client_url& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.iap_client_url)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ap_host_name();
      ap_host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ap_host_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::ce::nbapi::iap_message_info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ap_mac()->::ce::nbapi::mac_address::MergeFrom(from.ap_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_url_record()->::ce::nbapi::url_detail_record::MergeFrom(from.url_record());
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void iap_client_url::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.iap_client_url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iap_client_url::CopyFrom(const iap_client_url& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.iap_client_url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iap_client_url::IsInitialized() const {
  if (has_ap_mac()) {
    if (!this->ap_mac_->IsInitialized()) return false;
  }
  if (has_url_record()) {
    if (!this->url_record_->IsInitialized()) return false;
  }
  return true;
}

void iap_client_url::Swap(iap_client_url* other) {
  if (other == this) return;
  InternalSwap(other);
}
void iap_client_url::InternalSwap(iap_client_url* other) {
  using std::swap;
  ap_host_name_.Swap(&other->ap_host_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(ap_mac_, other->ap_mac_);
  swap(url_record_, other->url_record_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata iap_client_url::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void url_detail_record::InitAsDefaultInstance() {
  ::ce::nbapi::_url_detail_record_default_instance_._instance.get_mutable()->client_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_url_detail_record_default_instance_._instance.get_mutable()->dest_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
  ::ce::nbapi::_url_detail_record_default_instance_._instance.get_mutable()->client_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int url_detail_record::kClientIpFieldNumber;
const int url_detail_record::kDestIpFieldNumber;
const int url_detail_record::kUrlFieldNumber;
const int url_detail_record::kHitCountFieldNumber;
const int url_detail_record::kClientMacFieldNumber;
const int url_detail_record::kHttpMethodFieldNumber;
const int url_detail_record::kLastHitTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

url_detail_record::url_detail_record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_url_detail_record.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.url_detail_record)
}
url_detail_record::url_detail_record(const url_detail_record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_client_ip()) {
    client_ip_ = new ::ce::nbapi::ip_address(*from.client_ip_);
  } else {
    client_ip_ = NULL;
  }
  if (from.has_dest_ip()) {
    dest_ip_ = new ::ce::nbapi::ip_address(*from.dest_ip_);
  } else {
    dest_ip_ = NULL;
  }
  if (from.has_client_mac()) {
    client_mac_ = new ::ce::nbapi::mac_address(*from.client_mac_);
  } else {
    client_mac_ = NULL;
  }
  ::memcpy(&last_hit_timestamp_, &from.last_hit_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&http_method_) -
    reinterpret_cast<char*>(&last_hit_timestamp_)) + sizeof(http_method_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.url_detail_record)
}

void url_detail_record::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_count_) -
      reinterpret_cast<char*>(&client_ip_)) + sizeof(hit_count_));
  http_method_ = 1;
}

url_detail_record::~url_detail_record() {
  // @@protoc_insertion_point(destructor:ce.nbapi.url_detail_record)
  SharedDtor();
}

void url_detail_record::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_ip_;
  if (this != internal_default_instance()) delete dest_ip_;
  if (this != internal_default_instance()) delete client_mac_;
}

void url_detail_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* url_detail_record::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const url_detail_record& url_detail_record::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_url_detail_record.base);
  return *internal_default_instance();
}


void url_detail_record::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.url_detail_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_ip_ != NULL);
      client_ip_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dest_ip_ != NULL);
      dest_ip_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(client_mac_ != NULL);
      client_mac_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&last_hit_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hit_count_) -
        reinterpret_cast<char*>(&last_hit_timestamp_)) + sizeof(hit_count_));
    http_method_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool url_detail_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.url_detail_record)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.ip_address client_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address dest_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dest_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hit_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hit_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address client_mac = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.url_detail_record.url_http_method http_method = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ce::nbapi::url_detail_record_url_http_method_IsValid(value)) {
            set_http_method(static_cast< ::ce::nbapi::url_detail_record_url_http_method >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_hit_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_last_hit_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_hit_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.url_detail_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.url_detail_record)
  return false;
#undef DO_
}

void url_detail_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.url_detail_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address client_ip = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_client_ip(), output);
  }

  // optional .ce.nbapi.ip_address dest_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dest_ip(), output);
  }

  // optional bytes url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->url(), output);
  }

  // optional uint32 hit_count = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hit_count(), output);
  }

  // optional .ce.nbapi.mac_address client_mac = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_client_mac(), output);
  }

  // optional .ce.nbapi.url_detail_record.url_http_method http_method = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->http_method(), output);
  }

  // optional uint64 last_hit_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->last_hit_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.url_detail_record)
}

::google::protobuf::uint8* url_detail_record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.url_detail_record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.ip_address client_ip = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_client_ip(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address dest_ip = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dest_ip(), deterministic, target);
  }

  // optional bytes url = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->url(), target);
  }

  // optional uint32 hit_count = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hit_count(), target);
  }

  // optional .ce.nbapi.mac_address client_mac = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_client_mac(), deterministic, target);
  }

  // optional .ce.nbapi.url_detail_record.url_http_method http_method = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->http_method(), target);
  }

  // optional uint64 last_hit_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->last_hit_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.url_detail_record)
  return target;
}

size_t url_detail_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.url_detail_record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

    // optional .ce.nbapi.ip_address client_ip = 1;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_ip_);
    }

    // optional .ce.nbapi.ip_address dest_ip = 2;
    if (has_dest_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dest_ip_);
    }

    // optional .ce.nbapi.mac_address client_mac = 5;
    if (has_client_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *client_mac_);
    }

    // optional uint64 last_hit_timestamp = 7;
    if (has_last_hit_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_hit_timestamp());
    }

    // optional uint32 hit_count = 4;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_count());
    }

    // optional .ce.nbapi.url_detail_record.url_http_method http_method = 6;
    if (has_http_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->http_method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void url_detail_record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.url_detail_record)
  GOOGLE_DCHECK_NE(&from, this);
  const url_detail_record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const url_detail_record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.url_detail_record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.url_detail_record)
    MergeFrom(*source);
  }
}

void url_detail_record::MergeFrom(const url_detail_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.url_detail_record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_client_ip()->::ce::nbapi::ip_address::MergeFrom(from.client_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dest_ip()->::ce::nbapi::ip_address::MergeFrom(from.dest_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_client_mac()->::ce::nbapi::mac_address::MergeFrom(from.client_mac());
    }
    if (cached_has_bits & 0x00000010u) {
      last_hit_timestamp_ = from.last_hit_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      hit_count_ = from.hit_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      http_method_ = from.http_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void url_detail_record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.url_detail_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void url_detail_record::CopyFrom(const url_detail_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.url_detail_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool url_detail_record::IsInitialized() const {
  if (has_client_ip()) {
    if (!this->client_ip_->IsInitialized()) return false;
  }
  if (has_dest_ip()) {
    if (!this->dest_ip_->IsInitialized()) return false;
  }
  if (has_client_mac()) {
    if (!this->client_mac_->IsInitialized()) return false;
  }
  return true;
}

void url_detail_record::Swap(url_detail_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void url_detail_record::InternalSwap(url_detail_record* other) {
  using std::swap;
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_ip_, other->client_ip_);
  swap(dest_ip_, other->dest_ip_);
  swap(client_mac_, other->client_mac_);
  swap(last_hit_timestamp_, other->last_hit_timestamp_);
  swap(hit_count_, other->hit_count_);
  swap(http_method_, other->http_method_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata url_detail_record::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void iap_message_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int iap_message_info::kVersionFieldNumber;
const int iap_message_info::kSequenceFieldNumber;
const int iap_message_info::kGuidFieldNumber;
const int iap_message_info::kOemTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

iap_message_info::iap_message_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_iap_message_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.iap_message_info)
}
iap_message_info::iap_message_info(const iap_message_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  oem_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oem_tag()) {
    oem_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oem_tag_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.iap_message_info)
}

void iap_message_info::SharedCtor() {
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oem_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(version_));
}

iap_message_info::~iap_message_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.iap_message_info)
  SharedDtor();
}

void iap_message_info::SharedDtor() {
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oem_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void iap_message_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* iap_message_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const iap_message_info& iap_message_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_iap_message_info.base);
  return *internal_default_instance();
}


void iap_message_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.iap_message_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      oem_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&sequence_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool iap_message_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.iap_message_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string oem_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oem_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oem_tag().data(), static_cast<int>(this->oem_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.iap_message_info.oem_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.iap_message_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.iap_message_info)
  return false;
#undef DO_
}

void iap_message_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.iap_message_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint64 sequence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sequence(), output);
  }

  // optional bytes guid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->guid(), output);
  }

  // optional string oem_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oem_tag().data(), static_cast<int>(this->oem_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.iap_message_info.oem_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->oem_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.iap_message_info)
}

::google::protobuf::uint8* iap_message_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.iap_message_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint64 sequence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sequence(), target);
  }

  // optional bytes guid = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->guid(), target);
  }

  // optional string oem_tag = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oem_tag().data(), static_cast<int>(this->oem_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.iap_message_info.oem_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->oem_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.iap_message_info)
  return target;
}

size_t iap_message_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.iap_message_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid());
    }

    // optional string oem_tag = 5;
    if (has_oem_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oem_tag());
    }

    // optional uint64 sequence = 3;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sequence());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iap_message_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.iap_message_info)
  GOOGLE_DCHECK_NE(&from, this);
  const iap_message_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const iap_message_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.iap_message_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.iap_message_info)
    MergeFrom(*source);
  }
}

void iap_message_info::MergeFrom(const iap_message_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.iap_message_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guid();
      guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_oem_tag();
      oem_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oem_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void iap_message_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.iap_message_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iap_message_info::CopyFrom(const iap_message_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.iap_message_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iap_message_info::IsInitialized() const {
  return true;
}

void iap_message_info::Swap(iap_message_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void iap_message_info::InternalSwap(iap_message_info* other) {
  using std::swap;
  guid_.Swap(&other->guid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oem_tag_.Swap(&other->oem_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata iap_message_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void air_monitor_info::InitAsDefaultInstance() {
  ::ce::nbapi::_air_monitor_info_default_instance_._instance.get_mutable()->monitor_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_air_monitor_info_default_instance_._instance.get_mutable()->heard_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_air_monitor_info_default_instance_._instance.get_mutable()->bssid_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_air_monitor_info_default_instance_._instance.get_mutable()->am_rogue_ = const_cast< ::ce::nbapi::air_monitor_rogue_info*>(
      ::ce::nbapi::air_monitor_rogue_info::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int air_monitor_info::kMonitorMacFieldNumber;
const int air_monitor_info::kEssidFieldNumber;
const int air_monitor_info::kMonitorChannelFieldNumber;
const int air_monitor_info::kIsApFieldNumber;
const int air_monitor_info::kClassificationTypeFieldNumber;
const int air_monitor_info::kPhyTypeFieldNumber;
const int air_monitor_info::kHtTypeFieldNumber;
const int air_monitor_info::kHeardMacFieldNumber;
const int air_monitor_info::kBssidFieldNumber;
const int air_monitor_info::kEncrTypeFieldNumber;
const int air_monitor_info::kEncrCipherFieldNumber;
const int air_monitor_info::kAuthAlgFieldNumber;
const int air_monitor_info::kAmRogueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

air_monitor_info::air_monitor_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_air_monitor_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.air_monitor_info)
}
air_monitor_info::air_monitor_info(const air_monitor_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  essid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_essid()) {
    essid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essid_);
  }
  if (from.has_monitor_mac()) {
    monitor_mac_ = new ::ce::nbapi::mac_address(*from.monitor_mac_);
  } else {
    monitor_mac_ = NULL;
  }
  if (from.has_heard_mac()) {
    heard_mac_ = new ::ce::nbapi::mac_address(*from.heard_mac_);
  } else {
    heard_mac_ = NULL;
  }
  if (from.has_bssid()) {
    bssid_ = new ::ce::nbapi::mac_address(*from.bssid_);
  } else {
    bssid_ = NULL;
  }
  if (from.has_am_rogue()) {
    am_rogue_ = new ::ce::nbapi::air_monitor_rogue_info(*from.am_rogue_);
  } else {
    am_rogue_ = NULL;
  }
  ::memcpy(&monitor_channel_, &from.monitor_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_alg_) -
    reinterpret_cast<char*>(&monitor_channel_)) + sizeof(auth_alg_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.air_monitor_info)
}

void air_monitor_info::SharedCtor() {
  essid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&monitor_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_alg_) -
      reinterpret_cast<char*>(&monitor_mac_)) + sizeof(auth_alg_));
}

air_monitor_info::~air_monitor_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.air_monitor_info)
  SharedDtor();
}

void air_monitor_info::SharedDtor() {
  essid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete monitor_mac_;
  if (this != internal_default_instance()) delete heard_mac_;
  if (this != internal_default_instance()) delete bssid_;
  if (this != internal_default_instance()) delete am_rogue_;
}

void air_monitor_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* air_monitor_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const air_monitor_info& air_monitor_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_air_monitor_info.base);
  return *internal_default_instance();
}


void air_monitor_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.air_monitor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      essid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(monitor_mac_ != NULL);
      monitor_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(heard_mac_ != NULL);
      heard_mac_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bssid_ != NULL);
      bssid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(am_rogue_ != NULL);
      am_rogue_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&monitor_channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&classification_type_) -
        reinterpret_cast<char*>(&monitor_channel_)) + sizeof(classification_type_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&phy_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_alg_) -
        reinterpret_cast<char*>(&phy_type_)) + sizeof(auth_alg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool air_monitor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.air_monitor_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ce.nbapi.mac_address monitor_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes essid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_essid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 monitor_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_monitor_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitor_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is_ap = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_ap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classification_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_classification_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classification_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phy_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_phy_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phy_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ht_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ht_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ht_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address heard_mac = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heard_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address bssid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bssid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 encr_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_encr_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encr_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 encr_cipher = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_encr_cipher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encr_cipher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_alg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_auth_alg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_alg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.air_monitor_rogue_info am_rogue = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_am_rogue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.air_monitor_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.air_monitor_info)
  return false;
#undef DO_
}

void air_monitor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.air_monitor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address monitor_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_monitor_mac(), output);
  }

  // optional bytes essid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->essid(), output);
  }

  // optional uint32 monitor_channel = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monitor_channel(), output);
  }

  // optional uint32 is_ap = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_ap(), output);
  }

  // optional uint32 classification_type = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->classification_type(), output);
  }

  // optional uint32 phy_type = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->phy_type(), output);
  }

  // optional uint32 ht_type = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ht_type(), output);
  }

  // optional .ce.nbapi.mac_address heard_mac = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_heard_mac(), output);
  }

  // optional .ce.nbapi.mac_address bssid = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_bssid(), output);
  }

  // optional uint32 encr_type = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->encr_type(), output);
  }

  // optional uint32 encr_cipher = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->encr_cipher(), output);
  }

  // optional uint32 auth_alg = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->auth_alg(), output);
  }

  // optional .ce.nbapi.air_monitor_rogue_info am_rogue = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_am_rogue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.air_monitor_info)
}

::google::protobuf::uint8* air_monitor_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.air_monitor_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ce.nbapi.mac_address monitor_mac = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_monitor_mac(), deterministic, target);
  }

  // optional bytes essid = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->essid(), target);
  }

  // optional uint32 monitor_channel = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monitor_channel(), target);
  }

  // optional uint32 is_ap = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_ap(), target);
  }

  // optional uint32 classification_type = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->classification_type(), target);
  }

  // optional uint32 phy_type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->phy_type(), target);
  }

  // optional uint32 ht_type = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ht_type(), target);
  }

  // optional .ce.nbapi.mac_address heard_mac = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_heard_mac(), deterministic, target);
  }

  // optional .ce.nbapi.mac_address bssid = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_bssid(), deterministic, target);
  }

  // optional uint32 encr_type = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->encr_type(), target);
  }

  // optional uint32 encr_cipher = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->encr_cipher(), target);
  }

  // optional uint32 auth_alg = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->auth_alg(), target);
  }

  // optional .ce.nbapi.air_monitor_rogue_info am_rogue = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_am_rogue(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.air_monitor_info)
  return target;
}

size_t air_monitor_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.air_monitor_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes essid = 2;
    if (has_essid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->essid());
    }

    // optional .ce.nbapi.mac_address monitor_mac = 1;
    if (has_monitor_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *monitor_mac_);
    }

    // optional .ce.nbapi.mac_address heard_mac = 8;
    if (has_heard_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *heard_mac_);
    }

    // optional .ce.nbapi.mac_address bssid = 9;
    if (has_bssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bssid_);
    }

    // optional .ce.nbapi.air_monitor_rogue_info am_rogue = 13;
    if (has_am_rogue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *am_rogue_);
    }

    // optional uint32 monitor_channel = 3;
    if (has_monitor_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monitor_channel());
    }

    // optional uint32 is_ap = 4;
    if (has_is_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ap());
    }

    // optional uint32 classification_type = 5;
    if (has_classification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classification_type());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 phy_type = 6;
    if (has_phy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phy_type());
    }

    // optional uint32 ht_type = 7;
    if (has_ht_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ht_type());
    }

    // optional uint32 encr_type = 10;
    if (has_encr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encr_type());
    }

    // optional uint32 encr_cipher = 11;
    if (has_encr_cipher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encr_cipher());
    }

    // optional uint32 auth_alg = 12;
    if (has_auth_alg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_alg());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void air_monitor_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.air_monitor_info)
  GOOGLE_DCHECK_NE(&from, this);
  const air_monitor_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const air_monitor_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.air_monitor_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.air_monitor_info)
    MergeFrom(*source);
  }
}

void air_monitor_info::MergeFrom(const air_monitor_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.air_monitor_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_essid();
      essid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.essid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_monitor_mac()->::ce::nbapi::mac_address::MergeFrom(from.monitor_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_heard_mac()->::ce::nbapi::mac_address::MergeFrom(from.heard_mac());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bssid()->::ce::nbapi::mac_address::MergeFrom(from.bssid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_am_rogue()->::ce::nbapi::air_monitor_rogue_info::MergeFrom(from.am_rogue());
    }
    if (cached_has_bits & 0x00000020u) {
      monitor_channel_ = from.monitor_channel_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_ap_ = from.is_ap_;
    }
    if (cached_has_bits & 0x00000080u) {
      classification_type_ = from.classification_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      phy_type_ = from.phy_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      ht_type_ = from.ht_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      encr_type_ = from.encr_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      encr_cipher_ = from.encr_cipher_;
    }
    if (cached_has_bits & 0x00001000u) {
      auth_alg_ = from.auth_alg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void air_monitor_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.air_monitor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void air_monitor_info::CopyFrom(const air_monitor_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.air_monitor_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool air_monitor_info::IsInitialized() const {
  if (has_monitor_mac()) {
    if (!this->monitor_mac_->IsInitialized()) return false;
  }
  if (has_heard_mac()) {
    if (!this->heard_mac_->IsInitialized()) return false;
  }
  if (has_bssid()) {
    if (!this->bssid_->IsInitialized()) return false;
  }
  if (has_am_rogue()) {
    if (!this->am_rogue_->IsInitialized()) return false;
  }
  return true;
}

void air_monitor_info::Swap(air_monitor_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void air_monitor_info::InternalSwap(air_monitor_info* other) {
  using std::swap;
  essid_.Swap(&other->essid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(monitor_mac_, other->monitor_mac_);
  swap(heard_mac_, other->heard_mac_);
  swap(bssid_, other->bssid_);
  swap(am_rogue_, other->am_rogue_);
  swap(monitor_channel_, other->monitor_channel_);
  swap(is_ap_, other->is_ap_);
  swap(classification_type_, other->classification_type_);
  swap(phy_type_, other->phy_type_);
  swap(ht_type_, other->ht_type_);
  swap(encr_type_, other->encr_type_);
  swap(encr_cipher_, other->encr_cipher_);
  swap(auth_alg_, other->auth_alg_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata air_monitor_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void air_monitor_rogue_info::InitAsDefaultInstance() {
  ::ce::nbapi::_air_monitor_rogue_info_default_instance_._instance.get_mutable()->match_mac_ = const_cast< ::ce::nbapi::mac_address*>(
      ::ce::nbapi::mac_address::internal_default_instance());
  ::ce::nbapi::_air_monitor_rogue_info_default_instance_._instance.get_mutable()->match_ip_ = const_cast< ::ce::nbapi::ip_address*>(
      ::ce::nbapi::ip_address::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int air_monitor_rogue_info::kMatchTypeFieldNumber;
const int air_monitor_rogue_info::kMatchMacFieldNumber;
const int air_monitor_rogue_info::kMatchIpFieldNumber;
const int air_monitor_rogue_info::kMonitorNameFieldNumber;
const int air_monitor_rogue_info::kNatMatchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

air_monitor_rogue_info::air_monitor_rogue_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_air_monitor_rogue_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ce.nbapi.air_monitor_rogue_info)
}
air_monitor_rogue_info::air_monitor_rogue_info(const air_monitor_rogue_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_monitor_name()) {
    monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
  }
  if (from.has_match_mac()) {
    match_mac_ = new ::ce::nbapi::mac_address(*from.match_mac_);
  } else {
    match_mac_ = NULL;
  }
  if (from.has_match_ip()) {
    match_ip_ = new ::ce::nbapi::ip_address(*from.match_ip_);
  } else {
    match_ip_ = NULL;
  }
  ::memcpy(&match_type_, &from.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nat_match_type_) -
    reinterpret_cast<char*>(&match_type_)) + sizeof(nat_match_type_));
  // @@protoc_insertion_point(copy_constructor:ce.nbapi.air_monitor_rogue_info)
}

void air_monitor_rogue_info::SharedCtor() {
  monitor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_mac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nat_match_type_) -
      reinterpret_cast<char*>(&match_mac_)) + sizeof(nat_match_type_));
}

air_monitor_rogue_info::~air_monitor_rogue_info() {
  // @@protoc_insertion_point(destructor:ce.nbapi.air_monitor_rogue_info)
  SharedDtor();
}

void air_monitor_rogue_info::SharedDtor() {
  monitor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_mac_;
  if (this != internal_default_instance()) delete match_ip_;
}

void air_monitor_rogue_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* air_monitor_rogue_info::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const air_monitor_rogue_info& air_monitor_rogue_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_air_monitor_rogue_info.base);
  return *internal_default_instance();
}


void air_monitor_rogue_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ce.nbapi.air_monitor_rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      monitor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(match_mac_ != NULL);
      match_mac_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(match_ip_ != NULL);
      match_ip_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&match_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nat_match_type_) -
        reinterpret_cast<char*>(&match_type_)) + sizeof(nat_match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool air_monitor_rogue_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ce.nbapi.air_monitor_rogue_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.mac_address match_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ce.nbapi.ip_address match_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string monitor_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ce.nbapi.air_monitor_rogue_info.monitor_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nat_match_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nat_match_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nat_match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ce.nbapi.air_monitor_rogue_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ce.nbapi.air_monitor_rogue_info)
  return false;
#undef DO_
}

void air_monitor_rogue_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ce.nbapi.air_monitor_rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 match_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_type(), output);
  }

  // optional .ce.nbapi.mac_address match_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_match_mac(), output);
  }

  // optional .ce.nbapi.ip_address match_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_match_ip(), output);
  }

  // optional string monitor_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.air_monitor_rogue_info.monitor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->monitor_name(), output);
  }

  // optional uint32 nat_match_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nat_match_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ce.nbapi.air_monitor_rogue_info)
}

::google::protobuf::uint8* air_monitor_rogue_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ce.nbapi.air_monitor_rogue_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 match_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_type(), target);
  }

  // optional .ce.nbapi.mac_address match_mac = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_match_mac(), deterministic, target);
  }

  // optional .ce.nbapi.ip_address match_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_match_ip(), deterministic, target);
  }

  // optional string monitor_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_name().data(), static_cast<int>(this->monitor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ce.nbapi.air_monitor_rogue_info.monitor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monitor_name(), target);
  }

  // optional uint32 nat_match_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nat_match_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ce.nbapi.air_monitor_rogue_info)
  return target;
}

size_t air_monitor_rogue_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ce.nbapi.air_monitor_rogue_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string monitor_name = 4;
    if (has_monitor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitor_name());
    }

    // optional .ce.nbapi.mac_address match_mac = 2;
    if (has_match_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_mac_);
    }

    // optional .ce.nbapi.ip_address match_ip = 3;
    if (has_match_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_ip_);
    }

    // optional uint32 match_type = 1;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_type());
    }

    // optional uint32 nat_match_type = 5;
    if (has_nat_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nat_match_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void air_monitor_rogue_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ce.nbapi.air_monitor_rogue_info)
  GOOGLE_DCHECK_NE(&from, this);
  const air_monitor_rogue_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const air_monitor_rogue_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ce.nbapi.air_monitor_rogue_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ce.nbapi.air_monitor_rogue_info)
    MergeFrom(*source);
  }
}

void air_monitor_rogue_info::MergeFrom(const air_monitor_rogue_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ce.nbapi.air_monitor_rogue_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_monitor_name();
      monitor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_match_mac()->::ce::nbapi::mac_address::MergeFrom(from.match_mac());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_match_ip()->::ce::nbapi::ip_address::MergeFrom(from.match_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      nat_match_type_ = from.nat_match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void air_monitor_rogue_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ce.nbapi.air_monitor_rogue_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void air_monitor_rogue_info::CopyFrom(const air_monitor_rogue_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ce.nbapi.air_monitor_rogue_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool air_monitor_rogue_info::IsInitialized() const {
  if (has_match_mac()) {
    if (!this->match_mac_->IsInitialized()) return false;
  }
  if (has_match_ip()) {
    if (!this->match_ip_->IsInitialized()) return false;
  }
  return true;
}

void air_monitor_rogue_info::Swap(air_monitor_rogue_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void air_monitor_rogue_info::InternalSwap(air_monitor_rogue_info* other) {
  using std::swap;
  monitor_name_.Swap(&other->monitor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_mac_, other->match_mac_);
  swap(match_ip_, other->match_ip_);
  swap(match_type_, other->match_type_);
  swap(nat_match_type_, other->nat_match_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata air_monitor_rogue_info::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nbapi
}  // namespace ce
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::ip_address* Arena::CreateMaybeMessage< ::ce::nbapi::ip_address >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::ip_address >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::mac_address* Arena::CreateMaybeMessage< ::ce::nbapi::mac_address >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::mac_address >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::data_rate_stats* Arena::CreateMaybeMessage< ::ce::nbapi::data_rate_stats >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::data_rate_stats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::data_prio_stats* Arena::CreateMaybeMessage< ::ce::nbapi::data_prio_stats >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::data_prio_stats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::data_traffic_type_stats* Arena::CreateMaybeMessage< ::ce::nbapi::data_traffic_type_stats >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::data_traffic_type_stats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::ap_neighbor* Arena::CreateMaybeMessage< ::ce::nbapi::ap_neighbor >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::ap_neighbor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::util_stats* Arena::CreateMaybeMessage< ::ce::nbapi::util_stats >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::util_stats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::location_record* Arena::CreateMaybeMessage< ::ce::nbapi::location_record >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::location_record >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::location_rtls_tag* Arena::CreateMaybeMessage< ::ce::nbapi::location_rtls_tag >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::location_rtls_tag >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::location* Arena::CreateMaybeMessage< ::ce::nbapi::location >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::location >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::presence* Arena::CreateMaybeMessage< ::ce::nbapi::presence >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::presence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::rssi* Arena::CreateMaybeMessage< ::ce::nbapi::rssi >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::rssi >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::sta_rssi* Arena::CreateMaybeMessage< ::ce::nbapi::sta_rssi >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::sta_rssi >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::tag_rssi* Arena::CreateMaybeMessage< ::ce::nbapi::tag_rssi >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::tag_rssi >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::ap_rssi* Arena::CreateMaybeMessage< ::ce::nbapi::ap_rssi >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::ap_rssi >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::station* Arena::CreateMaybeMessage< ::ce::nbapi::station >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::station >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::access_point* Arena::CreateMaybeMessage< ::ce::nbapi::access_point >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::access_point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::state_access_point* Arena::CreateMaybeMessage< ::ce::nbapi::state_access_point >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::state_access_point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_modem* Arena::CreateMaybeMessage< ::ce::nbapi::stats_modem >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_modem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::radio* Arena::CreateMaybeMessage< ::ce::nbapi::radio >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::radio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::virtual_access_point* Arena::CreateMaybeMessage< ::ce::nbapi::virtual_access_point >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::virtual_access_point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::destination* Arena::CreateMaybeMessage< ::ce::nbapi::destination >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::destination >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::application* Arena::CreateMaybeMessage< ::ce::nbapi::application >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::application >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::webcc_category* Arena::CreateMaybeMessage< ::ce::nbapi::webcc_category >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::webcc_category >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::webcc_info* Arena::CreateMaybeMessage< ::ce::nbapi::webcc_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::webcc_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::visibility_rec* Arena::CreateMaybeMessage< ::ce::nbapi::visibility_rec >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::visibility_rec >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::campus* Arena::CreateMaybeMessage< ::ce::nbapi::campus >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::campus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::building* Arena::CreateMaybeMessage< ::ce::nbapi::building >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::building >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::floor* Arena::CreateMaybeMessage< ::ce::nbapi::floor >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::floor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::point* Arena::CreateMaybeMessage< ::ce::nbapi::point >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::geofence* Arena::CreateMaybeMessage< ::ce::nbapi::geofence >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::geofence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::geofence_notify_Access_point_info* Arena::CreateMaybeMessage< ::ce::nbapi::geofence_notify_Access_point_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::geofence_notify_Access_point_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::geofence_notify* Arena::CreateMaybeMessage< ::ce::nbapi::geofence_notify >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::geofence_notify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_radio* Arena::CreateMaybeMessage< ::ce::nbapi::stats_radio >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_radio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_vap* Arena::CreateMaybeMessage< ::ce::nbapi::stats_vap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_vap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_station* Arena::CreateMaybeMessage< ::ce::nbapi::stats_station >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_station >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::state_station* Arena::CreateMaybeMessage< ::ce::nbapi::state_station >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::state_station >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::uplink_bandwidth* Arena::CreateMaybeMessage< ::ce::nbapi::uplink_bandwidth >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::uplink_bandwidth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::uplink_info* Arena::CreateMaybeMessage< ::ce::nbapi::uplink_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::uplink_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_uplink* Arena::CreateMaybeMessage< ::ce::nbapi::stats_uplink >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_uplink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::wan_comp_uplink* Arena::CreateMaybeMessage< ::ce::nbapi::wan_comp_uplink >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::wan_comp_uplink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_ip_probe_uplink* Arena::CreateMaybeMessage< ::ce::nbapi::stats_ip_probe_uplink >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_ip_probe_uplink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_tunnel* Arena::CreateMaybeMessage< ::ce::nbapi::stats_tunnel >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_tunnel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::bytes_info* Arena::CreateMaybeMessage< ::ce::nbapi::bytes_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::bytes_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::iap_bytes_info* Arena::CreateMaybeMessage< ::ce::nbapi::iap_bytes_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::iap_bytes_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_role_iap* Arena::CreateMaybeMessage< ::ce::nbapi::stats_role_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_role_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_vlan_iap* Arena::CreateMaybeMessage< ::ce::nbapi::stats_vlan_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_vlan_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_ssid_iap* Arena::CreateMaybeMessage< ::ce::nbapi::stats_ssid_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_ssid_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::stats_port* Arena::CreateMaybeMessage< ::ce::nbapi::stats_port >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::stats_port >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::summary_webcat_iap* Arena::CreateMaybeMessage< ::ce::nbapi::summary_webcat_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::summary_webcat_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::summary_appid_iap* Arena::CreateMaybeMessage< ::ce::nbapi::summary_appid_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::summary_appid_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::summary_webrep_iap* Arena::CreateMaybeMessage< ::ce::nbapi::summary_webrep_iap >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::summary_webrep_iap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::ap_neighbor_list* Arena::CreateMaybeMessage< ::ce::nbapi::ap_neighbor_list >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::ap_neighbor_list >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::utilization_stats_radio* Arena::CreateMaybeMessage< ::ce::nbapi::utilization_stats_radio >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::utilization_stats_radio >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::proximity* Arena::CreateMaybeMessage< ::ce::nbapi::proximity >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::proximity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::dot1x* Arena::CreateMaybeMessage< ::ce::nbapi::dot1x >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::dot1x >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::wpa_key_handshake* Arena::CreateMaybeMessage< ::ce::nbapi::wpa_key_handshake >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::wpa_key_handshake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::captive_portal* Arena::CreateMaybeMessage< ::ce::nbapi::captive_portal >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::captive_portal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::macauth* Arena::CreateMaybeMessage< ::ce::nbapi::macauth >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::macauth >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::auth_srvr_timeout* Arena::CreateMaybeMessage< ::ce::nbapi::auth_srvr_timeout >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::auth_srvr_timeout >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::security_message* Arena::CreateMaybeMessage< ::ce::nbapi::security_message >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::security_message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::spectrum_info* Arena::CreateMaybeMessage< ::ce::nbapi::spectrum_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::spectrum_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::rogue_info* Arena::CreateMaybeMessage< ::ce::nbapi::rogue_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::rogue_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::key_value_type* Arena::CreateMaybeMessage< ::ce::nbapi::key_value_type >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::key_value_type >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::info* Arena::CreateMaybeMessage< ::ce::nbapi::info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::controller_info* Arena::CreateMaybeMessage< ::ce::nbapi::controller_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::controller_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::cluster_info* Arena::CreateMaybeMessage< ::ce::nbapi::cluster_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::cluster_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::topology* Arena::CreateMaybeMessage< ::ce::nbapi::topology >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::topology >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::ap_location* Arena::CreateMaybeMessage< ::ce::nbapi::ap_location >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::ap_location >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::nb_event* Arena::CreateMaybeMessage< ::ce::nbapi::nb_event >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::nb_event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Location_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Location_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Location_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Presence_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Presence_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Presence_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Rssi_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Rssi_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Rssi_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Station_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Station_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Station_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Radio_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Radio_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Radio_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Destination_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Destination_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Destination_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Application_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Application_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Application_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Visibility_rec_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Visibility_rec_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Visibility_rec_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Campus_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Campus_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Campus_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Building_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Building_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Building_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Floor_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Floor_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Floor_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Access_point_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Access_point_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Access_point_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Virtual_access_point_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Virtual_access_point_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Virtual_access_point_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Geofence_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Geofence_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Geofence_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Proximity_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Proximity_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Proximity_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_WebCCCategory_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_WebCCCategory_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_WebCCCategory_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Info_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Info_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Info_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Topology_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Topology_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Topology_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Controller_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Controller_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Controller_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Cluster_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Cluster_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Cluster_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response_Access_point_location_result* Arena::CreateMaybeMessage< ::ce::nbapi::query_response_Access_point_location_result >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response_Access_point_location_result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::query_response* Arena::CreateMaybeMessage< ::ce::nbapi::query_response >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::query_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::iap_client_url* Arena::CreateMaybeMessage< ::ce::nbapi::iap_client_url >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::iap_client_url >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::url_detail_record* Arena::CreateMaybeMessage< ::ce::nbapi::url_detail_record >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::url_detail_record >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::iap_message_info* Arena::CreateMaybeMessage< ::ce::nbapi::iap_message_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::iap_message_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::air_monitor_info* Arena::CreateMaybeMessage< ::ce::nbapi::air_monitor_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::air_monitor_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ce::nbapi::air_monitor_rogue_info* Arena::CreateMaybeMessage< ::ce::nbapi::air_monitor_rogue_info >(Arena* arena) {
  return Arena::CreateInternal< ::ce::nbapi::air_monitor_rogue_info >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
